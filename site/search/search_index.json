{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u200b\u6765\u5230\u200b\u6211\u200b\u7684\u200b\u535a\u5ba2\u200b \ud83d\ude00","text":"<p>\u200b\u611f\u89c9\u200b\u81ea\u5df1\u200b\u4e00\u76f4\u200b\u5728\u200b\u5b66\u4e60\u200b\uff0c\u200b\u4f46\u662f\u200b\u5b66\u5b8c\u200b\u4e4b\u540e\u200b\u53c8\u200b\u6ca1\u5b66\u5f97\u200b\u5f88\u200b\u6df1\u523b\u200b\uff0c\u200b\u5199\u200b\u70b9\u200b\u535a\u5ba2\u200b\u8bb0\u5f55\u200b\u4e00\u4e0b\u200b\u3002</p>"},{"location":"#_2","title":"\u76ee\u5f55","text":"<ul> <li>c++<ul> <li>c++\u200b\u76ee\u5f55\u200b</li> </ul> </li> <li>Qt</li> <li>vulkan</li> <li>\u200b\u8ba1\u7b97\u673a\u200b\u56fe\u5f62\u5b66\u200b<ul> <li>Marching Cube</li> </ul> </li> <li>godot_source<ul> <li>[1\u200b\u6e32\u67d3\u200b\u6d41\u7a0b\u200b]</li> <li>1.1\u200b\u6e32\u67d3\u200b\u7cfb\u7edf\u200b\u7684\u200b\u914d\u7f6e\u200b</li> <li>1.2vulkan\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b</li> </ul> </li> </ul>"},{"location":"ComputerGraphics/MarchingCube/","title":"Marching Cube","text":""},{"location":"Godot/EndlessTerrian/","title":"Endless Terrian","text":""},{"location":"Godot/GridOnPlane/","title":"\u5728\u200b\u8868\u9762\u200b\u7ed8\u5236\u200b\u4e8c\u7ef4\u200b\u7f51\u683c","text":"<p>\u200b\u6700\u8fd1\u200b\u60f3\u200b\u505a\u200b\u4e00\u4e9b\u200b\u4e1c\u897f\u200b\uff0c\u200b\u4f46\u662f\u200b\u5f97\u200b\u5229\u7528\u200b\u6e38\u620f\u200b\u5f15\u64ce\u200b\u6765\u200b\u5b8c\u6210\u200b\u3002\u200b\u4e4b\u524d\u200b\u8ddf\u200b\u4e86\u200b\u4e00\u4e2a\u200bunity\u200b\u5b9e\u73b0\u200b\u7f51\u683c\u200b\u7cfb\u7edf\u200b\u7684\u200b\u6559\u7a0b\u200b\uff0c\u200b\u4f46\u662f\u200b\u6211\u200b\u60f3\u200b\u5728\u200bgodot\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u6548\u679c\u200b\u3002\u200b\u4f46\u662f\u200bgodot\u200b\u6559\u7a0b\u200b\u4e0d\u200b\u591a\u200b\uff0c\u200b\u90a3\u200b\u53ea\u80fd\u200b\u6211\u200b\u81ea\u5df1\u200b\u6162\u6162\u200b\u6478\u7d22\u200b\u4e86\u200b\u3002</p>"},{"location":"Godot-Source/01render_create/","title":"Godot\u200b\u6e32\u67d3\u200b\u6d41\u7a0b","text":""},{"location":"Godot-Source/01render_create/#1","title":"1. \u200b\u6e32\u67d3\u200b\u7cfb\u7edf\u200b\u7684\u200b\u6784\u5efa","text":"<p>\u200b\u8fd9\u6b21\u200b\u5206\u6790\u200b\u7684\u200b\u6e90\u7801\u200b\u662f\u200b\u57fa\u4e8e\u200bGodot 4.2 beta\u200b\u7248\u672c\u200b\u3002 CommitId\u200b\u662f\u200b\uff1a 09946f7</p> <p>\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u7684\u200b\u5185\u5bb9\u200b\u4e3b\u8981\u200b\u662f\u200b\u65ad\u70b9\u200b\u8c03\u8bd5\u200b\u8ddf\u8fdb\u200bGodot\u200b\u6e32\u67d3\u200b\u7cfb\u7edf\u200b\u662f\u200b\u600e\u4e48\u200b\u521b\u5efa\u200b\u56fe\u5f62\u200b\u6e32\u67d3\u200b\u8bbe\u5907\u200b\uff0c\u200b\u8c03\u7528\u200b\u56fe\u5f62\u200bAPI\u200b\u63a5\u53e3\u200b\uff0c\u200b\u7ed8\u5236\u200b\u56fe\u50cf\u200b\u6570\u636e\u200b\u3002\u200b\u5206\u6790\u200b\u7684\u200b\u4e3b\u8981\u200b\u662f\u200b\u4e0e\u200bVulkan\u200b\u76f8\u5173\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0copengl3\u200b\u7684\u200b\u7c7b\u4f3c\u200b\u5c31\u200b\u4e0d\u200b\u591a\u200b\u8d58\u8ff0\u200b\u4e86\u200b\uff0c\u200b\u800c\u4e14\u200b\u4e0e\u200b\u56fe\u5f62\u200b\u4e0d\u200b\u76f8\u5173\u200b\u7684\u200b\u5185\u5bb9\u200b\u6211\u4f1a\u200b\u76f4\u63a5\u200b\u8df3\u8fc7\u200b\u3002</p>"},{"location":"Godot-Source/01render_create/#11","title":"1.1 \u200b\u6e32\u67d3\u200b\u7cfb\u7edf\u200b\u7684\u200b\u914d\u7f6e","text":"<p>\u200b\u901a\u8fc7\u200b\u65ad\u70b9\u200b\u8fdb\u5165\u200b\u5230\u200b Main::setup \u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u4e2d\u95f4\u200b\u6709\u200b\u5f88\u957f\u200b\u7684\u200b\u4e00\u6bb5\u200b\u53c2\u6570\u200b\u89e3\u6790\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5e95\u5c42\u200b\u7684\u200b\u56fe\u5f62\u200b\u63a5\u53e3\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u547d\u4ee4\u884c\u200b\u6307\u5b9a\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u6307\u5b9a\u200b\u5404\u4e2a\u200b\u5e73\u53f0\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u56fe\u5f62\u200b\u9a71\u52a8\u200b\u4ee3\u7801\u200b\uff0c\u200b\u901a\u8fc7\u200b VULKAN_ENABLED \u200b\u5b8f\u6765\u200b\u6307\u5b9a\u200b\u56fe\u5f62\u200b\u5e95\u5c42\u200b\u4e3a\u200bvulkan\uff0c\u200b\u800c\u200b VULKAN_ENABLED \u200b\u5b8f\u200b\u7684\u200b\u6307\u5b9a\u200b\u662f\u200b\u5b9a\u4e49\u200b\u5728\u200bdetect.py\u200b\u4e2d\u200b <pre><code>    {\n        String driver_hints = \"\";\n#ifdef VULKAN_ENABLED\n        driver_hints = \"vulkan\";\n#endif\n\n        String default_driver = driver_hints.get_slice(\",\", 0);\n\n        // For now everything defaults to vulkan when available. This can change in future updates.\n        GLOBAL_DEF_RST(\"rendering/rendering_device/driver\", default_driver);\n        GLOBAL_DEF_RST(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.windows\", PROPERTY_HINT_ENUM, driver_hints), default_driver);\n        GLOBAL_DEF_RST(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.linuxbsd\", PROPERTY_HINT_ENUM, driver_hints), default_driver);\n        GLOBAL_DEF_RST(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.android\", PROPERTY_HINT_ENUM, driver_hints), default_driver);\n        GLOBAL_DEF_RST(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.ios\", PROPERTY_HINT_ENUM, driver_hints), default_driver);\n        GLOBAL_DEF_RST(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.macos\", PROPERTY_HINT_ENUM, driver_hints), default_driver);\n    }\n</code></pre></p> <p>\u200b\u4e0b\u9762\u200b\u4ee3\u7801\u200b\u6307\u5b9a\u200b\u4e86\u200b\u4e3b\u673a\u200b\u3001\u200b\u624b\u673a\u200b\u7b49\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u6e32\u67d3\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4e3b\u673a\u200b\u7aef\u200b\u9ed8\u8ba4\u200b\u662f\u200bforward+\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u79fb\u52a8\u200b\u7aef\u200b\u662f\u200b mobile,\u200b\u800c\u200bweb\u200b\u7aef\u5219\u200b\u662f\u200b gl_compatibility\uff1a opengl\u200b\u517c\u5bb9\u200b\u6a21\u5f0f\u200b <pre><code>default_renderer = renderer_hints.get_slice(\",\", 0);\nGLOBAL_DEF_RST_BASIC(PropertyInfo(Variant::STRING, \"rendering/renderer/rendering_method\", PROPERTY_HINT_ENUM, renderer_hints), default_renderer);\nGLOBAL_DEF_RST_BASIC(\"rendering/renderer/rendering_method.mobile\", default_renderer_mobile);\nGLOBAL_DEF_RST_BASIC(\"rendering/renderer/rendering_method.web\", \"gl_compatibility\"); // This is a bit of a hack until we have WebGPU support.\n</code></pre> \u200b\u4e0b\u9762\u200b\u5c31\u200b\u5230\u200b\u4e86\u200b\u91cd\u8981\u200b\u7684\u200b DisplayServer \u200b\u521b\u5efa\u200b\u3002DisplayServer \u200b\u662f\u4ece\u200b OS \u200b\u5206\u79bb\u51fa\u6765\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\uff0c\u200b\u7528\u4e8e\u200b\u7ba1\u7406\u200b\u6240\u6709\u200b\u4e0e\u200b\u7a97\u4f53\u200b\u76f8\u5173\u200b\u7684\u200b\u529f\u80fd\u200b\u3002\u200b\u81f3\u4e8e\u200b\u5206\u79bb\u200b\u7684\u200b\u539f\u56e0\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7cfb\u7edf\u200b\u53ef\u4ee5\u200b\u6709\u200b\u591a\u4e2a\u200b\u7a97\u4f53\u200b\u3002 <pre><code>// rendering_driver now held in static global String in main and initialized in setup()\nError err;\ndisplay_server = DisplayServer::create(display_driver_idx, rendering_driver, window_mode, window_vsync_mode, window_flags, window_position, window_size, init_screen, err);\nif (err != OK || display_server == nullptr) {\n    // We can't use this display server, try other ones as fallback.\n    // Skip headless (always last registered) because that's not what users\n    // would expect if they didn't request it explicitly.\n    for (int i = 0; i &lt; DisplayServer::get_create_function_count() - 1; i++) {\n        if (i == display_driver_idx) {\n            continue; // Don't try the same twice.\n        }\n        display_server = DisplayServer::create(i, rendering_driver, window_mode, window_vsync_mode, window_flags, window_position, window_size, init_screen, err);\n        if (err == OK &amp;&amp; display_server != nullptr) {\n            break;\n        }\n    }\n}\n</code></pre> DisplayServer\u200b\u7684\u200b\u521b\u5efa\u200b\u662f\u200b\u901a\u8fc7\u200b\u4f20\u5165\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u8c03\u7528\u200b\u5185\u90e8\u200b\u7684\u200bcreate\u200b\u9759\u6001\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b\u3002\u200b\u5f53\u672a\u200b\u521b\u5efa\u200b\u6210\u529f\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u8f6e\u8be2\u200bDisplayerServer\u200b\u5185\u90e8\u200b\u5b58\u50a8\u200b\u7684\u200bcreate function\u3002\u200b\u8fd9\u91cc\u200b\u5176\u5b9e\u200b\u53ef\u4ee5\u200b\u731c\u200b\u5230\u200bDisplayServer\u200b\u5185\u90e8\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5b58\u50a8\u200b\u51fd\u6570\u6307\u9488\u200b\u7684\u200b\u6570\u7ec4\u200b\uff0c\u200b\u81f3\u4e8e\u200b\u51fd\u6570\u6307\u9488\u200b\u662f\u200b\u600e\u4e48\u200b\u6ce8\u518c\u200b\u5230\u200bDisplayeServer\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u987a\u7740\u200b\u4ee3\u7801\u200b\u5f80\u4e0b\u200b\u770b\u200b\u3002\u200b\u5148\u770b\u200b\u4e0b\u200b DisplayServer::create \u200b\u51fd\u6570\u200b\u5185\u90e8\u200b\u662f\u200b\u600e\u4e48\u200b\u5b9e\u73b0\u200b\u7684\u200b\u3002 <pre><code>DisplayServer *DisplayServer::create(int p_index, const String &amp;p_rendering_driver, WindowMode p_mode, VSyncMode p_vsync_mode, uint32_t p_flags, const Vector2i *p_position, const Vector2i &amp;p_resolution, int p_screen, Error &amp;r_error) {\n    ERR_FAIL_INDEX_V(p_index, server_create_count, nullptr);\n    return server_create_functions[p_index].create_function(p_rendering_driver, p_mode, p_vsync_mode, p_flags, p_position, p_resolution, p_screen, r_error);\n}\n</code></pre> \u200b\u5185\u90e8\u200b\u679c\u7136\u200b\u662f\u200b\u5dee\u4e0d\u591a\u200b\u7684\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f46\u662f\u200b\u901a\u8fc7\u200b\u4e0b\u6807\u200b\u5f97\u5230\u200b\u5bf9\u8c61\u200b\u540e\u200b\u53c8\u200b\u53ef\u4ee5\u200b\u8c03\u200b\u5176\u4ed6\u200b\u51fd\u6570\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6570\u7ec4\u200b\u5185\u90e8\u200b\u5b58\u50a8\u200b\u7684\u200b\u5c31\u200b\u4e0d\u662f\u200b\u666e\u901a\u200b\u7684\u200b\u51fd\u6570\u6307\u9488\u200b\u4e86\u200b\u3002 \u200b\u73b0\u5728\u200b\u6709\u200b\u4e24\u6761\u8def\u200b\u53ef\u4ee5\u200b\u53bb\u200b\u8ffd\u8e2a\u200b\u4ee3\u7801\u200b\uff1a - \u200b\u627e\u5230\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\u662f\u200b\u600e\u4e48\u200b\u4fdd\u5b58\u200b\u5230\u200b server_create_functions \u200b\u8fd9\u4e2a\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b - \u200b\u76f4\u63a5\u200b\u65ad\u70b9\u200b\u8fdb\u5165\u200b create_function \u200b\u4e2d\u200b</p> <p>\u200b\u867d\u7136\u200b\u7b2c\u4e8c\u79cd\u200b\u65b9\u5f0f\u200b\u66f4\u52a0\u200b\u76f4\u63a5\u200b\uff0c\u200b\u4f46\u662f\u200b\u600e\u4e48\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\u662f\u200b\u600e\u4e48\u200b\u6ce8\u518c\u200b\u8fd8\u662f\u200b\u4e0d\u200b\u61c2\u200b\uff0c\u200b\u6240\u4ee5\u200b\u9009\u62e9\u200b\u7b2c\u4e00\u79cd\u200b\uff0c\u200b\u627e\u5230\u200b\u6ce8\u518c\u200b\u7684\u200b\u8def\u5f84\u200b\u5728\u200b\u54ea\u91cc\u200b\u3002\u200b\u5148\u200b\u627e\u5230\u200b server_create_functions \u200b\u662f\u200b\u600e\u4e48\u200b\u5b9a\u4e49\u200b\u7684\u200b <pre><code>    typedef DisplayServer *(*CreateFunction)(const String &amp;, WindowMode, VSyncMode, uint32_t, const Point2i *, const Size2i &amp;, int p_screen, Error &amp;r_error);\n    typedef Vector&lt;String&gt; (*GetRenderingDriversFunction)();\n    enum {\n        MAX_SERVERS = 64\n    };\n\n    struct DisplayServerCreate {\n        const char *name;\n        CreateFunction create_function;\n        GetRenderingDriversFunction get_rendering_drivers_function;\n    };\n\n    static DisplayServerCreate server_create_functions[MAX_SERVERS];\n</code></pre> DisplayServerCreate \u200b\u5bf9\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u6307\u9488\u200b\u7684\u200b\u5c01\u88c5\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u771f\u6b63\u200b\u7684\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u662f\u200b\u83b7\u53d6\u200b\u5b57\u7b26\u4e32\u200b\u6570\u7ec4\u200b\u7684\u200b\u65e0\u53c2\u200b\u51fd\u6570\u6307\u9488\u200b\u3002 \u200b\u901a\u8fc7\u200b\u65ad\u70b9\u200b\u5b9a\u4f4d\u200b\u6ce8\u518c\u200b\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u5806\u6808\u200b\u4fe1\u606f\u200b\u3002\u200b\u53d1\u73b0\u200b\u8c03\u7528\u200b\u7684\u200b\u5165\u53e3\u200b\u5728\u200bOS_Windows\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b <pre><code>OS_Windows::OS_Windows(HINSTANCE _hInstance) {\n    hInstance = _hInstance;\n\n    CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);\n\n#ifdef WASAPI_ENABLED\n    AudioDriverManager::add_driver(&amp;driver_wasapi);\n#endif\n#ifdef XAUDIO2_ENABLED\n    AudioDriverManager::add_driver(&amp;driver_xaudio2);\n#endif\n\n    DisplayServerWindows::register_windows_driver();\n    .\n    .\n    .\n}\n</code></pre> DisplayServerWindows \u200b\u662f\u200b DisplayServer \u200b\u7684\u200b\u5b50\u7c7b\u200b\uff0cregister_windows_driver \u200b\u662f\u200b\u9759\u6001\u200b\u51fd\u6570\u200b\uff0c\u200b\u8c03\u7528\u200b\u7236\u7c7b\u200b\u7684\u200b\u9759\u6001\u200b\u51fd\u6570\u200b register_windows_driver \u200b\u5c06\u200bDisplayServerWindows \u200b\u7684\u200b\u6210\u5458\u200b\u51fd\u6570\u200b \u200b\u4ee5\u200b\u51fd\u6570\u6307\u9488\u200b\u7684\u200b\u5f62\u5f0f\u200b\u8fdb\u884c\u200b\u4f20\u9012\u200b\u3002server_create_count - 1 \u200b\u7684\u200b\u8d4b\u503c\u200b\u64cd\u4f5c\u200b \u200b\u662f\u200b\u4e3a\u4e86\u200b\u4fdd\u8bc1\u200b \u200b\u9884\u5148\u200b\u521b\u5efa\u200b headless \u200b\u7a97\u4f53\u200b\u53c2\u6570\u200b\u603b\u662f\u200b\u5904\u5728\u200b\u6700\u540e\u200b\u3002 <pre><code>DisplayServer *DisplayServerWindows::create_func(const String &amp;p_rendering_driver, WindowMode p_mode, VSyncMode p_vsync_mode, uint32_t p_flags, const Vector2i *p_position, const Vector2i &amp;p_resolution, int p_screen, Error &amp;r_error) {\n    DisplayServer *ds = memnew(DisplayServerWindows(p_rendering_driver, p_mode, p_vsync_mode, p_flags, p_position, p_resolution, p_screen, r_error));\n    if (r_error != OK) {\n        if (p_rendering_driver == \"vulkan\") {\n            String executable_name = OS::get_singleton()-&gt;get_executable_path().get_file();\n            OS::get_singleton()-&gt;alert(\n                    vformat(\"Your video card drivers seem not to support the required Vulkan version.\\n\\n\"\n                            \"If possible, consider updating your video card drivers or using the OpenGL 3 driver.\\n\\n\"\n                            \"You can enable the OpenGL 3 driver by starting the engine from the\\n\"\n                            \"command line with the command:\\n\\n    \\\"%s\\\" --rendering-driver opengl3\\n\\n\"\n                            \"If you have recently updated your video card drivers, try rebooting.\",\n                            executable_name),\n                    \"Unable to initialize Vulkan video driver\");\n        } else {\n            OS::get_singleton()-&gt;alert(\n                    \"Your video card drivers seem not to support the required OpenGL 3.3 version.\\n\\n\"\n                    \"If possible, consider updating your video card drivers.\\n\\n\"\n                    \"If you have recently updated your video card drivers, try rebooting.\",\n                    \"Unable to initialize OpenGL video driver\");\n        }\n    }\n    return ds;\n}\n\nVector&lt;String&gt; DisplayServerWindows::get_rendering_drivers_func() {\n    Vector&lt;String&gt; drivers;\n\n#ifdef VULKAN_ENABLED\n    drivers.push_back(\"vulkan\");\n#endif\n#ifdef GLES3_ENABLED\n    drivers.push_back(\"opengl3\");\n    drivers.push_back(\"opengl3_angle\");\n#endif\n\n    return drivers;\n}\n\nvoid DisplayServerWindows::register_windows_driver() {\n    register_create_function(\"windows\", create_func, get_rendering_drivers_func);\n}\nvoid DisplayServer::register_create_function(const char *p_name, CreateFunction p_function, GetRenderingDriversFunction p_get_drivers) {\n    ERR_FAIL_COND(server_create_count == MAX_SERVERS);\n    // Headless display server is always last\n    server_create_functions[server_create_count] = server_create_functions[server_create_count - 1];\n    server_create_functions[server_create_count - 1].name = p_name;\n    server_create_functions[server_create_count - 1].create_function = p_function;\n    server_create_functions[server_create_count - 1].get_rendering_drivers_function = p_get_drivers;\n    server_create_count++;\n}\n</code></pre></p> <p>\u200b\u5df2\u7ecf\u200b\u627e\u5230\u200b DisplayServer \u200b\u4e2d\u200b\u7684\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\u662f\u200b\u5982\u4f55\u200b\u6ce8\u518c\u200b\u7684\u200b\uff0c\u200b\u603b\u4f53\u200b\u4e0a\u200b\u5c31\u662f\u200b\u5b50\u7c7b\u200b DisplayServerWindows \u200b\u901a\u8fc7\u200b\u9759\u6001\u200b\u51fd\u6570\u200b \u200b\u5411\u200b\u7236\u7c7b\u200b DisplayServer \u200b\u6ce8\u518c\u200b\u81ea\u5df1\u200b\u7684\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\uff0c\u200b\u7a0b\u5e8f\u200b\u5411\u4e0b\u200b\u6267\u884c\u200b\u5c31\u200b\u5230\u200b\u4e86\u200b DisplayServerWindows::create_func \u200b\u51fd\u6570\u200b\u4e2d\u200b\u4e86\u200b\u3002\u200b\u51fd\u6570\u200b\u521b\u5efa\u200b\u4e86\u200b DisplayServerWindows \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u60f3\u200b\u4e86\u89e3\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u7684\u200b\u5177\u4f53\u200b\u529f\u80fd\u200b\u53ef\u4ee5\u200b\u53bb\u200b\u770b\u200b\u5185\u90e8\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u91cc\u9762\u200b\u6d89\u53ca\u200b\u5230\u200b\u56fe\u5f62\u200b\u7684\u200b\u5185\u5bb9\u200b\u662f\u200b\u521b\u5efa\u200b\u4e86\u200b VulkanContextWindows \u200b\u5b9e\u4f8b\u200b\u3002 <pre><code>DisplayServerWindows::DisplayServerWindows(const String &amp;p_rendering_driver, WindowMode p_mode, VSyncMode p_vsync_mode, uint32_t p_flags, const Vector2i *p_position, const Vector2i &amp;p_resolution, int p_screen, Error &amp;r_error) {\n    .\n    .\n#if defined(VULKAN_ENABLED)\n    if (rendering_driver == \"vulkan\") {\n        context_vulkan = memnew(VulkanContextWindows);\n        if (context_vulkan-&gt;initialize() != OK) {\n            memdelete(context_vulkan);\n            context_vulkan = nullptr;\n            r_error = ERR_UNAVAILABLE;\n            return;\n        }\n    }\n#endif\n    .\n    .\n}\n</code></pre></p> <p>\u200b\u7ecf\u8fc7\u200b\u4e86\u200b\u5f2f\u5f2f\u7ed5\u200b\u7ed5\u200b\uff0c\u200b\u7ec8\u4e8e\u200b\u5feb\u200b\u89e6\u53ca\u200b\u5230\u200b vulkan \u200b\u771f\u6b63\u200b\u7684\u200b\u5185\u5bb9\u200b\u4e86\u200b\uff0cGodot\u200b\u5728\u200b\u542f\u52a8\u200b\u671f\u95f4\u200b\u5404\u79cd\u200b\u914d\u7f6e\u200b\u3001\u200b\u6ce8\u518c\u200b\u3001\u200b\u6821\u9a8c\u200b\u3002\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u6211\u200b\u53ea\u200b\u4fdd\u7559\u200b\u4e86\u200bGodot\u200b\u4e2d\u200b\u6700\u200b\u6838\u5fc3\u200b\u7684\u200b\u90e8\u5206\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u6837\u200b\u624d\u200b\u53ef\u4ee5\u200b\u6293\u4f4f\u200b\u6700\u200b\u4e3b\u8981\u200b\u7684\u200b\u903b\u8f91\u200b\u94fe\u8def\u200b\u3002\u200b\u6211\u200b\u60f3\u200b\u628a\u200b\u6d89\u53ca\u200b Vulkan \u200b\u7684\u200b\u5185\u5bb9\u200b\u6574\u5408\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u6240\u4ee5\u200b vulkan \u200b\u7684\u200b\u521d\u59cb\u5316\u200b \u200b\u4ee5\u53ca\u200b win32 surface \u200b\u7684\u200b\u4f20\u9012\u200b \u200b\u6211\u4f1a\u200b\u5199\u200b\u5728\u200b\u4e0b\u200b\u4e00\u7ae0\u200b\u3002</p>"},{"location":"Godot-Source/02vulkan_init/","title":"02vulkan init","text":""},{"location":"Godot-Source/02vulkan_init/#12-vulkan","title":"1.2 vulkan \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316","text":"<p>\u200b\u5728\u200b DisplayServerWindows \u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b VulkanContextWindows \u200b\u88ab\u200b\u521b\u5efa\u200b\uff0c\u200b\u7136\u540e\u200b\u8c03\u7528\u200b initialize \u200b\u51fd\u6570\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\u3002 <pre><code>#if defined(VULKAN_ENABLED)\n    if (rendering_driver == \"vulkan\") {\n        context_vulkan = memnew(VulkanContextWindows);\n        if (context_vulkan-&gt;initialize() != OK) {\n            memdelete(context_vulkan);\n            context_vulkan = nullptr;\n            r_error = ERR_UNAVAILABLE;\n            return;\n        }\n    }\n#endif\n</code></pre> \u200b\u4e00\u6b65\u200b\u4e00\u6b65\u200b\u6765\u200b\uff0c\u200b\u5148\u770b\u200b VulkanContextWindows \u200b\u662f\u200b\u600e\u4e48\u200b\u5b9a\u4e49\u200b\u7684\u200b\uff1a</p>"},{"location":"c%2B%2B/0%E7%9B%AE%E5%BD%95/","title":"\u76ee\u5f55","text":""}]}