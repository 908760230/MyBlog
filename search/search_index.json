{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u200b \ud83d\ude00","text":"<p>\u200b\u611f\u89c9\u200b\u81ea\u5df1\u200b\u4e00\u76f4\u200b\u5728\u200b\u5b66\u4e60\u200b\uff0c\u200b\u4f46\u662f\u200b\u5b66\u5b8c\u200b\u4e4b\u540e\u200b\u53c8\u200b\u6ca1\u5b66\u5f97\u200b\u5f88\u200b\u6df1\u523b\u200b\uff0c\u200b\u5199\u200b\u70b9\u200b\u5185\u5bb9\u200b\u8bb0\u5f55\u200b\u4e00\u4e0b\u200b\u3002</p>"},{"location":"#_2","title":"\u76ee\u5f55","text":"<ul> <li>\u200b\u529b\u6263\u200b</li> <li>c++</li> <li>Qt</li> <li>vulkan</li> <li>\u200b\u6570\u636e\u7ed3\u6784\u200b</li> <li>\u200b\u7b97\u6cd5\u200b</li> <li>\u200b\u8ba1\u7b97\u673a\u200b\u56fe\u5f62\u5b66\u200b</li> <li>Godot\u200b\u9879\u76ee\u200b\u4ee3\u7801\u200b</li> <li>Godot\u200b\u6e90\u7801\u200b\u89e3\u6790\u200b</li> <li>\u200b\u6bd5\u200b\u6607\u200bC\u200b\u7f16\u8bd1\u5668\u200b</li> </ul>"},{"location":"Algorithm/","title":"\u7b97\u6cd5","text":"<ul> <li>[\u200b\u67e5\u627e\u200b\u7b97\u6cd5\u200b]<ul> <li>\u200b\u4e32\u200b\u7684\u200b\u6a21\u5f0f\u5339\u914d\u200b\uff1a\u200b\u6734\u7d20\u200b\u7684\u200b\u6a21\u5f0f\u5339\u914d\u200b\u7b97\u6cd5\u200b\uff0cKMP\u200b\u7b97\u6cd5\u200b</li> <li>\u200b\u987a\u5e8f\u200b\u67e5\u627e\u200b</li> <li>\u200b\u6298\u534a\u200b\u67e5\u627e\u200b</li> <li>\u200b\u6590\u6ce2\u200b\u90a3\u5951\u200b\u67e5\u627e\u200b</li> <li>\u200b\u63d2\u503c\u200b\u67e5\u627e\u200b</li> </ul> </li> <li>[\u200b\u6392\u5e8f\u200b\u7b97\u6cd5\u200b]<ul> <li>\u200b\u76f4\u63a5\u200b\u63d2\u5165\u6392\u5e8f\u200b</li> <li>\u200b\u6298\u534a\u200b\u63d2\u5165\u6392\u5e8f\u200b</li> <li>\u200b\u4e8c\u8def\u200b\u63d2\u5165\u6392\u5e8f\u200b</li> <li>\u200b\u8868\u200b\u63d2\u5165\u6392\u5e8f\u200b</li> <li>\u200b\u5e0c\u5c14\u200b\u6392\u5e8f\u200b</li> <li>\u200b\u5192\u6ce1\u6392\u5e8f\u200b</li> <li>\u200b\u9e21\u5c3e\u9152\u200b\u6392\u5e8f\u200b</li> <li>\u200b\u5feb\u901f\u200b\u6392\u5e8f\u200b</li> </ul> </li> </ul>"},{"location":"Algorithm/1-%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/","title":"\u987a\u5e8f\u200b\u67e5\u627e","text":"<p>\u200b\u987a\u5e8f\u200b\u67e5\u627e\u200b\u662f\u200b\u7ecf\u5e38\u200b\u4f7f\u7528\u200b\u7684\u200b\u4e00\u79cd\u200b\u67e5\u627e\u200b\u65b9\u6cd5\u200b\u3002\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u65e2\u200b\u9002\u7528\u200b\u4e8e\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784\u200b\uff0c\u200b\u53c8\u200b\u9002\u7528\u200b\u4e8e\u200b\u94fe\u5f0f\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u3002</p> <p>\u200b\u987a\u5e8f\u200b\u67e5\u627e\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff1a</p> <p>\u200b\u5bf9\u4e8e\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u5173\u952e\u5b57\u200bk\uff0c\u200b\u4ece\u200b\u987a\u5e8f\u200b\u8868\u200b\u7684\u200b\u4e00\u7aef\u200b\u5f00\u59cb\u200b\u987a\u5e8f\u200b\u626b\u63cf\u200b\u8868\u4e2d\u200b\u5143\u7d20\u200b\uff0c\u200b\u4e00\u6b21\u200b\u4e0e\u200b\u8bb0\u5f55\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\u57df\u200b\u8fdb\u884c\u200b\u6bd4\u8f83\u200b\uff0c\u200b\u5982\u679c\u200b\u67d0\u4e2a\u200b\u8bb0\u5f55\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\u7b49\u4e8e\u200bk\uff0c\u200b\u5219\u200b\u67e5\u627e\u200b\u6210\u529f\u200b\uff0c\u200b\u5426\u5219\u200b\u67e5\u627e\u200b\u5931\u8d25\u200b\u3002</p> <p>\u200b\u7f3a\u70b9\u200b\uff1a \u200b\u5e73\u5747\u200b\u67e5\u627e\u200b\u957f\u5ea6\u200b\u8f83\u5927\u200b\uff0c\u200b\u7279\u522b\u200b\u662f\u200b\u5f53\u200b\u67e5\u627e\u200b\u5143\u7d20\u200b\u5f88\u591a\u200b\u65f6\u200b\uff0c\u200b\u67e5\u627e\u200b\u6548\u7387\u200b\u4f4e\u200b\u3002</p> <p>\u200b\u4f18\u70b9\u200b\uff1a \u200b\u7b97\u6cd5\u200b\u7b80\u5355\u200b\u4e14\u200b\u9002\u7528\u200b\u9762\u5e7f\u200b\u3002\u200b\u5b83\u200b\u5bf9\u8868\u200b\u7684\u200b\u7ed3\u6784\u200b\u65e0\u200b\u4efb\u4f55\u200b\u8981\u6c42\u200b\uff0c\u200b\u65e0\u8bba\u200b\u8bb0\u5f55\u200b\u662f\u5426\u200b\u6309\u200b\u5173\u952e\u5b57\u200b\u6709\u5e8f\u200b\u5747\u200b\u53ef\u200b\u5e94\u7528\u200b\u3002</p>"},{"location":"Algorithm/10-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","title":"\u5192\u6ce1\u6392\u5e8f","text":"<p>\u200b\u5192\u6ce1\u6392\u5e8f\u200b\u662f\u200b\u4ea4\u6362\u200b\u6392\u5e8f\u200b\u7684\u200b\u4e00\u79cd\u200b\uff0c\u200b\u7b97\u6cd5\u200b\u5185\u5bb9\u200b\u8ddf\u200b\u5b83\u200b\u7684\u200b\u540d\u5b57\u200b\u4e00\u6837\u200b\uff0c\u200b\u503c\u5927\u200b\u7684\u200b\u5143\u7d20\u200b\u4f1a\u200b\u7ecf\u8fc7\u200b\u4ea4\u6362\u200b\u4e0d\u65ad\u200b\u7684\u200b\u79fb\u200b\u5411\u200b\u6570\u5217\u200b\u7684\u200b\u524d\u7aef\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u5c31\u200b\u50cf\u200b\u6c34\u5e95\u200b\u6b63\u5728\u200b\u4e0a\u6d6e\u200b\u7684\u200b\u6c14\u6ce1\u200b\u4e00\u6837\u200b\u3002</p>"},{"location":"Algorithm/10-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid BubbleSort(int num[],int n) {\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = n - 1; j &gt; i; j--) {\n            if (num[j] &lt; num[j - 1]) {\n                int temp = num[j];\n                num[j] = num[j - 1];\n                num[j - 1] = temp;\n            }\n        }\n    }\n}\nvoid main(){\n    int num[12] = { 10,6,2,33,15,12,23,76,1,54,22,9 };\n    BubbleSort(num, 12);\n    for (auto x : num) {\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/11-%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F/","title":"\u9e21\u5c3e\u9152\u200b\u6392\u5e8f","text":"<p>\u200b\u4e00\u79cd\u200b\u6539\u8fdb\u200b\u7684\u200b\u5192\u6ce1\u6392\u5e8f\u200b\uff0c\u200b\u539f\u7406\u200b\u662f\u200b\u5bf9\u200b\u8981\u200b\u6392\u5e8f\u200b\u7684\u200b\u6570\u7ec4\u200b\u8fdb\u884c\u200b\u53cc\u5411\u200b\u5192\u6ce1\u200b\uff0c\u200b\u53cc\u5411\u200b\u5192\u6ce1\u6392\u5e8f\u200b\u53c8\u79f0\u200b\u9e21\u5c3e\u9152\u200b\u6392\u5e8f\u200b\u3002</p> <p>\u200b\u539f\u7406\u200b\u662f\u200b\uff1a\u200b\u5927\u6570\u200b\u5411\u200b\u540e\u6392\u200b\uff0c\u200b\u5c0f\u6570\u200b\u5411\u524d\u200b\u6392\u200b\u3002</p>"},{"location":"Algorithm/11-%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid CockTail(int num[],int n) {\n    int tail = n - 1;\n    int i;\n    for ( i = 0; i &lt; tail;) {   //\u200b\u5c06\u200b\u6700\u5c0f\u200b\u7684\u200b\u6570\u6392\u200b\u5230\u200b\u524d\u9762\u200b\n        for ( int j =tail; j &gt; i; j--) {\n            if (num[j] &lt; num[j - 1]) {\n                int temp = num[j];\n                num[j] = num[j - 1];\n                num[j - 1] = temp;\n            }\n        }\n        i++;          //\u200b\u6700\u5c0f\u200b\u6570\u5df2\u200b\u6392\u597d\u200b \u200b\u5411\u200b\u540e\u200b+1\n        for (int j = i; j &lt;tail ; j++) {   //\u200b\u5c06\u200b\u6700\u5927\u200b\u7684\u200b\u6570\u6392\u200b\u5230\u200b\u540e\u9762\u200b\n            if (num[j] &gt; num[j + 1]) {\n                int temp = num[j];\n                num[j] = num[j + 1];\n                num[j + 1] = temp;\n            }\n        }\n        tail--;  //\u200b\u6700\u5927\u6570\u200b\u5df2\u6392\u200b\u597d\u200b \u200b\u5411\u524d\u200b\u79fb\u52a8\u200b\n    }\n\n}\nvoid main(){\n    int num[12] = { 10,6,2,33,15,12,23,76,1,54,22,9 };\n    CockTail(num, 12);\n    for (auto x : num) {\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/12-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","title":"\u5feb\u901f\u200b\u6392\u5e8f","text":"<p>\u200b\u57fa\u672c\u200b\u601d\u60f3\u200b\uff1a\u200b\u9996\u5148\u200b\u5c06\u200b\u5f85\u200b\u6392\u5e8f\u200b\u8bb0\u5f55\u200b\u5e8f\u5217\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u8bb0\u5f55\u200b\u4f5c\u4e3a\u200b\u5f53\u524d\u200b\u5f85\u200b\u6392\u5e8f\u200b\u533a\u57df\u200b\uff0c\u200b\u4ece\u4e2d\u200b\u4efb\u9009\u200b\u4e00\u4e2a\u200b\u8bb0\u5f55\u200b\uff08\u200b\u901a\u5e38\u200b\u53ef\u200b\u9009\u53d6\u200b\u7b2c\u4e00\u4e2a\u200b\u8bb0\u5f55\u200b\uff09\uff0c\u200b\u4ee5\u200b\u5b83\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\u4f5c\u4e3a\u200b\u67a2\u8f74\u200b\uff0c\u200b\u51e1\u200b\u5176\u200b\u5173\u952e\u5b57\u200b\u5c0f\u4e8e\u200b\u67a2\u8f74\u200b\u7684\u200b\u8bb0\u5f55\u200b\u5747\u200b\u79fb\u81f3\u200b\u8be5\u200b\u8bb0\u5f55\u200b\u4e4b\u524d\u200b\uff0c\u200b\u53cd\u4e4b\u200b\uff0c\u200b\u51e1\u200b\u5173\u952e\u5b57\u200b\u5927\u4e8e\u200b\u67a2\u8f74\u200b\u7684\u200b\u8bb0\u5f55\u200b\u5747\u200b\u79fb\u52a8\u200b\u81f3\u8be5\u200b\u8bb0\u5f55\u200b\u4e4b\u540e\u200b\uff0c\u200b\u8fd9\u6837\u200b\u4e00\u8d9f\u200b\u6392\u5e8f\u200b\u4e4b\u540e\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u5c06\u200b\u65e0\u5e8f\u200b\u5e8f\u5217\u200b\u5206\u5272\u200b\u6210\u200b\u4e24\u200b\u90e8\u5206\u200b\uff0c\u200b\u518d\u200b\u5728\u200b\u8fd9\u200b\u4e24\u200b\u90e8\u5206\u200b\u4e2d\u200b\u5206\u522b\u200b\u91cd\u590d\u200b\u4e0a\u8ff0\u200b\u64cd\u4f5c\u200b\u3002</p> <p>\u200b\u5feb\u901f\u200b\u6392\u5e8f\u200b\u7684\u200b\u5e73\u5747\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b\uff1aO(n Log 2 n ) </p> <p>\u200b\u5982\u679c\u200b\u5f85\u200b\u6392\u5e8f\u200b\u8bb0\u5f55\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6309\u200b\u5173\u952e\u5b57\u200b\u6709\u5e8f\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5feb\u901f\u200b\u6392\u5e8f\u200b\u9000\u5316\u200b\u4e3a\u200b\u6c14\u6ce1\u200b\u6392\u5e8f\u200b\uff0c\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b\uff1a O\uff08n2\uff09</p>"},{"location":"Algorithm/12-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid quickSort(int num[],int low,int high) {\n    if (low &gt;= high) return;\n    int first = low;\n    int last = high;\n    int key = num[first];\n    while (first &lt; last) {\n        while (first &lt; last &amp;&amp; num[last]&gt;=key) { //\u200b\u5c0f\u200b\u5143\u7d20\u200b\u524d\u79fb\u200b\n            --last;\n        }\n        num[first] = num[last];\n        while (first &lt; last &amp;&amp; num[first] &lt;= key) { //\u200b\u5927\u200b\u5143\u7d20\u200b\u540e\u79fb\u200b\n            ++first;\n        }\n        num[last] = num[first];\n    }\n    num[last] = key;\n    quickSort(num, low, first - 1);\n    quickSort(num, first + 1, high);\n}\nvoid main() {\n    int num[12] = { 10,6,2,33,15,12,23,76,1,54,22,9 };\n    quickSort(num,0,11);\n    for (auto x : num) {\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/2-%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/","title":"\u6298\u534a\u200b\u67e5\u627e","text":"<p>\u200b\u6298\u534a\u200b\u67e5\u627e\u200b\u53c8\u200b\u79f0\u4e3a\u200b\u4e8c\u5206\u200b\u67e5\u627e\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b\u4e00\u79cd\u200b \u200b\u6548\u7387\u200b\u8f83\u200b\u9ad8\u200b\u7684\u200b\u67e5\u627e\u200b\u65b9\u6cd5\u200b\u3002\u200b\u6298\u534a\u200b\u67e5\u627e\u200b\u8981\u6c42\u200b\u8868\u200b\u6709\u5e8f\u200b\uff0c\u200b\u5373\u8868\u4e2d\u200b\u5143\u7d20\u200ban\u200b\u5173\u952e\u5b57\u200b\u6709\u5e8f\u200b\uff0c\u200b\u800c\u4e14\u200b\u5fc5\u987b\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u3002</p> <p>\u200b\u6298\u534a\u200b\u67e5\u627e\u200b\u7684\u200b\u601d\u60f3\u200b\uff1a</p> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u5c06\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u5173\u952e\u5b57\u200bk\u200b\u4e0e\u200b\u6709\u5e8f\u200b\u8868\u200b\u7684\u200b\u4e2d\u95f4\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\u7684\u200b\u5143\u7d20\u200b\u8fdb\u884c\u200b\u6bd4\u8f83\u200b\uff0c\u200b\u82e5\u200b\u76f8\u7b49\u200b\uff0c\u200b\u5219\u200b\u67e5\u627e\u200b\u6210\u529f\u200b\u3002\u200b\u5426\u5219\u200b\uff0c\u200b\u4e2d\u95f4\u200b\u5143\u7d20\u200b\u5c06\u200b\u6709\u5e8f\u200b\u8868\u200b\u5206\u6210\u200b\u4e24\u4e2a\u200b\u90e8\u5206\u200b\uff0c\u200b\u524d\u200b\u4e00\u90e8\u5206\u200b\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b\u5747\u200b\u5c0f\u4e8e\u200b\u4e2d\u95f4\u200b\u5143\u7d20\u200b\uff0c\u200b\u800c\u540e\u200b\u4e00\u90e8\u5206\u200b\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b\u5747\u200b\u5927\u4e8e\u200b\u4e2d\u95f4\u200b\u5143\u7d20\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0ck\u200b\u4e0e\u200b\u4e2d\u95f4\u200b\u5143\u7d20\u200b\u6bd4\u8f83\u200b\u540e\u200b\uff0c\u200b\u82e5\u200bk\u200b\u5c0f\u4e8e\u200b\u4e2d\u95f4\u200b\u5143\u7d20\u200b\uff0c\u200b\u5219\u200b\u5e94\u200b\u5728\u200b\u524d\u200b\u4e00\u90e8\u5206\u200b\u4e2d\u200b\u67e5\u627e\u200b\uff0c\u200b\u5426\u5219\u200b\u5728\u200b\u540e\u200b\u4e00\u90e8\u5206\u200b\u4e2d\u200b\u67e5\u627e\u200b\u3002\u200b\u91cd\u590d\u200b\u4e0a\u8ff0\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u76f4\u81f3\u200b\u67e5\u627e\u200b\u6210\u529f\u200b\u6216\u200b\u5931\u8d25\u200b\u3002</p> <p>\u200b\u4f18\u70b9\u200b\uff1a</p> <p>\u200b\u6bd4\u8f83\u200b\u6b21\u6570\u200b\u5c11\u200b\uff0c\u200b\u5e73\u5747\u200b\u6027\u80fd\u200b\u597d\u200b\uff0c\u200b\u67e5\u627e\u200b\u901f\u5ea6\u200b\u5feb\u200b</p> <p>\u200b\u7f3a\u70b9\u200b\uff1a</p> <p>\u200b\u8981\u6c42\u200b\u5f85\u67e5\u200b\u8868\u4e3a\u200b\u6709\u5e8f\u200b\u8868\u200b\u3002\u200b\u56e0\u6b64\u200b\u6298\u534a\u200b\u67e5\u627e\u200b\u7b97\u6cd5\u200b\u9002\u7528\u200b\u4e8e\u200b\u4e0d\u200b\u7ecf\u5e38\u200b\u53d8\u52a8\u200b\u800c\u200b\u67e5\u627e\u200b\u9891\u7e41\u200b\u7684\u200b\u6709\u5e8f\u200b\u8868\u200b</p> <p>\u200b\u6298\u534a\u200b\u67e5\u627e\u200b\u8fc7\u7a0b\u200b\u53ef\u7528\u200b\u4e00\u4e2a\u200b\u79f0\u4e3a\u200b\u5224\u5b9a\u200b\u6811\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u5224\u5b9a\u200b\u6811\u4e2d\u200b\u6bcf\u200b\u4e00\u200b\u7ed3\u70b9\u200b\u5bf9\u5e94\u200b\u8868\u4e2d\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\uff0c\u200b\u4f46\u200b\u7ed3\u70b9\u200b\u7684\u200b\u503c\u200b\u4e0d\u662f\u200b\u5173\u952e\u5b57\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u800c\u662f\u200b\u5143\u7d20\u200b\u5728\u200b\u8868\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002\u200b\u6839\u200b\u7ed3\u70b9\u200b\u5bf9\u5e94\u200b\u5f53\u524d\u200b\u533a\u95f4\u200b\u7684\u200b\u4e2d\u95f4\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u5de6\u5b50\u200b\u6811\u200b\u5bf9\u5e94\u200b\u524d\u200b\u534a\u5b50\u200b\u8868\u200b\uff0c\u200b\u53f3\u5b50\u200b\u6811\u200b\u5bf9\u5e94\u200b\u540e\u200b\u534a\u5b50\u200b\u8868\u200b\u3002</p>"},{"location":"Algorithm/2-%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid searchbin(int n[],int k,int low,int high) {\n    if (low &gt; high) {\n        return;\n    }\n    else {\n        int mid = (low + high) / 2;\n        if (n[mid]==k) cout &lt;&lt; k &lt;&lt; \"\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u662f\u200b\" &lt;&lt; mid+1 &lt;&lt; endl;\n        else if (n[mid] &gt; k) searchbin( n, k, low, mid);\n        else searchbin(n, k, mid, high);\n    }\n}\nvoid main() {\n    int Num[9] = { 3,10,15,19,25,28,40,55,83 };\n    int low=0, high=9;\n    int k = 25;\n    searchbin(Num, k, low, high);\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/3-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE/","title":"\u6590\u6ce2\u200b\u90a3\u5951\u200b\u67e5\u627e","text":"<p>\u200b\u6590\u6ce2\u200b\u90a3\u5951\u200b\u67e5\u627e\u200b\u4e5f\u200b\u662f\u200b\u5bf9\u200b\u6709\u5e8f\u200b\u8868\u200b\u8fdb\u884c\u200b\u67e5\u627e\u200b\u3002\u200b\u4e0e\u200b\u6298\u534a\u200b\u67e5\u627e\u200b\u9009\u62e9\u200b\u4e2d\u95f4\u200b\u5143\u7d20\u200b\u7684\u200b\u65b9\u6cd5\u200b\u4e0d\u540c\u200b\uff0c\u200b\u6590\u6ce2\u200b\u90a3\u5951\u200b\u67e5\u627e\u200b\u662f\u200b\u6839\u636e\u200b\u6590\u6ce2\u200b\u90a3\u5951\u200b\u5e8f\u5217\u200b\u5bf9\u8868\u200b\u8fdb\u884c\u200b\u5206\u5272\u200b\u3002</p> <p>\u200b\u6590\u6ce2\u200b\u90a3\u5951\u200b\u5e8f\u5217\u200b\uff1a0,1,12,3,5,8,13,21,............</p> <p>F[i]=f[i-1]+f[i-2];</p> <p>\u200b\u5177\u4f53\u200b\u8bf7\u200b\u53c2\u8003\u200b: http://blog.csdn.net/yunzhongguwu005/article/details/9341761</p>"},{"location":"Algorithm/3-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint searchfib(int n[], int value, int num) {\n    //\u200b\u5c06\u200b\u751f\u6210\u200b\u7684\u200b\u6590\u6ce2\u200b\u90a3\u5951\u200b\u6570\u5217\u200b\u5b58\u5165\u200b\u6570\u7ec4\u200b\n    int fib[20];\n    fib[0] = 0;\n    fib[1] = 1;\n    for (int i = 0; i &lt; 20; i++) {\n        fib[i + 2] = fib[i + 1] + fib[i];\n    }\n    //\u200b\u83b7\u53d6\u200b\u6590\u6ce2\u200b\u90a3\u200b\u5951\u6570\u200b\u7684\u200b\u4e0b\u6807\u200b\n    int k = 0;\n    while (num &gt; fib[k] - 1) {\n        k++;\n    }\n    //\u200b\u5c06\u200b\u539f\u200b\u6570\u7ec4\u200b\u5b58\u5165\u200b\u65b0\u200b\u6570\u7ec4\u200b\uff0c\u200b\u591a\u51fa\u200b\u90e8\u5206\u200b\u5168\u90e8\u200b\u7528\u539f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u5b58\u50a8\u200b\n    int *temp,flag;\n    flag= fib[k] - 1;\n    temp = new int[flag];\n    for (int i = 0; i &lt; num; i++) {\n        *(temp + i) = n[i];\n    }\n    for (int i = num; i &lt; fib[k] - 1; i++) {\n        *(temp + i) = n[num - 1];\n    }\n    int mid = 0;\n    int low = 0;\n    int high = num - 1;\n    while (low &lt;= high) {\n        mid = low + fib[k - 1] - 1;\n        if (temp[mid] &lt; value) {\n            low = mid + 1;\n            k -= 2;\n        }\n        else if (temp[mid] &gt; value) {\n            high = mid - 1;\n            k -= 1;\n        }\n        else {\n            if (mid &lt; num) {\n                return mid + 1;\n            }\n            else {\n                return num;\n            }\n\n\n        }\n    }\n    delete[]temp;\n}\nvoid main() {\n    int num[12] = { 1,3,5,7,9,11,24,26,77,68,83,99 };\n    int key = 1;\n    int index=searchfib(num, key, 12);\n    cout &lt;&lt; key &lt;&lt; \"\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u662f\u200b\" &lt;&lt; index &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/4-%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE/","title":"\u63d2\u503c\u200b\u67e5\u627e","text":"<p>\u200b\u63d2\u503c\u200b\u67e5\u627e\u200b\u662f\u200b\u6839\u636e\u200b\u6570\u636e\u200b\u7684\u200b\u5b9e\u9645\u200b\u5206\u5e03\u200b\u60c5\u51b5\u200b\u8ba1\u7b97\u200b\u53ef\u80fd\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u9002\u5408\u200b\u4e8e\u200b\u6570\u636e\u5206\u5e03\u200b\u5747\u5300\u200b\u7684\u200b\u60c5\u51b5\u200b\u3002\u200b\u5f53\u200b\u9884\u671f\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\u503c\u4e3a\u200b\u5747\u5300\u5206\u5e03\u200b\u65f6\u200b\uff0c\u200b\u63d2\u503c\u200b\u67e5\u627e\u200b\u6bd4\u200b\u6298\u534a\u200b\u67e5\u627e\u200b\u66f4\u200b\u6709\u6548\u7387\u200b\uff1b\u200b\u5426\u5219\u200b\u63d2\u503c\u200b\u67e5\u627e\u200b\u7684\u200b\u6548\u7387\u200b\u4f1a\u200b\u5f88\u200b\u5dee\u200b\u3002</p> <p>\u200b\u8bb0\u4f4f\u200bmid\u200b\u7684\u200b\u6c42\u89e3\u200b\u516c\u5f0f\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\uff0c\u200b\u8fd9\u200b\u5f88\u200b\u7b80\u5355\u200b\u3002</p>"},{"location":"Algorithm/4-%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint SearchInter(int num[],int key,int number) {\n    int low = 0, high = number - 1, mid;\n    while (low &lt;= high) {\n        mid = (key - num[low])*(high - low) / (num[high] - num[low]);\n        if (num[mid] == key) return mid+1;\n        else if (num[mid] &gt; key) high = mid - 1;\n        else low = mid + 1;\n    }\n    return -1;\n}\nvoid main() {\n    int num[12] = { 1,3,5,7,9,11,13,15,17,19,21,23 };\n    int key = 11;\n    int index = SearchInter(num, key, 12);\n    cout &lt;&lt; key &lt;&lt; \"\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u662f\u200b\" &lt;&lt; index &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/5-%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","title":"\u76f4\u63a5\u200b\u63d2\u5165\u6392\u5e8f","text":"<p>\u200b\u63d2\u5165\u6392\u5e8f\u200b\u7684\u200b\u4e3b\u8981\u200b\u601d\u60f3\u200b\u662f\u200b\uff1a\u200b\u5c06\u200b\u7b2c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u770b\u505a\u200b\u6709\u5e8f\u200b\uff0c\u200b\u4ece\u200b\u7b2c\u4e8c\u4e2a\u200b\u5143\u7d20\u200b\u8d77\u200b\u5c06\u200b\u5f85\u200b\u6392\u5e8f\u200b\u7684\u200b\u5143\u7d20\u200b\u63d2\u5165\u200b\u5230\u200b\u6709\u5e8f\u200b\u7684\u200b\u5e8f\u5217\u200b\u4e2d\u200b\uff0c\u200b\u4f7f\u200b\u6709\u5e8f\u200b\u7684\u200b\u5e8f\u5217\u200b\u9010\u6e10\u200b\u6269\u5927\u200b\uff0c\u200b\u76f4\u5230\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\u90fd\u200b\u63d2\u5165\u200b\u5230\u200b\u6709\u5e8f\u200b\u5e8f\u5217\u200b\u4e2d\u200b\u3002</p>"},{"location":"Algorithm/5-%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid insertSort(int num[],int n) {\n    int temp,j;   //\u200b\u4e34\u65f6\u200b\u53d8\u91cf\u200b\n    for (int i = 1; i &lt; n; i++) {\n        temp = num[i]; j = i - 1;\n        while (j &gt;= 0 &amp;&amp; temp &lt; num[j]) {\n            num[j + 1] = num[j];\n            j--;\n        }\n        num[j + 1] = temp;\n    }\n}\nvoid main(){\n    int num[12] = { 10,6,2,33,15,12,23,76,1,54,22,9 };\n    insertSort(num, 12);\n    for (auto x : num) {\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/5-%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_3","title":"\u4f18\u5316","text":"<pre><code>void insertSort2(int num[], int n) {\n    int temp,j;\n    for (int i = 1; i &lt; n; i++) {\n        temp = num[i]; j = i - 1;\n        while (temp &lt; num[j]) {\n            num[j + 1] = num[j];\n            j--;\n        }\n        num[j + 1] = temp;\n    }\n}\n</code></pre>"},{"location":"Algorithm/6-%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","title":"\u6298\u534a\u200b\u63d2\u5165\u6392\u5e8f","text":"<p>\u200b\u76f4\u63a5\u200b\u63d2\u5165\u6392\u5e8f\u200b\u7684\u200b\u6539\u8fdb\u200b\u3002  \u200b\u6bd4\u8f83\u200b\u6b21\u6570\u200b\u51cf\u5c11\u200b\uff0c\u200b\u79fb\u52a8\u200b\u6b21\u6570\u200b\u589e\u52a0\u200b\uff0c\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e0d\u53d8\u200b\u3002</p>"},{"location":"Algorithm/6-%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nvoid BinSort(int num[],int n) {\n    int low, high,temp,mid;\n    for (int i = 0; i &lt; n; i++) {\n        low = 0;\n        temp = num[i];\n        high = i - 1;\n        while (low &lt;= high) {\n            mid = (low + high) / 2;\n            if (temp &lt; num[mid]) high = mid - 1;\n            else low = mid + 1;\n        }\n        for (int j = i - 1; j &gt;= high + 1; j--) {\n            num[j + 1] = num[j];\n        }\n        num[high + 1] = temp;\n    }\n}\nvoid main(){\n    int num[12] = { 10,6,2,33,15,12,23,76,1,54,22,9 };\n    BinSort(num, 12);\n    for (auto x : num) {\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/7-%E4%BA%8C%E8%B7%AF%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","title":"\u4e8c\u8def\u200b\u63d2\u5165\u6392\u5e8f","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid BinInsertSort(int num[],const int n) {\n    int temp[12] = {0}, finl = 0, first = 0;\n    temp[0] = num[0];\n    for (int i = 1; i &lt; n; i++) {\n        if (num[i] &gt;= temp[0]) {  //\u200b\u6bd4\u6709\u200b\u5e8f\u6570\u200b\u5927\u200b\n            int low = 0, high = finl;\n            while (low &lt;= high) {\n                int mid = (low + high) / 2;\n                if (num[i] &lt; temp[mid]) high = mid - 1;\n                else low = mid + 1;\n            }\n            for (int i = finl; i &gt;= high+1; i--) {\n                temp[i + 1] = temp[i];\n            }\n            temp[high + 1] = num[i];\n            finl++;\n        }\n        else \n        {\n            if (first == 0) \n            {\n                first = n - 1;\n                temp[first] = num[i];\n                first--;\n            }\n            else {\n                int low = first, high = n - 1;\n                while (low &lt;= high) {  \n                    int mid = (low + high) / 2;\n                    if (num[i] &lt; temp[mid]) high = mid - 1;\n                    else low = mid + 1;\n                }\n                for (int i = first; i &lt;= high; i++) {\n                    if((i-1)!=finl) temp[i - 1] = temp[i];  //first\u200b\u4e0d\u80fd\u200b\u8d85\u591a\u200bfinl\uff0c\u200b\u4e0d\u7136\u200bfinl\u200b\u7684\u200b\u503c\u4f1a\u200b\u88ab\u200b\u66ff\u6362\u200b\u6389\u200b\n                }\n                temp[high] = num[i];\n                first--;\n            }\n        }\n        for (int i = 0; i &lt; n; i++) {\n            cout &lt;&lt; temp[i] &lt;&lt; \"    \";\n        }\n        cout &lt;&lt; endl;\n    }\n    for (int i = 0; i &lt; n; i++) {\n        num[i] = temp[(i + first+1) % n];\n    }\n}\nvoid main(){\n    int num[12] = { 10,6,2,33,15,12,23,76,1,54,22,9 };\n    BinInsertSort(num, 12);\n    for (auto x : num) {\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/8-%E8%A1%A8%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","title":"\u8868\u200b\u63d2\u5165\u6392\u5e8f","text":""},{"location":"Algorithm/8-%E8%A1%A8%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#define LISTSIZE 13\ntypedef struct {\n    int value;\n    int next;\n}LinkedList;\n\nvoid initList(LinkedList list[],int num[],int count) {  //\u200b\u521d\u59cb\u5316\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\n    list[0].value = INT32_MAX;\n    list[0].next = 1;\n    for (int i = 0; i &lt; count; i++) {  //\u200b\u6570\u7ec4\u200b\u7684\u200b\u5143\u7d20\u200b\u6309\u200b\u987a\u5e8f\u200b\u5b58\u5165\u200blist\u200b\u6570\u7ec4\u200b1-13\u200b\u4f4d\u7f6e\u200b\uff0cnext\u200b\u5168\u4e3a\u200b0\n        list[i + 1].value = num[i];\n        list[i + 1].next = 0;\n    }\n}\nvoid sortList(LinkedList list[]) {  //\u200b\u6839\u636e\u200b\u6570\u7ec4\u200b\u6570\u636e\u200b\u5bf9\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\n    int pre, num;   //list\u200b\u6570\u7ec4\u200b1\u200b\u548c\u200b1\u200b\u4f4d\u7f6e\u200b\u672a\u200b\u6709\u5e8f\u200b\u5e8f\u5217\u200b\u7684\u200b\u5faa\u73af\u200b\u5217\u8868\u200b\uff0c\u200b\u5c06\u200b\u4f59\u4e0b\u200b\u5143\u7d20\u200b\u63d2\u5165\u200b\n    for (int i = 2; i &lt; LISTSIZE; i++) {\n        num=pre = 0;\n        while (list[i].value&lt;list[num].value) //\u200b\u6bcf\u6b21\u200b\u90fd\u200b\u4e0e\u200b\u5148\u4e8e\u200b\u9884\u8bbe\u200b\u7684\u200b\u6700\u5927\u503c\u200b\u6bd4\u8f83\u200b\n        {\n            pre = num;\n            num = list[num].next;\n            if (num == 0) {//\u200b\u9632\u6b62\u200blist[i].value\u200b\u6bd4\u200b\u524d\u9762\u200b\u7684\u200b\u6570\u5b57\u200b\u90fd\u200b\u5c0f\u200b\u800c\u200b\u8fdb\u5165\u200b\u6b7b\u5faa\u73af\u200b\n                break;\n            }\n        }\n        list[i].next = list[pre].next;\n        list[pre].next = i;\n    }\n    //\u200b\u6392\u5e8f\u200b\u4e4b\u540e\u200blist\u200b\u6570\u7ec4\u200b\u5e94\u8be5\u200b\u662f\u200b\u964d\u5e8f\u200b\u7684\u200b\n}\nvoid result(LinkedList list[], int num[],int n) {  //\u200b\u5c06\u200b\u5df2\u200b\u6392\u5e8f\u200b\u7684\u200b\u7ed3\u679c\u200b\u8d4b\u7ed9\u200b\u6570\u7ec4\u200b\n    int j = list[0].next;\n    for (int i = n - 1; i &gt;= 0; i--) {  //\u200b\u5c06\u200b\u5143\u7d20\u200b\u6309\u7167\u200b\u5347\u5e8f\u200b\u5e8f\u5217\u200b\u5b58\u5165\u200b\u6570\u7ec4\u200b\u4e2d\u200b\n        num[i] = list[j].value;\n        j = list[j].next;\n    }\n}\nvoid main(){\n    int num[12] = { 10,6,2,33,15,12,23,76,1,54,22,9 };\n    LinkedList list[LISTSIZE];\n    initList(list, num, 12);\n    sortList(list);\n    result(list, num, 12);\n    for (auto x : num) {\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/9-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/","title":"\u5e0c\u5c14\u200b\u6392\u5e8f","text":"<p>\u200b\u57fa\u672c\u200b\u601d\u60f3\u200b\u662f\u200b\uff1a\u200b\u5c06\u200b\u5f85\u200b\u6392\u5e8f\u200b\u7684\u200b\u8bb0\u5f55\u200b\u5212\u5206\u200b\u6210\u200b\u51e0\u7ec4\u200b\uff0c\u200b\u4ece\u800c\u200b\u51cf\u5c11\u200b\u53c2\u4e0e\u200b\u76f4\u63a5\u200b\u63d2\u5165\u6392\u5e8f\u200b\u7684\u200b\u6570\u636e\u91cf\u200b\uff0c\u200b\u5f53\u200b\u7ecf\u8fc7\u200b\u51e0\u6b21\u200b\u5206\u7ec4\u200b\u6392\u5e8f\u200b\u540e\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u7684\u200b\u6392\u5e8f\u200b\u5df2\u7ecf\u200b\u57fa\u672c\u200b\u6709\u5e8f\u200b\uff0c\u200b\u518d\u200b\u5bf9\u200b\u6240\u6709\u200b\u7684\u200b\u8bb0\u5f55\u200b\u5b9e\u65bd\u200b\u6700\u540e\u200b\u7684\u200b\u76f4\u63a5\u200b\u63d2\u5165\u6392\u5e8f\u200b\u3002</p> <p>\u200b\u5e0c\u5c14\u200b\u5bf9\u200b\u8bb0\u5f55\u200b\u7684\u200b\u5206\u7ec4\u200b\uff0c\u200b\u4e0d\u662f\u200b\u5c06\u200b\u76f8\u90bb\u200b\u8bb0\u5f55\u200b\u5206\u4e3a\u200b\u4e00\u7ec4\u200b\uff0c\u200b\u800c\u662f\u200b\u5c06\u200b\u76f8\u9694\u200b\u4e00\u5b9a\u200b\u8ddd\u79bb\u200b\u7684\u200b\u8bb0\u5f55\u200b\u5206\u4e3a\u200b\u4e00\u7ec4\u200b\u3002</p> <p>\u200b\u5e0c\u5c14\u200b\u6392\u5e8f\u200b\u9002\u5408\u200b\u7528\u4e8e\u200b\u5f85\u200b\u6392\u5e8f\u200b\u6570\u76ee\u200b\u8f83\u5927\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u800c\u4e14\u200b\u5e0c\u5c14\u200b\u6392\u5e8f\u200b\u7684\u200b\u6027\u80fd\u200b\u4e0e\u200b\u9009\u5b9a\u200b\u589e\u91cf\u200b\u5e8f\u5217\u200b\u6709\u5173\u200b\u3002</p>"},{"location":"Algorithm/9-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid shellSort(int num[],int n) {\n    for (int d = n / 2; d &gt;= 1; d /= 2) {\n        for (int i = 0 + d; i &lt; n; i++) {\n            int tem = num[i];\n            int j = i - d;\n            while (j &gt;= 0 &amp;&amp; tem &lt; num[j]) {\n                num[j + d] = num[j];\n                j -= d;\n            }\n            num[j + d] = tem;\n        }\n    }\n}\nvoid main(){\n    int num[12] = { 10,6,2,33,15,12,23,76,1,54,22,9 };\n    shellSort(num, 12);\n    for (auto x : num) {\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    system(\"pause\");\n}\n</code></pre>"},{"location":"Algorithm/string_kmp/","title":"\u4e32\u200b\u7684\u200b\u6a21\u5f0f\u5339\u914d\u200b\uff1a\u200b\u6734\u7d20\u200b\u7684\u200b\u6a21\u5f0f\u5339\u914d\u200b\u7b97\u6cd5\u200b\uff0cKMP\u200b\u7b97\u6cd5","text":"<p>\u200b\u5b50\u4e32\u200b\u7684\u200b\u5b9a\u4f4d\u200b\u64cd\u4f5c\u200b\u901a\u5e38\u200b\u79f0\u4e3a\u200b\u4e32\u200b\u7684\u200b\u6a21\u5f0f\u5339\u914d\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b\u5404\u79cd\u200b\u4e32\u200b\u5904\u7406\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u6700\u200b\u91cd\u8981\u200b\u7684\u200b\u64cd\u4f5c\u200b\u4e4b\u4e00\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5f88\u591a\u200b\u8f6f\u4ef6\u200b\uff0c\u200b\u82e5\u6709\u200b\u201c\u200b\u7f16\u8f91\u200b\u201d\u200b\u83dc\u5355\u9879\u200b\u7684\u8bdd\u200b\uff0c\u200b\u5219\u200b\u5176\u4e2d\u200b\u5fc5\u6709\u200b\u201c\u200b\u67e5\u627e\u200b\u201d\u200b\u5b50\u200b\u83dc\u5355\u9879\u200b\u3002\u200b\u5b50\u4e32\u200b\u5b9a\u4f4d\u200b\u7b97\u6cd5\u200b\u5373\u200b\u79f0\u4e3a\u200b\u6a21\u5f0f\u5339\u914d\u200b\u7b97\u6cd5\u200b\u3002</p>"},{"location":"Algorithm/string_kmp/#_1","title":"\u6734\u7d20\u200b\u7684\u200b\u6a21\u5f0f\u5339\u914d\u200b\u7b97\u6cd5","text":"<p>\u200b\u8fd9\u79cd\u200b\u7b97\u6cd5\u200b\u5f88\u200b\u7b80\u5355\u200b\uff0c\u200b\u5c31\u662f\u200b\u5b50\u4e32\u200b\u548c\u200b\u4e3b\u4e32\u200b\u8fdb\u884c\u200b\u5bf9\u5e94\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5339\u914d\u200b\uff0c\u200b\u5982\u679c\u200b\u53d1\u751f\u200b\u5931\u914d\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4e3b\u4e32\u200b\u548c\u200b\u5b50\u4e32\u200b\u90fd\u200b\u8fdb\u884c\u200b\u56de\u6eaf\u200b\uff0c\u200b\u4e3b\u4e32\u200b\u56de\u6eaf\u5230\u200b\u5f00\u59cb\u200b\u5339\u914d\u200b\u4f4d\u7f6e\u200b\u6570\u76ee\u200b\u52a0\u4e00\u200b\uff0c\u200b\u5b50\u4e32\u200b\u56de\u6eaf\u5230\u200b\u96f6\u200b\u3002 <pre><code>void HStringIndex(HString *s,HString *t) {                \n    int i = 0,j = 0;  \n    while (i &lt; s-&gt;length &amp;&amp;j &lt; t-&gt;length) {  \n        if (s-&gt;str[i] == t-&gt;str[j]) {  \n            i++;   \n            j++;  \n        }  \n        else {  \n            i = i - j + 1;  \n            j = 0;  \n        }  \n     }  \n    if (j == t-&gt;length) {  \n        cout &lt;&lt; \"\u200b\u5b50\u4e32\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u4e3a\u200b:\" &lt;&lt; i-t-&gt;length + 1 &lt;&lt; endl;  \n    }  \n    else {  \n        cout &lt;&lt; \"\u200b\u6ca1\u6709\u200b\u8be5\u200b\u5b50\u4e32\u200b\uff01\" &lt;&lt; endl;  \n    }  \n}  \n</code></pre></p>"},{"location":"Algorithm/string_kmp/#kmp_1","title":"KMP\u200b\u7b97\u6cd5","text":"<p>\u200b\u6211\u200b\u5148\u524d\u200b\u770b\u200b\u4e86\u200b\u597d\u51e0\u7bc7\u200b\u535a\u5ba2\u200b\u8fd8\u662f\u200b\u6709\u70b9\u200b\u61f5\u200b\u3002\u200b\u6709\u4e9b\u200b\u4eba\u5199\u200b\u5f97\u200b\u592a\u200b\u590d\u6742\u200b\u4e86\u200b\uff0c\u200b\u63a8\u7406\u200b\u8fc7\u7a0b\u200b\u4e00\u5927\u5806\u200b\uff0c\u200b\u6211\u200b\u987a\u7740\u200b\u8fc7\u7a0b\u200b\u53cd\u800c\u200b\u8d8a\u7ed5\u200b\u8d8a\u6df1\u200b\uff0c\u200b\u672c\u6765\u200b\u770b\u200b\u4e1c\u897f\u200b\u5c31\u200b\u4e0d\u200b\u7ec6\u81f4\u200b\u7684\u200b\u6211\u200b\u66f4\u52a0\u200b\u4e0d\u60f3\u200b\u770b\u200b\u4e86\u200b\u3002\u200b\u5f04\u200b\u4e86\u200b\u51e0\u5929\u200b\uff0c\u200b\u6211\u200b\u4e0d\u6562\u200b\u8bf4\u200b\u5168\u90e8\u200b\uff0c\u200b\u5927\u90e8\u5206\u200b\u662f\u200b\u61c2\u200b\u4e86\u200b\u3002\u200b\u4e0b\u9762\u200b\u6211\u200b\u5c31\u200b\u4ee5\u200b\u6211\u200b\u6700\u200b\u7b80\u5355\u660e\u4e86\u200b\u7684\u200b\u65b9\u6cd5\u200b\u6765\u8bf4\u200b\u8bf4\u200b\u6211\u200b\u7684\u200b\u7406\u89e3\u200b\uff0c\u200b\u5982\u679c\u200b\u6709\u200b\u9519\u8bef\u200b\uff0c\u200b\u8fd8\u200b\u8bf7\u200b\u5927\u5bb6\u200b\u80fd\u200b\u6307\u51fa\u200b\u6765\u200b\uff0c\u200b\u5171\u540c\u8fdb\u6b65\u200b\u561b\u200b\u3002</p> <p>KMP\u200b\u7b97\u6cd5\u200b\u6700\u200b\u96be\u200b\u7406\u89e3\u200b\u7684\u200b\u5176\u5b9e\u200b\u662f\u200bnext\u200b\u6570\u7ec4\u200b\u7684\u200b\u8ba1\u7b97\u65b9\u6cd5\u200b\uff0c\u200b\u6838\u5fc3\u200b\u4e5f\u200b\u662f\u200b\u4ed6\u200b\uff0c\u200b\u5f04\u61c2\u200b\u4e86\u200bnext\u200b\u6570\u7ec4\u200b\uff0cKMP\u200b\u5c31\u200b\u57fa\u672c\u200b\u6ca1\u4ec0\u4e48\u200b\u95ee\u9898\u200b\u4e86\u200b\u3002\u200b\u6211\u200b\u770b\u5230\u200b\u5176\u5b83\u200b\u535a\u5ba2\u200b\u90fd\u200b\u662f\u4ece\u200b\u4ecb\u7ecd\u200bKMP\u200b\u7684\u200b\u7528\u6cd5\u200b\u5f00\u59cb\u200b\uff0c\u200b\u518d\u200b\u4ecb\u7ecd\u200bnext\u200b\u6570\u7ec4\u200b\u7684\u200b\u539f\u7406\u200b\u3002\u200b\u6211\u200b\u4e5f\u200b\u6309\u7167\u200b\u8fd9\u4e2a\u200b\u601d\u8def\u200b\u6765\u200b\u5199\u200b\u5427\u200b\uff0c\u200b\u4f60\u4eec\u200b\u770b\u5230\u200b\u4e5f\u597d\u200b \u200b\u7406\u89e3\u200b\u3002</p> <p>KMP\u200b\u7b97\u6cd5\u200b\u662f\u200b\u7531\u200bK\u200b\u4ec0\u4e48\u200b\uff0cP\u200b\u4ec0\u4e48\u200b\uff0cM\u200b\u4ec0\u4e48\u200b\u4e09\u4e2a\u200b\u4eba\u200b\u53d1\u660e\u200b\u7684\u200b\u4e00\u79cd\u200b\u5bf9\u200b\u6734\u7d20\u200b\u7684\u200b\u6a21\u5f0f\u5339\u914d\u200b\u7b97\u6cd5\u200b\u7684\u200b\u6539\u8fdb\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u7279\u70b9\u200b\u662f\u200b\u4e3b\u4e32\u200b\u65e0\u9700\u200b\u56de\u6eaf\u200b\u3002\u200b\u5b83\u200b\u53ea\u200b\u9700\u8981\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u6309\u7167\u200bnext\u200b\u6570\u7ec4\u200b\u5b58\u50a8\u200b\u7684\u200b\u6570\u5b57\u200b\u79fb\u52a8\u200b\uff0c\u200b\u7528\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u76f8\u5e94\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5b57\u7b26\u200b\u548c\u200b\u4e3b\u4e32\u200b\u8fdb\u884c\u200b\u6bd4\u8f83\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002\u200b\u4e3e\u4e2a\u200b\u4e66\u4e0a\u200b\u7684\u200b\u4f8b\u5b50\u200b\u628a\u200b\uff1a - \u200b\u4e3b\u4e32\u200b\uff1aacabaabaabcacaabc - \u200b\u6a21\u5f0f\u200b\u4e32\u200b\uff1aabaabc - next\u200b\u6570\u7ec4\u200b\uff1a\uff08\u200b\u8fd9\u91cc\u200b\u5b58\u50a8\u200b\u7684\u200b\u662f\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u5931\u914d\u200b\u65f6\u200b\uff0c\u200b\u4e0b\u200b\u4e00\u200b\u5339\u914d\u200b\u5b57\u7b26\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff09</p> <p></p> <p>\u200b\u4e0a\u9762\u200b\u7684\u200bnext\u200b\u6570\u7ec4\u200b\u6211\u4f1a\u200b\u5728\u200b\u4e0b\u9762\u200b\u8be6\u7ec6\u200b\u4ecb\u7ecd\u200b\u600e\u4e48\u200b\u6765\u200b\u7684\u200b\uff0c\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u81ea\u5df1\u200b\u53bb\u200b\u63a8\u200b\u3002\u200b\u73b0\u5728\u200b\u53ea\u200b\u9700\u8981\u200b\u77e5\u9053\u200b\u6709\u200b\u8fd9\u4e48\u200b\u4e2a\u200b\u4e1c\u897f\u200b\uff0c\u200b\u600e\u4e48\u200b\u5728\u200bKMP\u200b\u7b97\u6cd5\u200b\u91cc\u9762\u200b\u7528\u200b\u5b83\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002\u200b\u4e0b\u9762\u200b\u6211\u4f1a\u200b\u8d34\u200b\u51fa\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u63a8\u7406\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u4ee3\u7801\u200b\u4e00\u8d77\u200b\u770b\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5bb9\u6613\u200b\u7406\u89e3\u200b\u3002</p> <pre><code>void KMP(HString *s,HString *t) {       //s\u200b\u662f\u200b\u4e3b\u4e32\u200b\uff0ct\u200b\u662f\u200b\u6a21\u5f0f\u200b\u4e32\u200b\n    int i=0, j=1;\n    while (i &lt; s-&gt;length &amp;&amp; j &lt;= t-&gt;length) {   //\u200b\u53ea\u8981\u200bi,j\u200b\u5c0f\u4e8e\u200b\u5404\u81ea\u200b\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5b83\u4eec\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u5339\u914d\u200b\u5b8c\u200b\n        if (j == 0 || s-&gt;str[i] == t-&gt;str[j - 1]) { \n            i++; j++;       //\u200b\u5982\u679c\u200bj==0\uff0c\u200b\u8bf4\u660e\u200b\u8be5\u200b\u4f4d\u7f6e\u200b\u5b57\u7b26\u200b\u4e0e\u200b\u6a21\u5f0f\u200b\u4e32\u9996\u200b\u5b57\u7b26\u200b\u5931\u914d\u200b\uff0c\u200b\u90fd\u200b\u81ea\u589e\u200b\u4e00\u200b\u3002\n        }                       //\u200b\u7b2c\u4e8c\u4e2a\u200b\u6761\u4ef6\u200b\u6ee1\u8db3\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5bf9\u5e94\u200b\u4f4d\u7f6e\u200b\u5b57\u7b26\u200b\u76f8\u540c\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u6bd4\u8f83\u200b\u540e\u7ee7\u200b\u5b57\u7b26\u200b\n        else j = nextNum[j];            //\u200b\u5426\u5219\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u79fb\u52a8\u200b\u76f8\u5e94\u200b\u7684\u200b\u4e2a\u6570\u200b\n    }\n    if (j&gt;t-&gt;length) {          \n        cout &lt;&lt; \"\u200b\u5b50\u4e32\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u4e3a\u200b\uff1a    \" &lt;&lt; i - t-&gt;length + 1 &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u6ca1\u6709\u200b\u8be5\u200b\u5b50\u4e32\u200b\uff01\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\uff0cnextNum[]\u200b\u5c31\u662f\u200bnext\u200b\u6570\u7ec4\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u547d\u540d\u200b\u51b2\u7a81\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6ca1\u6709\u200b\u76f4\u63a5\u200b\u8d77\u200b\u3002\u200b\u5b57\u7b26\u200b\u6570\u7ec4\u200b\u662f\u4ece\u200b0\u200b\u5f00\u59cb\u200b\u7684\u200b\uff0c\u200b\u800c\u200bnextNum[ ]\u200b\u662f\u4ece\u200b1\u200b\u5f00\u59cb\u200b\u7684\u200b\uff0cnextNum[0]\u200b\u5e76\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b\u3002</p> <p></p> <p>\u200b\u77e5\u9053\u200b\u600e\u4e48\u200b\u7528\u200b\u4e86\u200b\uff0c\u200b\u6211\u4eec\u200b\u518d\u200b\u8bb2\u8bb2\u200b\u539f\u7406\u200b\u3002\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u5b57\u7b26\u200b\u7684\u200b\u6392\u5217\u200b\u6211\u4eec\u200b\u662f\u200b\u5df2\u77e5\u200b\u7684\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u4f55\u200b\u53bb\u200b\u5229\u7528\u200b\u5b83\u200b\u5462\u200b\uff1f\u200b\u5728\u200b\u8fd9\u79cd\u200b\u5177\u6709\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\u7684\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u91cc\u9762\u200b\uff0c\u200b\u6211\u4eec\u200b\u603b\u80fd\u200b\u627e\u5230\u200b\u76f8\u540c\u200b\u7684\u200b\u90e8\u5206\u200b\u3002\u200b\u6bd4\u5982\u200b\u4e0a\u200b\u56fe\u200b\u7b2c\u4e09\u200b\u8d9f\u200b\u5339\u914d\u200b\u5230\u200b\u7b2c\u56db\u200b\u8d9f\u200b\u5339\u914d\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u7684\u200b\u76f8\u540c\u200b\u90e8\u5206\u200b\u662f\u200ba b\u3002</p> <p></p> <p>\u200b\u6709\u200b\u76f8\u540c\u200b\u90e8\u5206\u200b\u518d\u200b\u8fdb\u884c\u200b\u5339\u914d\u200b\u662f\u4e0d\u662f\u200b\u6bd4\u200b\u5931\u914d\u200b\u5c31\u200b\u56de\u6eaf\u200b\u8282\u7ea6\u200b\u65f6\u95f4\u200b\u3002\u200b\u73b0\u5728\u200b\u5173\u952e\u200b\u6765\u200b\u4e86\u200b\uff0c\u200b\u6211\u4eec\u200b\u90fd\u200b\u662f\u200b\u5229\u7528\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u9884\u5148\u200b\u8ba1\u7b97\u51fa\u6765\u200b\u7684\u200bnext\u200b\u6570\u7ec4\u200b\u6765\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u90a3\u200b\u6211\u4eec\u200b\u600e\u4e48\u200b\u6765\u200b\u8ba1\u7b97\u200bnext\u200b\u6570\u7ec4\u200b\u91cc\u9762\u200b\u7684\u200b\u503c\u200b\u5462\u200b\uff1f</p> <p>\u200b\u6211\u200b\u5148\u200b\u8d34\u200b\u51fa\u200b\u4ee3\u7801\u200b\uff1a <pre><code>void Next(HString *t) {\n    int i = 1, j = 0;\n    nextNum[1] = 0;\n    while (i&lt;t-&gt;length) {\n        if (j == 0 || t-&gt;str[i - 1] == t-&gt;str[j - 1]) {\n            ++i;\n            ++j;\n            nextNum[i] = j;     \n        }\n        else {\n            j = nextNum[j]; //\u200b\u56de\u6eaf\u200b\uff0c\u200b\u5728\u200b\u65b0\u200b\u7684\u200b\u5b50\u4e32\u200b\u91cc\u9762\u200b\u67e5\u627e\u200b\u65b0\u200b\u7684\u200b\u6700\u5927\u200b\u76f8\u540c\u200b\u5b50\u4e32\u200b\n        }\n    }\n}\n</code></pre></p> <p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u7b97\u6cd5\u200b\u91cc\u9762\u200b\u6240\u200b\u6c42\u5f97\u200b\u7684\u200bnextNum\u200b\u6570\u7ec4\u200b\uff0cnextNum[1]=0,nextNum[2]=1,\u200b\u8fd9\u662f\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u3002</p> <p>\u200b\u5f88\u200b\u663e\u7136\u200b\uff0c\u200b\u5f53\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u90fd\u200b\u5931\u914d\u200b\uff0c\u200b\u6211\u200b\u4e0d\u80fd\u200b\u8ba9\u200b\u6a21\u5f0f\u200b\u4e32\u53bb\u200b\u79fb\u52a8\u200b\u4e0b\u200b\u4e00\u4f4d\u200b\uff0c\u200b\u90a3\u200b\u53ea\u80fd\u200b\u4e3b\u4e32\u200b\u5339\u914d\u200b\u4f4d\u7f6e\u200b\u81ea\u589e\u200b\u4e00\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u5339\u914d\u200b\u3002 \u200b\u5f53\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u7b2c\u4e8c\u4e2a\u200b\u5b57\u7b26\u200b\u5931\u914d\u200b\u65f6\u200b\uff0c\u200b\u90a3\u200b\u53ea\u80fd\u200b\u770b\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u80fd\u5426\u200b\u5339\u914d\u200b\uff0c\u200b\u5982\u679c\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u5339\u914d\u200b\u540e\u7ee7\u200b\u5b57\u7b26\u200b\uff1b\u200b\u4e0d\u80fd\u200b\uff0c\u200b\u90a3\u4e3b\u4e32\u200b\u5339\u914d\u200b\u4f4d\u7f6e\u200b\u81ea\u589e\u200b\u4e00\u200b\u3002</p> <p>\u200b\u6838\u5fc3\u200b\u5c31\u200b\u662f\u4ece\u200bnext\u200b\u6570\u7ec4\u200b\u7684\u200b\u7b2c\u4e09\u4f4d\u200b\u503c\u200b\u5f00\u59cb\u200b\uff0c\u200b\u503c\u5f97\u200b\u5927\u5c0f\u200b\u53d6\u51b3\u4e8e\u200b\u4e4b\u524d\u200b\u7684\u200b\u5b57\u7b26\u200b\u4ece\u200b\u9996\u5c3e\u200b\u5f00\u59cb\u200b\u7ec4\u6210\u200b\u6700\u5927\u200b\u7684\u200b\u76f8\u540c\u200b\u5b50\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\u200b\u5982\u679c\u200b\u627e\u5230\u200b\uff0c\u200b\u90a3\u4e48\u200bnext\u200b\u503c\u200b\u662f\u200b\u8be5\u200b\u957f\u5ea6\u200b\u52a0\u200b1\uff0c\u200b\u5426\u5219\u200bnext\u200b\u503c\u200b\u662f\u200b1\u3002</p> <p>\u200b\u4f8b\u5982\u200b :   </p> <p>\u200b\u6a21\u5f0f\u200b\u4e32\u200b  a  b  a  a  b  c </p> <p>nextNum[]  0  1  1  2  2  3 </p> <ul> <li>\u200b\u7b2c\u4e8c\u4e2a\u200b\u5b57\u7b26\u200b\u5931\u914d\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8fd9\u4e48\u200b\u7406\u89e3\u200b\uff0c\u200b\u5b57\u7b26\u200b\u7ec4\u5408\u200b\uff1a{0 | a}   \u200b\u6700\u5927\u200b\u76f8\u540c\u200b\u5b50\u4e32\u200b\u4e3a\u7a7a\u200b,nextNum[2]=0+1;</li> <li>\u200b\u7b2c\u4e09\u4e2a\u200b\u5b57\u7b26\u200b,  \u200b\u5b57\u7b26\u200b\u7ec4\u5408\u200b                    {0,a| b,0}.                   \u200b\u6700\u5927\u200b\u76f8\u540c\u200b\u5b50\u4e32\u200b\u4e3a\u7a7a\u200b\uff0cnextNum[3]=0+1;</li> <li>\u200b\u7b2c\u56db\u4e2a\u200b\u5b57\u7b26\u200b\uff0c\u200b\u5b57\u7b26\u200b\u7ec4\u5408\u200b              {0,a,ab | ba,a,0}.              \u200b\u6700\u5927\u200b\u76f8\u540c\u200b\u5b50\u4e32\u200b\u4e3a\u200ba\uff0c\u200b\u957f\u5ea6\u200b\u4e3a\u200b1\uff0cnextNum[4]=1+1;</li> <li>\u200b\u7b2c\u4e94\u4e2a\u200b\u5b57\u7b26\u200b\uff0c\u200b\u5b57\u7b26\u200b\u7ec4\u5408\u200b        {0,a,ab,aba | baa,aa,a,0}.       \u200b\u6700\u5927\u200b\u76f8\u540c\u200b\u5b50\u4e32\u200b\u4e3a\u200ba\uff0c\u200b\u957f\u5ea6\u200b\u4e3a\u200b1\uff0cnextNum[5]=1+1;</li> <li>\u200b\u7b2c\u516d\u4e2a\u200b\u5b57\u7b26\u200b\uff0c\u200b\u5b57\u7b26\u200b\u7ec4\u5408\u200b{0,a,ab,aba,abaa|baab,aab,ab,a,0}\u200b\u6700\u5927\u200b\u76f8\u540c\u200b\u5b50\u4e32\u200b\u4e3a\u200bab\uff0c\u200b\u957f\u5ea6\u200b\u4e3a\u200b2\uff0c   nextNum[6]=2+1; \u200b\u82b1\u200b\u62ec\u53f7\u200b\u524d\u534a\u90e8\u200b\u5206\u662f\u200b\u9664\u5c3e\u200b\u5b57\u7b26\u200b\u7684\u200b\u6240\u6709\u200b\u5b50\u4e32\u200b\u5b57\u7b26\u200b\u7ec4\u5408\u200b\uff0c\u200b\u540e\u200b\u534a\u200b\u90e8\u5206\u200b\u662f\u200b\u9664\u9996\u200b\u5b57\u7b26\u200b\u7684\u200b\u6240\u6709\u200b\u5b50\u4e32\u200b\u7ec4\u5408\u200b\u3002</li> </ul>"},{"location":"Algorithm/string_kmp/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#define max 100\nint nextNum[max];\ntypedef struct {\n    int length;\n    char *str;\n}HString;\nvoid Next(HString *t) {\n    int i = 1, j = 0;\n    nextNum[1] = 0;\n    while (i&lt;t-&gt;length) {\n        if (j == 0 || t-&gt;str[i - 1] == t-&gt;str[j - 1]) {\n            ++i;\n            ++j;\n            nextNum[i] = j;\n        }\n        else {\n            j = nextNum[j];\n        }\n    }\n}\nvoid KMP(HString *s,HString *t) {\n    int i=0, j=1;\n    while (i &lt; s-&gt;length &amp;&amp; j &lt;= t-&gt;length) {   //\u200b\u53ea\u8981\u200bi,j\u200b\u5c0f\u4e8e\u200b\u5404\u81ea\u200b\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5b83\u4eec\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u5339\u914d\u200b\u5b8c\u200b\n        if (j == 0 || s-&gt;str[i] == t-&gt;str[j - 1]) { \n            i++; j++;               //\u200b\u5982\u679c\u200bj==0\uff0c\u200b\u8bf4\u660e\u200b\u8be5\u200b\u4f4d\u7f6e\u200b\u5b57\u7b26\u200b\u4e0e\u200b\u6a21\u5f0f\u200b\u4e32\u9996\u200b\u5b57\u7b26\u200b\u5931\u914d\u200b\uff0c\u200b\u90fd\u200b\u81ea\u589e\u200b\u4e00\u200b\u3002\n        }       //\u200b\u7b2c\u4e8c\u4e2a\u200b\u6761\u4ef6\u200b\u6ee1\u8db3\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5bf9\u5e94\u200b\u4f4d\u7f6e\u200b\u5b57\u7b26\u200b\u76f8\u540c\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u6bd4\u8f83\u200b\u540e\u7ee7\u200b\u5b57\u7b26\u200b\n        else j = nextNum[j];            //\u200b\u5426\u5219\u200b\u6a21\u5f0f\u200b\u4e32\u200b\u79fb\u52a8\u200b\u76f8\u5e94\u200b\u7684\u200b\u4e2a\u6570\u200b\n    }\n    if (j&gt;t-&gt;length) {          \n        cout &lt;&lt; \"\u200b\u5b50\u4e32\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u4e3a\u200b\uff1a    \" &lt;&lt; i - t-&gt;length + 1 &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u6ca1\u6709\u200b\u8be5\u200b\u5b50\u4e32\u200b\uff01\" &lt;&lt; endl;\n    }\n}\nvoid main() {\n    HString s1,s2;\n    s1.length = 17;\n    s1.str = (char*)malloc(sizeof(char));\n    s1.str = \"acabaabaabcacaabc\";\n    s2.length = 6;\n    s2.str = (char*)malloc(sizeof(char));\n    s2.str = \"adacba\";\n    Next(&amp;s2);\n    KMP(&amp;s1, &amp;s2);\n    for (int i = 1; i &lt; 7; i++) {\n        cout &lt;&lt; nextNum[i];\n    }\n    system(\"pause\");\n}\n</code></pre>"},{"location":"BSCompiler/","title":"\u6bd5\u200b\u6607\u200bC\u200b\u7f16\u8bd1\u5668","text":"<p>\u200b\u539f\u7406\u200b\u5206\u6790\u200b</p>"},{"location":"BSCompiler/#_1","title":"\u68c0\u67e5","text":"<ul> <li>1.\u200b\u501f\u7528\u200b\u68c0\u67e5\u200b</li> </ul>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/","title":"\u501f\u7528\u200b\u68c0\u67e5","text":""},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#1-defuse","title":"1-DefUse","text":""},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#11-","title":"1.1-\u200b\u5b9a\u4e49","text":"<p>\u200b\u7c7b\u200b DefUse \u200b\u5bf9\u200b\u5355\u4e2a\u200b\u7684\u200b Stmt \u200b\u8fdb\u884c\u200b\u5206\u6790\u200b\uff0c\u200b\u5185\u90e8\u200b\u5b9a\u4e49\u200b\u4e86\u200b Defs \u200b\u548c\u200b Uses \u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\uff0c\u200b\u5206\u522b\u200b\u5b58\u50a8\u200b \u200b\u5f53\u524d\u200b\u5b9a\u4e49\u200b\u548c\u200b\u4f7f\u7528\u200b\u7684\u200b\u53d8\u91cf\u200b\u3002 <pre><code>class DefUse : public clang::StmtVisitor&lt;DefUse&gt; {\n  enum { None, Def, Use } Action;\n  llvm::SmallVector&lt;VarDecl *&gt; defs;\n  llvm::SmallVector&lt;VarDecl *&gt; uses;\npublic:\n  DefUse(Stmt *S) {\n    Action = None;\n    Visit(S);\n  }\n</code></pre></p>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#2-visit","title":"2-Visit\u200b\u51fd\u6570","text":"<p>Visit \u200b\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u9488\u5bf9\u200b\u4ee5\u4e0b\u200b\u7279\u5b9a\u200b\u7684\u200b\u51e0\u4e2a\u200b\u8bed\u53e5\u200b\u8fdb\u884c\u200b\u89e3\u6790\u200b\uff1a</p> <ul> <li>BinaryOperator</li> <li>BinAssign</li> <li>CallExpr</li> <li>DeclRefExpr</li> <li>DeclStmt</li> <li>MemberExpr</li> <li>ReturnStmt</li> <li>UnaryDeref</li> <li>UnaryOperator</li> </ul>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#binaryoperator","title":"\u4f8b\u5982\u200b\uff1a BinaryOperator","text":"<p>\u200b\u901a\u8fc7\u200b opcode \u200b\u5224\u65ad\u200b\u68c0\u67e5\u200b\uff1a</p> <ul> <li>1&gt;\u200b\u7b97\u6570\u200b\u8fd0\u7b97\u7b26\u200b<ul> <li>BO_Mul (* \u200b\u4e58\u6cd5\u200b)</li> <li>BO_Div (/ \u200b\u9664\u6cd5\u200b)</li> <li>BO_Rem (% \u200b\u53d6\u6a21\u200b)</li> <li>BO_Add (+ \u200b\u52a0\u6cd5\u200b)</li> <li>BO_Sub (- \u200b\u51cf\u6cd5\u200b)</li> <li>BO_Shl (&lt;&lt; \u200b\u5de6\u79fb\u200b)</li> <li>BO_Shr (&gt;&gt; \u200b\u53f3\u79fb\u200b)</li> </ul> </li> <li>2&gt;\u200b\u4f4d\u200b\u8fd0\u7b97\u7b26\u200b<ul> <li>BO_And (&amp; \u200b\u6309\u4f4d\u200b\u4e0e\u200b)</li> <li>BO_Xor (^ \u200b\u6309\u4f4d\u200b\u5f02\u6216\u200b)</li> <li>BO_Or (| \u200b\u6309\u4f4d\u200b\u6216\u200b)</li> <li>BO_LAnd (&amp;&amp; \u200b\u903b\u8f91\u200b\u4e0e\u200b)</li> <li>BO_LOr (|| \u200b\u903b\u8f91\u200b\u6216\u200b)</li> </ul> </li> <li>3&gt;\u200b\u5173\u7cfb\u200b\u8fd0\u7b97\u7b26\u200b<ul> <li>BO_LT (&lt; \u200b\u5c0f\u4e8e\u200b)</li> <li>BO_GT (&gt; \u200b\u5927\u4e8e\u200b)</li> <li>BO_LE (&lt;= \u200b\u5c0f\u4e8e\u200b\u7b49\u4e8e\u200b)</li> <li>BO_GE (&gt;= \u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b)</li> <li>BO_EQ (== \u200b\u7b49\u4e8e\u200b)</li> <li>BO_NE (!= \u200b\u4e0d\u200b\u7b49\u4e8e\u200b) </li> </ul> </li> <li>4&gt;\u200b\u590d\u5408\u200b\u8d4b\u503c\u200b\u8fd0\u7b97\u7b26\u200b<ul> <li>BO_MulAssign      \u200b\u4e58\u6cd5\u200b\u8d4b\u503c\u200b\uff08a *= b\uff09</li> <li>BO_DivAssign      \u200b\u9664\u6cd5\u200b\u8d4b\u503c\u200b\uff08a /= b\uff09</li> <li>BO_RemAssign      \u200b\u53d6\u6a21\u200b\u8d4b\u503c\u200b\uff08a %= b\uff09</li> <li>BO_AddAssign      \u200b\u52a0\u6cd5\u200b\u8d4b\u503c\u200b\uff08a += b\uff09</li> <li>BO_SubAssign      \u200b\u51cf\u6cd5\u200b\u8d4b\u503c\u200b\uff08a -= b\uff09</li> <li>BO_ShlAssign      \u200b\u5de6\u79fb\u200b\u8d4b\u503c\u200b\uff08a &lt;&lt;= b\uff09</li> <li>BO_ShrAssign      \u200b\u53f3\u79fb\u200b\u8d4b\u503c\u200b\uff08a &gt;&gt;= b\uff09</li> <li>BO_AndAssign      \u200b\u6309\u4f4d\u200b\u4e0e\u200b\u8d4b\u503c\u200b\uff08a &amp;= b\uff09</li> <li>BO_XorAssign      \u200b\u6309\u4f4d\u200b\u5f02\u6216\u200b\u8d4b\u503c\u200b\uff08a ^= b\uff09</li> <li>BO_OrAssign       \u200b\u6309\u4f4d\u200b\u6216\u200b\u8d4b\u503c\u200b\uff08a |= b\uff09</li> </ul> </li> </ul> <pre><code>void DefUse::VisitBinaryOperator(BinaryOperator *BO) {\n  auto Opcode = BO-&gt;getOpcode();\n  if ((Opcode &gt;= BO_Mul &amp;&amp; Opcode &lt;= BO_Shr) ||\n      (Opcode &gt;= BO_And &amp;&amp; Opcode &lt;= BO_LOr) ||\n      (Opcode &gt;= BO_LT &amp;&amp; Opcode &lt;= BO_NE)) {\n    Action = Use;\n    Visit(BO-&gt;getLHS());\n    Visit(BO-&gt;getRHS());\n  } else if (Opcode &gt;= BO_MulAssign &amp;&amp; Opcode &lt;= BO_OrAssign) {\n    Action = Def;\n    Visit(BO-&gt;getLHS());\n    Action = Use;\n    Visit(BO-&gt;getLHS());\n    Visit(BO-&gt;getRHS());\n  }\n}\n</code></pre> <p>Visit(xxx) \u200b\u5230\u200b\u6700\u7ec8\u200b\u7684\u200b DeclRefExpr \u200b\u901a\u8fc7\u200b Action \u200b\u6765\u200b\u5224\u65ad\u200b\u5b58\u5165\u200b\u76f8\u5e94\u200b\u7684\u200b\u6570\u7ec4\u200b\u4e2d\u200b <pre><code>void DefUse::VisitDeclRefExpr(DeclRefExpr *DRE) {\n  if (VarDecl *VD = dyn_cast&lt;VarDecl&gt;(DRE-&gt;getDecl())) {\n    if (Action == Def) {\n      defs.push_back(VD);\n    } else if (Action == Use) {\n      uses.push_back(VD);\n    }\n  }\n}\n</code></pre></p>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#2-liveness","title":"2-Liveness","text":"<p>\u200b\u7c7b\u200b Liveness \u200b\u8ba1\u7b97\u200b\u6bcf\u4e2a\u200b\u7a0b\u5e8f\u200b\u70b9\u4e0a\u200b\u7684\u200b\u6d3b\u8dc3\u200b\u53d8\u91cf\u200b\u96c6\u5408\u200b <pre><code>using LivenessFact = llvm::DenseSet&lt;VarDecl *&gt;;\nllvm::DenseMap&lt;const CFGBlock *, LivenessFact&gt; liveness; //\n</code></pre> liveness \u200b\u7528\u4e8e\u200b\u4fdd\u5b58\u200b\u57fa\u672c\u5757\u200b\u7684\u200b\u6240\u6709\u200b\u6d3b\u8dc3\u200b\u53d8\u91cf\u200b\u96c6\u5408\u200b\u3002</p> <p>compute \u200b\u51fd\u6570\u200b\u8fed\u4ee3\u200b\u8ba1\u7b97\u200b\u8fbe\u5230\u200b\u4e0d\u52a8\u70b9\u200b\u505c\u6b62\u200b <pre><code>bool SetFrom(LivenessFact &amp;Dest, const LivenessFact &amp;Src) {\n    if (Src.empty())\n      return false;\n\n    unsigned old = Dest.size();\n    Dest.insert(Src.begin(), Src.end());\n    return old != Dest.size();\n}\n\nvoid Liveness::Compute() {\n  llvm::DenseSet&lt;VarDecl *&gt; fact;\n\n  bool changed = true;\n  while (changed) {\n    changed = false;\n    //\u200b\u81ea\u200b\u5e95\u5411\u4e0a\u200b\n    for (const CFGBlock *B : env.cfg.const_nodes()) {\n        fact.clear();\n\n        for (auto succ : B-&gt;succs()) { // \u200b\u5c06\u200b\u6240\u6709\u200b\u540e\u7ee7\u200b block \u200b\u4e2d\u200b\u7684\u200b\u6d3b\u8dc3\u200b\u53d8\u91cf\u200b\u5b58\u5165\u200b\u5f53\u524d\u200b\u7684\u200b\u96c6\u5408\u200b\u4e2d\u200b\n            if (succ)\n            SetFrom(fact, liveness[succ]);\n        }\n        for (CFGBlock::const_reverse_iterator it = Block-&gt;rbegin(),ei = Block-&gt;rend(); it != ei; ++it) {\n            if (elem.getAs&lt;CFGStmt&gt;()) {\n                S = elem.castAs&lt;CFGStmt&gt;().getStmt();\n                // Get the def-use information of a given statement.\n                DefUse DU(const_cast&lt;Stmt *&gt;(S));\n                const llvm::SmallVector&lt;VarDecl *&gt; &amp;defs = DU.getDefs();\n                const llvm::SmallVector&lt;VarDecl *&gt; &amp;uses = DU.getUses();\n\n                // Anything we write to is no longer live.\n                for (VarDecl *def : defs) {\n                    fact.erase(def);\n                }\n\n                // Any variables we read from, we make live.\n                for (VarDecl *use : uses) {\n                    fact.insert(uses);\n                }\n            }\n        }\n        changed |= SetFrom(liveness[B], fact); // \u200b\u8fbe\u5230\u200b\u4e0d\u52a8\u70b9\u200b\u7684\u200b\u6761\u4ef6\u200b\n    }\n  }\n}\n</code></pre></p>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#3-","title":"3-\u200b\u5176\u4ed6\u200b\u5b9a\u4e49","text":""},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#31-class-regionname","title":"3.1-class RegionName","text":"<p>\u200b\u200b\u200b\u533a\u57df\u200b\u7684\u200b\u540d\u79f0\u200b\u3002\u200b\u6bcf\u4e2a\u200b RegionName \u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200b AST\uff08\u200b\u62bd\u8c61\u200b\u8bed\u6cd5\u200b\u6811\u200b\uff09\u200b\u8282\u70b9\u200b\u3002\u200b\u200b</p> <p>\u200b\u200b\u200b\u6bcf\u4e2a\u200b\u7ed1\u5b9a\u200b\u533a\u57df\u200b\uff08bound region\uff09\u200b\u7684\u200b\u540d\u79f0\u200b\u4e3a\u200b 'region \u200b\u52a0\u4e0a\u200b\u4e00\u4e2a\u200b\u6b63\u6574\u6570\u200b\uff0c\u200b\u4f8b\u5982\u200b 'region_0\u3001'region_1 \u200b\u7b49\u200b\u3002\u200b\u7ed1\u5b9a\u200b\u533a\u57df\u200b\u4e0e\u200b\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b\u53d8\u91cf\u200b\u6216\u200b\u501f\u7528\u200b\uff08borrow\uff09/\u200b\u91cd\u65b0\u200b\u501f\u7528\u200b\uff08reborrow\uff09\u200b\u8868\u8fbe\u5f0f\u200b\u76f8\u5173\u200b\u3002\u200b\u200b</p> <p>\u200b\u200b\u200b\u81ea\u7531\u200b\u533a\u57df\u200b\uff08free region\uff09\u200b\u7684\u200b\u540d\u79f0\u200b\u4e3a\u200b 'region_r\u3002\u200b\u81ea\u7531\u200b\u533a\u57df\u200b\u4e0e\u200b\u51fd\u6570\u200b\u7684\u200b\u8fd4\u56de\u200b\u70b9\u200b\u6216\u200b\u8c03\u7528\u8005\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u76f8\u5173\u200b\u3002 <pre><code>class RegionName {\npublic:\n  std::string Name;\n  constexpr static const char *const NamePrefix = \"'region_\";\n  static unsigned Cnt;\n</code></pre></p>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#32-class-regionvariable","title":"3.2-class RegionVariable","text":"<p>\u200b\u4e00\u79cd\u200b\u7d22\u5f15\u200b\u673a\u5236\u200b\uff0c\u200b\u65e8\u5728\u200b\u7b80\u5316\u200b\u8ba1\u7b97\u200b\u548c\u200b\u7ba1\u7406\u200b\u3002\u200b\u6bcf\u4e2a\u200bRegionName\u200b\u4e0e\u200b\u4e00\u4e2a\u200bRegionVariable\u200b\u76f8\u5173\u8054\u200b\uff0c\u200b\u5e76\u4e14\u200bRegionVariable\u200b\u7684\u200b\u7d22\u5f15\u200b\u4ece\u200b0\u200b\u5f00\u59cb\u200b\u9012\u589e\u200b\u3002 <pre><code>struct RegionVariable {\n  unsigned index;\n</code></pre></p>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#33-class-vardefinition","title":"3.3-class VarDefinition","text":"<p>\u200b\u8868\u793a\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u67d0\u4e2a\u200b\u533a\u57df\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u533a\u57df\u200b\u53d8\u91cf\u200b\u901a\u5e38\u200b\u4e0e\u200b\u4e00\u4e2a\u200b\u5177\u4f53\u200b\u7684\u200b\u53d8\u91cf\u200b\u58f0\u660e\u200b\uff08VarDecl\uff09\u200b\u6216\u200b\u4e00\u4e2a\u200b\u663e\u5f0f\u200b/\u200b\u9690\u5f0f\u200b\u7684\u200b\u501f\u7528\u200b\u8868\u8fbe\u5f0f\u200b\u76f8\u5173\u8054\u200b\u3002 <pre><code>struct VarDefinition {\n  RegionName name;\n\n  /// The current value of this region name. This is adjusted during region\n  /// check by calls to `AddLivePoint`, and then finally adjusted further by\n  /// the call to `Solve`.\n  Region value;\n\n  /// Capped region names should no longer have to grow as a result of\n  /// inference. If they do wind up growing, we will report an error.\n  bool capped; //\u200b\u6307\u793a\u200b\u4e00\u4e2a\u200b\u533a\u57df\u200b\u53d8\u91cf\u200b\u662f\u5426\u200b\u5df2\u7ecf\u200b\u88ab\u200b\u201c\u200b\u5c01\u9876\u200b\u201d\u3002\u200b\u4e00\u65e6\u200b\u5c01\u9876\u200b\uff0c\u200b\u8be5\u200b\u533a\u57df\u200b\u53d8\u91cf\u200b\u7684\u200b\u6d3b\u8dc3\u200b\u70b9\u200b\u96c6\u5408\u200b\u5c06\u200b\u4e0d\u518d\u200b\u6269\u5c55\u200b\uff0c\u200b\u5373\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u5728\u200b\u540e\u7eed\u200b\u7684\u200b\u5206\u6790\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u6d3b\u8dc3\u200b\u70b9\u200b\u3002\n\n};\n</code></pre></p>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#34-class-point","title":"3.4- class Point","text":"<p>\u200b\u67d0\u4e2a\u200b\u57fa\u672c\u5757\u200b\u5185\u200b\u7684\u200b\u5177\u4f53\u200b\u8282\u70b9\u200b\uff08\u200b\u8bed\u53e5\u200b\u6216\u200b\u6307\u4ee4\u200b\uff09 <pre><code>struct Point {\n  unsigned blockID;\n  unsigned index; // \u200b\u5f53\u524d\u200b\u57fa\u672c\u5757\u200b\u4e2d\u200b\u8282\u70b9\u200b\uff08\u200b\u8bed\u53e5\u200b\u6216\u200b\u6307\u4ee4\u200b\uff09\u200b\u7684\u200b\u7d22\u5f15\u200b\u4f4d\u7f6e\u200b\u3002\n\n  /// \u200b\u8868\u793a\u200b\u81ea\u7531\u200b\u533a\u57df\u200b 'region_r \u200b\u7684\u200b\u7ed3\u675f\u200b\u5757\u200b\u7684\u200b\u6807\u8bc6\u7b26\u200b\n  static const unsigned EndBlockID = -1u;\n  static const unsigned EndIndex = -1u;\n</code></pre></p>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#35-class-region","title":"3.5- class Region","text":"<p>\u200b\u63cf\u8ff0\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u200b\u200b\u200b\u533a\u57df\u200b\u53d8\u91cf\u200b\uff08region variable\uff09\u200b\u7684\u200b\u4f5c\u7528\u57df\u200b\u8303\u56f4\u200b\u200b\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u4f5c\u7528\u57df\u200b\u7531\u200b\u200b\u200b\u200b\u63a7\u5236\u6d41\u200b\u56fe\u200b\uff08Control Flow Graph, CFG\uff09\u200b\u4e2d\u200b\u7684\u200b\u4e00\u7ec4\u200b\u70b9\u200b\uff08points\uff09\u200b\u7ec4\u6210\u200b\u3002 <pre><code>struct Region {\n  std::set&lt;Point&gt; points;\n</code></pre></p>"},{"location":"BSCompiler/1-%E5%80%9F%E7%94%A8%E6%A3%80%E6%9F%A5/#36-class-constraint","title":"3.6- class Constraint","text":"<p>Constraint \u200b\u8868\u793a\u200b\u4e00\u4e2a\u200b\u200b\u200b\u200b\u751f\u547d\u5468\u671f\u200b\u7ea6\u675f\u200b\u200b\u200b\uff0c\u200b\u5373\u200b\uff1a</p> <p>\u200b\u200bsub\uff08\u200b\u5b50\u200b\u533a\u57df\u200b\u53d8\u91cf\u200b\uff09\u200b\u200b \u200b\u5fc5\u987b\u200b\u6bd4\u200b \u200b\u200bsup\uff08\u200b\u7236\u200b\u533a\u57df\u200b\u53d8\u91cf\u200b\uff09\u200b\u200b \u200b\u5b58\u6d3b\u200b\u66f4\u4e45\u200b\uff08\u200b\u5373\u200b sub \u200b\u200boutlives\u200b\u200b sup\uff09\u3002</p> <p>\u200b\u8fd9\u4e2a\u200b\u7ea6\u675f\u200b\u5728\u200b \u200b\u200b\u200b\u63a7\u5236\u6d41\u200b\u56fe\u200b\uff08CFG\uff09\u200b\u4e2d\u200b\u7684\u200b\u67d0\u4e2a\u200b\u7279\u5b9a\u200b\u70b9\u200b\uff08point\uff09\u200b\u200b \u200b\u6210\u7acb\u200b\u3002 <pre><code>struct Constraint {\n  RegionVariable sub;\n  RegionVariable sup;\n  Point point;\n</code></pre></p>"},{"location":"ComputerGraphics/","title":"\u76ee\u5f55","text":""},{"location":"ComputerGraphics/#marching-cube","title":"Marching Cube","text":""},{"location":"ComputerGraphics/MarchingCube/","title":"Marching Cube","text":""},{"location":"DataStruct/","title":"\u6570\u636e\u7ed3\u6784\u200b\u4e0e\u200b\u7b97\u6cd5\u200b \uff082016-2017\u200b\u5e74\u200b\u6587\u7ae0\u200b\u7684\u200b\u8fc1\u79fb\u200b\uff09","text":"<p>\u200b\u8fd9\u200b\u662f\u200b\u6211\u200b\u5927\u5b66\u672c\u79d1\u200b\u671f\u95f4\u200b\u5199\u5f97\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5927\u591a\u200b\u662f\u200b\u8bfe\u672c\u4e0a\u200b\u6458\u6284\u200b\u7684\u200b\uff0c\u200b\u8fc1\u79fb\u200b\u5230\u200bGithub\u200b\u4e0a\u200b\uff0c\u200b\u91cd\u6e29\u200b\u81ea\u5df1\u200b\u5f53\u521d\u200b\u5728\u200b\u5bb6\u7528\u7535\u8111\u200b\u5199\u200b\u6570\u636e\u7ed3\u6784\u200b\u4e0e\u200b\u7b97\u6cd5\u200b\u7684\u200b\u65f6\u5149\u200b\u3002</p>"},{"location":"DataStruct/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u200b\u6570\u636e\u7ed3\u6784\u200b\u662f\u200b\u4ec0\u4e48\u200b</li> <li>\u200b\u7b97\u6cd5\u200b</li> <li>\u200b\u7ebf\u6027\u8868\u200b-\u200b\u987a\u5e8f\u200b\u8868\u200b</li> <li>\u200b\u7ebf\u6027\u8868\u200b-\u200b\u94fe\u8868\u200b</li> <li>\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b</li> <li>\u200b\u53cc\u5411\u200b\u94fe\u8868\u200b</li> <li>\u200b\u9759\u6001\u200b\u94fe\u8868\u200b</li> <li>\u200b\u6808\u200b</li> <li>\u200b\u961f\u5217\u200b</li> <li>\u200b\u4e32\u200b</li> <li>\u200b\u6570\u7ec4\u200b</li> <li>\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u538b\u7f29\u200b-\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\uff08\u200b\u8f6c\u7f6e\u200b\uff09</li> <li>\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u538b\u7f29\u200b-\u200b\u4e09\u5143\u7ec4\u200b\uff08\u200b\u76f8\u4e58\u200b\uff09</li> <li>\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u538b\u7f29\u200b-\u200b\u5341\u5b57\u200b\u94fe\u8868\u200b</li> <li>\u200b\u6811\u200b</li> <li>\u200b\u4e8c\u53c9\u6811\u200b</li> <li>\u200b\u7ebf\u7d22\u200b\u4e8c\u53c9\u6811\u200b</li> <li>\u200b\u970d\u592b\u66fc\u200b\u6811\u200b</li> </ul>"},{"location":"DataStruct/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%98%AF%E4%BB%80%E4%B9%88/","title":"\u6570\u636e\u7ed3\u6784\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>\u200b\u6570\u636e\u7ed3\u6784\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f</p> <p>\u200b\u5f53\u200b\u7528\u200b\u8ba1\u7b97\u673a\u200b\u89e3\u51b3\u200b\u4e00\u4e2a\u200b\u5b9e\u9645\u200b\u95ee\u9898\u200b\u65f6\u200b\uff0c\u200b\u9700\u8981\u200b\u7ecf\u8fc7\u200b\u5982\u4e0b\u200b\u6b65\u9aa4\u200b\uff1a - 1\uff09\u200b\u4ece\u200b\u5177\u4f53\u200b\u95ee\u9898\u200b\u62bd\u8c61\u200b\u51fa\u200b\u6570\u5b66\u6a21\u578b\u200b\uff0c - 2\uff09\u200b\u9009\u62e9\u200b\u6216\u200b\u8bbe\u8ba1\u200b\u6570\u5b66\u6a21\u578b\u200b\u7684\u200b\u7b97\u6cd5\u200b\uff0c - 3\uff09\u200b\u7f16\u5199\u7a0b\u5e8f\u200b\u5f97\u5230\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b\u3002</p> <p>\u200b\u800c\u200b\u6570\u636e\u7ed3\u6784\u200b\u662f\u200b\u4e00\u95e8\u200b\u7814\u7a76\u200b\u975e\u200b\u6570\u503c\u200b\u8ba1\u7b97\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u95ee\u9898\u200b\u4e2d\u200b\u8ba1\u7b97\u673a\u200b\u7684\u200b\u64cd\u4f5c\u200b\u5bf9\u8c61\u200b\u4ee5\u53ca\u200b\u4ed6\u4eec\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5173\u7cfb\u200b\u548c\u200b\u64cd\u4f5c\u200b\u7684\u200b\u5b66\u79d1\u200b\uff0c \u200b\u7528\u4ee5\u200b\u63cf\u8ff0\u200b\u73b0\u5b9e\u200b\u4e16\u754c\u200b\u5b9e\u4f53\u200b\u7684\u200b\u6570\u5b66\u6a21\u578b\u200b\uff08\u200b\u975e\u200b\u6570\u503c\u200b\u8ba1\u7b97\u200b\uff09\u200b\u53ca\u5176\u200b\u4e0a\u200b\u7684\u200b\u64cd\u4f5c\u200b\u5728\u200b\u8ba1\u7b97\u673a\u200b\u4e2d\u200b\u7684\u200b\u8868\u73b0\u200b\u548c\u200b\u5b9e\u73b0\u200b\u3002\u200b\u6570\u636e\u7ed3\u6784\u200b \u200b\u4e0d\u4ec5\u200b\u6d89\u53ca\u200b\u8ba1\u7b97\u673a\u786c\u4ef6\u200b\uff0c\u200b\u800c\u4e14\u200b\u548c\u200b\u8ba1\u7b97\u673a\u8f6f\u4ef6\u200b\u6709\u7740\u200b\u5bc6\u5207\u200b\u7684\u200b\u5173\u7cfb\u200b\uff0c\u200b\u65e0\u8bba\u662f\u200b\u7f16\u8bd1\u7a0b\u5e8f\u200b\u8fd8\u662f\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u90fd\u200b\u8bbe\u8ba1\u200b\u6570\u636e\u200b\u5143\u7d20\u200b \u200b\u5728\u200b\u5b58\u50a8\u200b\u5176\u4e2d\u200b\u7684\u200b\u5206\u914d\u200b\u95ee\u9898\u200b\u3002\u200b\u5728\u200b\u7814\u7a76\u200b\u4fe1\u606f\u68c0\u7d22\u200b\u65f6\u200b\u4e5f\u200b\u5fc5\u987b\u200b\u8003\u8651\u200b\u5982\u4f55\u200b\u7ec4\u7ec7\u200b\u6570\u636e\u200b\u6570\u636e\u200b\uff0c\u200b\u4ee5\u200b\u4f7f\u200b\u67e5\u627e\u200b\u548c\u200b\u5b58\u200b \u200b\u53d6\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u66f4\u200b \u200b\u4e3a\u200b\u65b9\u4fbf\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8ba4\u4e3a\u200b\u6570\u636e\u7ed3\u6784\u200b\u662f\u200b\u4ecb\u4e8e\u200b\u6570\u5b66\u200b\u3001\u200b\u8ba1\u7b97\u673a\u786c\u4ef6\u200b\u548c\u200b\u8f6f\u4ef6\u200b\u4e09\u8005\u200b\u4e4b\u95f4\u200b\u7684\u200b\u4e00\u95e8\u200b\u6838\u5fc3\u200b\u8bfe\u7a0b\u200b\u3002</p> <p>\u200b\u6570\u636e\u7ed3\u6784\u200b\u7684\u200b\u57fa\u672c\u200b\u5b9a\u4e49\u200b\uff1a - 1.\u200b\u6570\u636e\u200b:\u200b\u662f\u200b\u4fe1\u606f\u200b\u7684\u200b\u8f7d\u4f53\u200b\uff0c\u200b\u662f\u200b\u63cf\u8ff0\u200b\u5ba2\u89c2\u4e8b\u5b9e\u200b\u7684\u200b\u6570\u200b\uff0c\u200b\u5b57\u7b26\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6240\u6709\u200b\u80fd\u200b\u8f93\u5165\u200b\u5230\u200b\u8ba1\u7b97\u673a\u200b\u4e2d\u200b\u5e76\u200b\u88ab\u200b\u8ba1\u7b97\u673a\u7a0b\u5e8f\u200b\u8bc6\u522b\u200b \u200b\u548c\u200b\u5904\u7406\u200b\u7684\u200b\u7b26\u53f7\u200b\u7684\u200b\u96c6\u5408\u200b\u3002 - 2.\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\uff1a\u200b\u662f\u200b\u6570\u636e\u200b\u4e2d\u200b\u7684\u200b\u4e2a\u4f53\u200b\u662f\u200b\u6570\u636e\u200b\u7684\u200b\u4e00\u4e2a\u200b\u201c\u200b\u4e2a\u4f53\u200b\u201d\uff0c\u200b\u662f\u200b\u6570\u636e\u200b\u7684\u200b\u57fa\u672c\u200b\u5355\u4f4d\u200b\u3002\u200b\u5982\u200b\uff1a\u200b\u8003\u751f\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u68cb\u76d8\u200b\u67d0\u4e2a\u200b \u00a0 \u00a0 \u00a0\u200b\u683c\u5c40\u200b\u72b6\u6001\u200b\uff0c\u200b\u56fe\u200b\u7684\u200b\u4e00\u4e2a\u200b\u9876\u70b9\u200b\u3002 - 3.\u200b\u6570\u636e\u9879\u200b\uff1a\u200b\u662f\u200b\u7ec4\u6210\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\uff0c\u200b\u6709\u200b\u7279\u5b9a\u200b\u610f\u4e49\u200b\u7684\u200b\uff0c\u200b\u4e0d\u53ef\u5206\u5272\u200b\u7684\u200b\u6700\u5c0f\u200b\u5355\u4f4d\u200b\u3002\u200b\u5982\u200b\uff1a\u200b\u8003\u751f\u200b\u4fe1\u606f\u200b\u4e2d\u200b\u7684\u200b\u8003\u53f7\u200b\u3001\u200b\u6210\u7ee9\u200b\u3001\u200b\u7b49\u200b\u3002 - 4.\u200b\u6570\u636e\u200b\u5bf9\u8c61\u200b\uff1a\u200b\u662f\u200b\u6027\u8d28\u200b\u76f8\u540c\u200b\u7684\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u7684\u200b\u96c6\u5408\u200b\uff0c\u200b\u662f\u200b\u6570\u636e\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b50\u96c6\u200b\u3002\u200b\u5982\u200b\uff1a\u200b\u5b66\u751f\u200b\u6570\u636e\u200b\u5bf9\u8c61\u200b\u3002 - 5.\u200b\u6570\u636e\u7ed3\u6784\u200b\uff1a\u200b\u662f\u200b\u6307\u200b\u76f8\u4e92\u4e4b\u95f4\u200b\u5b58\u5728\u200b\u4e00\u79cd\u200b\u6216\u200b\u591a\u79cd\u200b\u7279\u5b9a\u200b\u5173\u7cfb\u200b\u7684\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u7684\u200b\u96c6\u5408\u200b\u3002</p> <p>\u200b\u6570\u636e\u200b &gt; \u200b\u6570\u636e\u200b\u5bf9\u8c61\u200b\u3001\u200b\u6570\u636e\u7ed3\u6784\u200b &gt; \u200b\u6570\u636e\u200b\u5143\u7d20\u200b &gt;\u3000\u200b\u6570\u636e\u9879\u200b</p> <p>\u200b\u6570\u636e\u7ed3\u6784\u200b\u4e2d\u200b\u56db\u79cd\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\u7684\u200b\u903b\u8f91\u200b\u7ed3\u6784\u200b\uff1a - \u200b\u4e00\u200b\u3000\u200b\u96c6\u5408\u200b\u7ed3\u6784\u200b\uff1a\u200b\u96c6\u5408\u200b\u7ed3\u6784\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u9664\u4e86\u200b\u4ec5\u4ec5\u200b\u540c\u200b\u5c5e\u4e8e\u200b\u540c\u4e00\u4e2a\u200b\u96c6\u5408\u200b\u5916\u200b\uff0c\u200b\u4e0d\u200b\u5b58\u5728\u200b\u903b\u8f91\u5173\u7cfb\u200b\u3002 - \u200b\u4e8c\u200b\u3000\u200b\u7ebf\u6027\u200b\u7ed3\u6784\u200b\uff1a\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u4e4b\u95f4\u200b\u5b58\u5728\u200b\u7740\u200b\u4e00\u79cd\u200b\u4e00\u5bf9\u4e00\u200b\u7684\u200b\u5173\u7cfb\u200b\u3002 - \u200b\u4e09\u200b\u3000\u200b\u6811\u5f62\u200b\u7ed3\u6784\u200b\uff1a\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u4e4b\u95f4\u200b\u5b58\u5728\u200b\u7740\u200b\u4e00\u79cd\u200b\u4e00\u5bf9\u200b\u591a\u200b\u7684\u200b\u5173\u7cfb\u200b\u3002 - \u200b\u56db\u200b\u3000\u200b\u56fe\u5f62\u200b\u7ed3\u6784\u200b\uff1a\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u4e4b\u95f4\u200b\u5b58\u5728\u200b\u7740\u200b\u4e00\u79cd\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u7684\u200b\u5173\u7cfb\u200b\u3002</p> <p>\u200b\u6570\u636e\u7ed3\u6784\u200b\u7684\u200b\u4e09\u8981\u7d20\u200b\uff1a - \uff11\uff09\u200b\u903b\u8f91\u200b\u7ed3\u6784\u200b\u3000 - \uff12\uff09\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u3000 - \uff13\uff09\u200b\u8fd0\u7b97\u200b</p> <p>\u200b\u6570\u636e\u7ed3\u6784\u200b\u5728\u200b\u8ba1\u7b97\u673a\u200b\u4e2d\u200b\u7684\u200b\u8868\u793a\u200b\u4e3a\u200b\u7269\u7406\u200b\u7ed3\u6784\u200b\uff0c\u200b\u53c8\u200b\u79f0\u4e3a\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u3002</p> <p>\u200b\u5b58\u50a8\u5bc6\u5ea6\u200b\uff1a\u200b\u6570\u636e\u200b\u672c\u8eab\u200b\u6240\u200b\u5360\u200b\u7684\u200b\u5b58\u50a8\u91cf\u200b\u548c\u200b\u6574\u4e2a\u200b\u7ed3\u6784\u200b\u6240\u200b\u5360\u200b\u7684\u200b\u5b58\u50a8\u91cf\u200b\u4e4b\u200b\u6bd4\u200b\u3002\u200b\u6570\u636e\u200b\u672c\u8eab\u200b\u6240\u200b\u5360\u200b\u7684\u200b\u5b58\u50a8\u91cf\u200b \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000</p> <p>\u200b\u6570\u636e\u7c7b\u578b\u200b\uff1a\u200b\u662f\u200b\u5bf9\u200b\u6570\u636e\u200b\u7684\u200b\u53d6\u503c\u200b\u8303\u56f4\u200b\uff0c\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u4e4b\u95f4\u200b\u7684\u200b\u7ed3\u6784\u200b\u4ee5\u53ca\u200b\u5141\u8bb8\u200b\u65bd\u52a0\u200b\u64cd\u4f5c\u200b\u7684\u200b\u4e00\u79cd\u200b\u603b\u4f53\u200b\u63cf\u8ff0\u200b\u3002</p> <p>\u200b\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u200b\uff1a\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6570\u5b66\u6a21\u578b\u200b\u4ee5\u53ca\u200b\u5b9a\u4e49\u200b\u5728\u200b\u8be5\u200b\u6a21\u578b\u200b\u4e0a\u200b\u7684\u200b\u4e00\u7ec4\u200b\u64cd\u4f5c\u200b\u3002</p> <p>\u200b\u6839\u636e\u200b\u201c\u200b\u503c\u200b\u201d\u200b\u7684\u200b\u4e0d\u540c\u200b\uff0c\u200b\u6570\u636e\u7c7b\u578b\u200b\u548c\u200b\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u200b\u5206\u522b\u200b\u53ef\u4ee5\u200b\u5206\u4e3a\u200b\u4e24\u7c7b\u200b\u3002</p> <p>\u200b\u6570\u636e\u7c7b\u578b\u200b\uff1a - \uff11\uff09\u200b\u7b80\u5355\u200b\u7c7b\u578b\u200b\uff08\u200b\u5305\u542b\u200b\u539f\u5b50\u200b\u7c7b\u578b\u200b\uff09 - \uff12\uff09\u200b\u7ed3\u6784\u200b\u7c7b\u578b\u200b</p> <p>\u200b\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u200b\uff1a - \uff11\uff09\u200b\u539f\u5b50\u200b\u7c7b\u578b\u200b\uff08\u200b\u6700\u5c0f\u200b\u7c7b\u578b\u200b\uff09 - \uff12\uff09\u200b\u805a\u5408\u200b\u7c7b\u578b\u200b</p>"},{"location":"DataStruct/10-%E4%B8%B2/","title":"\u4e32","text":""},{"location":"DataStruct/10-%E4%B8%B2/#_2","title":"\u5b9a\u4e49","text":"<p>\u200b\u4e32\u200b\u662f\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u7b80\u79f0\u200b\u3002\u200b\u5b83\u200b\u662f\u200b\u4e00\u79cd\u200b\u5728\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u7684\u200b\u7ec4\u6210\u200b\u4e0a\u200b\u5177\u6709\u200b\u4e00\u5b9a\u200b\u7ea6\u675f\u6761\u4ef6\u200b\u7684\u200b\u7ebf\u6027\u8868\u200b\uff0c\u200b\u5373\u200b\u8981\u6c42\u200b\u7ec4\u6210\u200b\u7ebf\u6027\u8868\u200b\u7684\u200b\u6240\u6709\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u90fd\u200b\u662f\u200b\u5b57\u7b26\u200b\uff0c\u200b\u6240\u4ee5\u200b\uff0c\u200b\u4eba\u4eec\u200b\u7ecf\u5e38\u200b\u8fd9\u6837\u200b\u5b9a\u4e49\u200b\u4e32\u200b\uff1a\u200b\u4e32\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6709\u7a77\u200b\u5b57\u7b26\u200b\u5e8f\u5217\u200b\u3002 \u200b\u5982\u200b\uff1a abcdef</p> <p>\u200b\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b6</p> <p>\u200b\u4e32\u4e2d\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u5b57\u7b26\u200b\uff0c\u200b\u5176\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b0\uff0c\u200b\u901a\u5e38\u200b\u79f0\u4e3a\u200b\u7a7a\u4e32\u200b\u3002 \u200b\u7531\u200b\u7a7a\u683c\u200b\u5b57\u7b26\u200b\u7ec4\u6210\u200b\u7684\u200b\u4e32\u200b\uff0c\u200b\u4e00\u73ed\u200b\u79f0\u4e3a\u200b\u7a7a\u683c\u200b\u4e32\u200b\u3002 \u200b\u4e32\u4e2d\u200b\u4efb\u610f\u200b\u8fde\u7eed\u200b\u7684\u200b\u5b57\u7b26\u200b\u7ec4\u6210\u200b\u7684\u200b\u5b50\u200b\u5e8f\u5217\u200b\u79f0\u4e3a\u200b\u8be5\u4e32\u200b\u7684\u200b\u5b50\u4e32\u200b\u3002\u200b\u5305\u542b\u200b\u5b50\u4e32\u200b\u7684\u200b\u4e32\u200b\u53c8\u200b\u79f0\u4e3a\u200b\u8be5\u200b\u5b50\u4e32\u200b\u7684\u200b\u4e3b\u4e32\u200b\u3002 \u200b\u5b50\u4e32\u200b\u5728\u200b\u4e3b\u4e32\u200b\u4e2d\u200b\u7b2c\u4e00\u6b21\u200b\u51fa\u73b0\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u79f0\u4e3a\u200b\u5b50\u4e32\u200b\u5728\u200b\u4e3b\u4e32\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002 \u200b\u4e24\u4e2a\u200b\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\u76f8\u7b49\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5404\u4e2a\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b57\u7b26\u200b\u90fd\u200b\u76f8\u540c\u200b\uff0c\u200b\u79f0\u200b\u4e24\u4e2a\u200b\u4e32\u200b\u76f8\u7b49\u200b\u3002</p> <p>\u200b\u4e32\u200b\u7684\u200b\u5b58\u50a8\u200b\u65b9\u5f0f\u200b\u4e5f\u200b\u5206\u200b\u4e24\u79cd\u200b\uff1a\u200b\u4e32\u200b\u7684\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u548c\u200b\u4e32\u200b\u7684\u200b\u94fe\u5f0f\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b</p>"},{"location":"DataStruct/10-%E4%B8%B2/#_3","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;malloc.h&gt;\nusing namespace std;\n//\u200b\u4e32\u200b\u7684\u200b\u5806\u200b\u5b58\u50a8\u200b\u65b9\u5f0f\u200b\ntypedef struct {\n    char *str;\n    int length;\n}HString;\nvoid init(HString  *s) {\n    s-&gt;length = 0;\n    s-&gt;str = NULL;\n}\n//\u200b\u4e32\u200b\u521d\u59cb\u5316\u200b\nvoid HStringInit(HString *s) {\n    char c;\n    int length;\n    cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\uff1a\" &lt;&lt; endl;\n    cin &gt;&gt; length;\n    s-&gt;length = length;\n    s-&gt;str = (char*)malloc((length+1)*sizeof(char));\n    for (int i = 0; i &lt; s-&gt;length; i++) {\n        cin &gt;&gt; c;\n        s-&gt;str[i] = c;\n    }\n    cout &lt;&lt; \"\u200b\u521d\u59cb\u5316\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u4e32\u200b\u8d4b\u503c\u200b\nvoid HStringAssign(HString *s, HString *t) {            \n    if (s-&gt;str) free(s-&gt;str);\n    int len = t-&gt;length;\n    s-&gt;length = len;\n    if (!len) {\n        s-&gt;str = (char*)malloc(sizeof(char));\n        s-&gt;str[0] = '\\0';\n    }\n    else {\n        s-&gt;str = (char*)malloc(sizeof(char));\n        for (int i = 0; i &lt; t-&gt;length; i++) {\n            s-&gt;str[i] = t-&gt;str[i];\n        }\n    }\n    cout &lt;&lt; \"\u200b\u8d4b\u503c\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u8f93\u51fa\u200b\u4e32\u200b\u5185\u5bb9\u200b\nvoid print(HString *s) {                            \n    if (s-&gt;length == 0 &amp;&amp; s-&gt;str == NULL) {\n        cout &lt;&lt; \"\u200b\u4e32\u200b\u7684\u200b\u5185\u5bb9\u200b\u4e3a\u7a7a\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u4e32\u200b\u7684\u200b\u5185\u5bb9\u200b\u4e3a\u200b\uff1a \";\n        for (int i = 0; i &lt; s-&gt;length; i++) {\n            cout &lt;&lt; s-&gt;str[i];\n        }\n        cout &lt;&lt; endl;\n    }\n}\n//\u200b\u6c42\u4e32\u200b\u957f\u200b\nvoid HStringLength(HString *s ) {                   \n    cout &lt;&lt; \"\u200b\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b\uff1a     \" &lt;&lt; s-&gt;length &lt;&lt; endl;\n}\n//\u200b\u5224\u4e32\u200b\u76f8\u7b49\u200b\nvoid HStringCompar(HString *s,HString *t) {             \n    int flag = 0;\n    if (s-&gt;length != t-&gt;length) {\n        cout &lt;&lt; \"\u200b\u4e0d\u200b\u76f8\u7b49\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        if (s-&gt;length == 0) {\n            cout &lt;&lt; \"\u200b\u76f8\u7b49\u200b\uff01\" &lt;&lt; endl;\n        }\n        else {\n            for (int i = 0; i &lt; s-&gt;length&amp;&amp;i &lt; t-&gt;length; i++) {\n                if (s-&gt;str[i] != t-&gt;str[i]) {\n                    cout &lt;&lt; \"\u200b\u4e0d\u200b\u76f8\u7b49\u200b\uff01\" &lt;&lt; endl;\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0) {\n                cout &lt;&lt; \"\u200b\u76f8\u7b49\u200b\uff01\" &lt;&lt; endl;\n            }\n        }\n    }\n}\n//\u200b\u4e32\u200b\u8fde\u63a5\u200b\nvoid HStringConCat(HString *s,HString *t) {             \n    HString s1;\n    init(&amp;s1);\n    int i = 0;\n    HStringAssign(&amp;s1, s);\n    s-&gt;length += t-&gt;length;\n    free(s-&gt;str);\n    s-&gt;str = (char*)malloc((s-&gt;length+1)*sizeof(char));\n    for (; i &lt; s1.length; i++) {\n        s-&gt;str[i] = s1.str[i];\n    }\n    for (; i &lt; s-&gt;length;i++) {\n        s-&gt;str[i] = t-&gt;str[i - s1.length];\n    }\n    free(s1.str);\n    free(t-&gt;str);\n    t-&gt;str = NULL;\n    t-&gt;length = 0;\n    cout &lt;&lt; \"\u200b\u8fde\u63a5\u200b\u5b8c\u6210\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u6c42\u200b\u5b50\u4e32\u200b\nvoid HStringSub(HString *s,int start,int end) {         \n    cout &lt;&lt; \"\u200b\u5b50\u4e32\u200b\u4e3a\u200b\uff1a\";\n    for (int i = start - 1; i &lt; end; i++) {\n        cout &lt;&lt; s-&gt;str[i];\n    }\n    cout &lt;&lt; endl;\n}\n//\u200b\u5b50\u4e32\u200b\u5b9a\u4f4d\u200b\nvoid HStringIndex(HString *s,HString *t) {              \n    int i = 0,j = 0;\n    while (i &lt; s-&gt;length &amp;&amp;j &lt; t-&gt;length) {\n        if (s-&gt;str[i] == t-&gt;str[j]) {\n            i++; \n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n     }\n    if (j == t-&gt;length) {\n        cout &lt;&lt; \"\u200b\u5b50\u4e32\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u4e3a\u200b:\" &lt;&lt; i-t-&gt;length + 1 &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u6ca1\u6709\u200b\u8be5\u200b\u5b50\u4e32\u200b\uff01\" &lt;&lt; endl;\n    }\n}\n//\u200b\u4e32\u200b\u7f6e\u6362\u200b\nvoid HStringReplace(HString *s,HString *t) {        \n    HString s1;\n    init(&amp;s1);\n    HStringAssign(&amp;s1, s);\n    HStringAssign(s, t);\n    HStringAssign(t, &amp;s1);\n    free(s1.str);\n    s1.length = 0;\n    s1.str = NULL;\n    cout &lt;&lt; \"\u200b\u7f6e\u6362\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u63d2\u5165\u200b\u5b50\u4e32\u200b\nvoid HStringInsert(HString *s,int start,HString *t) {   \n    HString s1;\n    init(&amp;s1);\n    int i = 0,j;\n    HStringAssign(&amp;s1, s);\n    s-&gt;length += t-&gt;length;\n    free(s-&gt;str);\n    s-&gt;str = (char*)malloc((s-&gt;length + 1) * sizeof(char));\n    for (; i &lt; start-1; i++) {\n        s-&gt;str[i] = s1.str[i];\n    }\n    j = i;\n    for (int k = 0; k &lt; t-&gt;length; k++, i++) {\n        s-&gt;str[i] = t-&gt;str[k];\n    }\n    for (; i &lt; s-&gt;length; i++, j++) {\n        s-&gt;str[i] = s1.str[j];\n    }\n    cout &lt;&lt; \"\u200b\u63d2\u5165\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u5220\u9664\u200b\u5b50\u4e32\u200b\nvoid HStringDelet(HString *s,int start,int length) {    \n    int i = start,flag,k=length;\n    char c;\n    while (length != 0) {\n        s-&gt;str[i - 1] = 0;\n        length--;\n        i++;\n    }\n    for (int m = 0; m &lt; s-&gt;length;m++) {\n        if (s-&gt;str[m] != 0 &amp;&amp; s-&gt;str[m - 1] == 0) {\n            flag = m;\n            while (flag) {\n                if (s-&gt;str[flag - 1] != 0) {\n                    break;\n                }\n                c = s-&gt;str[flag - 1];\n                s-&gt;str[flag - 1] = s-&gt;str[flag];\n                s-&gt;str[flag] = c;\n                flag--;\n            }\n        }\n    }\n    s-&gt;length -=k;\n    cout &lt;&lt; \"\u200b\u5220\u9664\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\nvoid message() {\n    cout &lt;&lt; \"************************************************************\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  1   \u200b\u8f93\u51fa\u200b\u4e32\u200b             2   \u200b\u4e32\u200b\u8d4b\u503c\u200b    *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  3   \u200b\u5224\u4e32\u200b\u76f8\u7b49\u200b        4   \u200b\u6c42\u4e32\u200b\u957f\u200b    *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  5   \u200b\u4e32\u200b\u8fde\u63a5\u200b         6   \u200b\u6c42\u200b\u5b50\u4e32\u200b    *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  7   \u200b\u5b50\u4e32\u200b\u5b9a\u4f4d\u200b        8   \u200b\u4e32\u200b\u7f6e\u6362\u200b    *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  9   \u200b\u63d2\u5165\u200b\u5b50\u4e32\u200b        10  \u200b\u5220\u9664\u200b\u5b50\u4e32\u200b   *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  11  \u200b\u6e05\u5c4f\u200b          12  \u200b\u9000\u51fa\u200b     *\" &lt;&lt; endl;\n    cout &lt;&lt; \"************************************************************\" &lt;&lt; endl;\n}\nvoid main() {\n    int temp = 0,length;\n    HString S1, S2;\n    message();\n    cout &lt;&lt; \"\u200b\u5bf9\u4e32\u200bS1\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\uff1a\" &lt;&lt; endl;\n    HStringInit(&amp;S1);\n    cout &lt;&lt; \"\u200b\u5bf9\u4e32\u200bS2\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\uff1a\" &lt;&lt; endl;\n    HStringInit(&amp;S2);\n    int i = 0;\n    while (1) {     \n        cin &gt;&gt; i;\n        switch (i) {\n        case 1:cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u4f60\u200b\u8981\u200b\u8f93\u51fa\u200b\u7684\u200b\u4e32\u200b    1:  S1,    2:   S2\" &lt;&lt; endl;                   \n                    cin &gt;&gt; temp;\n                    switch (temp) {\n                            case 1:print(&amp;S1); break;\n                            case 2:print(&amp;S2); break;\n                            default:cout &lt;&lt; \"\u200b\u8f93\u5165\u200b\u9519\u8bef\u200b\uff01\" &lt;&lt; endl; break;\n                    }\n                break;\n        case 2: cout &lt;&lt; \"\u200b\u5c06\u200bS2\u200b\u8d4b\u503c\u200b\u7ed9\u200bS1\" &lt;&lt; endl;\n                    HStringAssign(&amp;S1, &amp;S2);\n                break;\n        case 3:cout &lt;&lt; \"\u200b\u5224\u65ad\u200bS1\u200b\u548c\u200bS2\u200b\u662f\u5426\u200b\u76f8\u7b49\u200b\uff1f\" &lt;&lt; endl;\n                    HStringCompar(&amp;S1, &amp;S2);\n                break;\n        case 4:cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u4f60\u200b\u8981\u6c42\u200b\u7684\u200b\u4e32\u200b    1:  S1,    2:   S2\" &lt;&lt; endl;\n                    cin &gt;&gt; temp;\n                    switch (temp) {\n                            case 1:HStringLength(&amp;S1); break;\n                            case 2:HStringLength(&amp;S2); break;\n                            default:cout &lt;&lt; \"\u200b\u8f93\u5165\u200b\u9519\u8bef\u200b\uff01\" &lt;&lt; endl; break;\n                    }\n                break;\n        case 5:cout &lt;&lt; \"\u200b\u5c06\u200b\u4e32\u200bS2\u200b\u8fde\u63a5\u200b\u5230\u200bS1\u200b\u4e0a\u200b\uff01\" &lt;&lt; endl;\n                    HStringConCat(&amp;S1, &amp;S2);\n                break;\n        case 6:cout &lt;&lt; \"\u200b\u6c42\u200bS1\u200b\u7684\u200b\u5b50\u4e32\u200b\uff1a\" &lt;&lt; endl;\n                cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u5f00\u59cb\u200b\u4f4d\u7f6e\u200b\u548c\u200b\u957f\u5ea6\u200b\uff1a\" &lt;&lt; endl;\n                cin &gt;&gt; temp &gt;&gt; length;\n                if (temp &gt; S1.length) {\n                    cout &lt;&lt; \"\u200b\u8f93\u51fa\u200b\u4f4d\u7f6e\u200b\u9519\u8bef\u200b\uff01\" &lt;&lt; endl;\n                    break;\n                }\n                else {\n                    if ((length - temp) &gt; S1.length) {\n                        cout &lt;&lt; \"\u200b\u5b50\u4e32\u200b\u957f\u5ea6\u200b\u8d85\u51fa\u200b\uff01\" &lt;&lt; endl;\n                    }\n                    else {\n                        HStringSub(&amp;S1, temp, length);\n                    }\n                }\n                break;\n        case 7:cout &lt;&lt; \"\u200b\u5b50\u4e32\u200bS2\u200b\u5728\u200bS1\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\" &lt;&lt; endl;\n            HStringIndex(&amp;S1,&amp;S2);\n            break;\n        case 8:cout &lt;&lt; \"\u200b\u5c06\u200bS1\u200b\u548c\u200bS2\u200b\u7f6e\u6362\u200b\uff01\" &lt;&lt; endl;\n                HStringReplace(&amp;S1,&amp;S2);\n            break;\n        case 9:cout &lt;&lt; \"\u200b\u5c06\u200bS2\u200b\u63d2\u5165\u200b\u5230\u200bS1\u200b\u4e2d\u200b\" &lt;&lt; endl;\n                cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u63d2\u5165\u200b\u4f4d\u7f6e\u200b\uff1a\" &lt;&lt; endl;\n                cin &gt;&gt; temp;\n                if (temp &gt;= S1.length) {\n                    cout &lt;&lt; \"\u200b\u63d2\u5165\u200b\u4f4d\u7f6e\u200b\u9519\u8bef\u200b\uff01\" &lt;&lt; endl;\n                    break;\n                }\n                else {\n                    HStringInsert(&amp;S1,temp,&amp;S2);\n                }\n            break;\n        case 10:cout &lt;&lt; \"\u200b\u5220\u9664\u200bS1\u200b\u7684\u200b\u5b50\u4e32\u200b\uff1a\" &lt;&lt; endl;\n                cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u5f00\u59cb\u200b\u4f4d\u7f6e\u200b\u548c\u200b\u957f\u5ea6\u200b\uff1a\" &lt;&lt; endl;\n                cin &gt;&gt; temp &gt;&gt; length;\n                if (temp &gt; S1.length) {\n                    cout &lt;&lt; \"\u200b\u8f93\u51fa\u200b\u4f4d\u7f6e\u200b\u9519\u8bef\u200b\uff01\" &lt;&lt; endl;\n                    break;\n                }\n                else {\n                    if ((length + temp) &gt; S1.length+1) {\n                    cout &lt;&lt; \"\u200b\u5b50\u4e32\u200b\u957f\u5ea6\u200b\u8d85\u51fa\u200b\uff01\" &lt;&lt; endl;\n                    }\n                    else {\n                        HStringDelet(&amp;S1, temp, length);\n                    }\n                }break;\n        case 11:system(\"cls\"); message(); break;\n        case 12:exit(0); break;\n        default:cout &lt;&lt; \"\u200b\u8f93\u5165\u200b\u9519\u8bef\u200b\uff01\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff1a\" &lt;&lt; endl; break;\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/11-%E6%95%B0%E7%BB%84/","title":"\u6570\u7ec4","text":"<p>\u200b\u6570\u7ec4\u200b\u662f\u200b\u7531\u200b\u7c7b\u578b\u200b\u76f8\u540c\u200b\u7684\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u6784\u6210\u200b\u7684\u200b\u6709\u5e8f\u200b\u96c6\u5408\u200b\u3002 \u200b\u6570\u7ec4\u200b\u4e00\u822c\u200b\u4e0d\u200b\u8fdb\u884c\u200b\u63d2\u5165\u200b\u5220\u9664\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0c\u200b\u6570\u7ec4\u200b\u5efa\u7acb\u200b\u4e4b\u540e\u200b\uff0c\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\u548c\u200b\u5143\u7d20\u200b\u95f4\u200b\u7684\u200b\u5173\u7cfb\u200b\u5c31\u200b\u4e0d\u518d\u200b\u53d1\u751f\u53d8\u5316\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u6570\u7ec4\u200b\u7684\u200b\u64cd\u4f5c\u200b\u4e00\u822c\u200b\u53ea\u6709\u200b\u4e24\u7c7b\u200b\uff1a\u200b\u7ed9\u5b9a\u200b\u4e0b\u6807\u200b\uff0c\u200b\u53d6\u200b\u6570\u7ec4\u200b\u5143\u7d20\u200b\u7684\u200b\u503c\u200b\u548c\u200b\u4fee\u6539\u200b\u6570\u7ec4\u200b\u5143\u7d20\u200b\u7684\u200b\u503c\u200b\u3002</p> <p>\u200b\u4e8c\u7ef4\u200b\u6570\u7ec4\u200b\u6709\u200b\u4e24\u79cd\u200b\u5b58\u50a8\u200b\u65b9\u5f0f\u200b - \u200b\u4ee5\u884c\u5e8f\u200b\u4e3a\u4e3b\u200b\u5e8f\u200b\u7684\u200b\u5b58\u50a8\u200b\u65b9\u5f0f\u200b\uff1b - \u200b\u4ee5\u5217\u5e8f\u200b\u4e3a\u4e3b\u200b\u5e8f\u200b\u7684\u200b\u5b58\u50a8\u200b\u65b9\u5f0f\u200b\u3002C\u200b\u8bed\u8a00\u200b\u4ee5\u884c\u5e8f\u200b\u4e3a\u4e3b\u200b\u5e8f\u200b\u7684\u200b\u5b58\u50a8\u200b\u65b9\u5f0f\u200b\u3002</p> <p>\u200b\u8bbe\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u5360\u7528\u200bL\u200b\u4e2a\u200b\u5b58\u50a8\u5355\u5143\u200b\uff0c\u200b\u5728\u200bC\u200b\u8bed\u8a00\u200b\u4e2d\u200b\u5047\u8bbe\u200b\u5df2\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u4e8c\u7ef4\u200b\u6570\u7ec4\u200bA[m][n],\u200b\u5219\u200b\u6570\u7ec4\u200b\u5143\u7d20\u200baij\u200b\u7684\u200b\u4e0b\u6807\u200b\u53d6\u503c\u200b\u8303\u56f4\u200b\u662f\u200b\uff1a0\u2264i\u2264m-1,0\u2264j\u2264n-1.\u200b\u6c42\u8be5\u200b\u5143\u7d20\u200b\u7684\u200b\u5b58\u50a8\u200b\u5730\u5740\u200b\uff1a</p> <pre><code>                       LOC\uff08i\uff0cj\uff09=LOC\uff080,0\uff09+\uff08i*n+j\uff09*L\n</code></pre> <p>LOC\uff080,0\uff09\u200b\u4e3a\u200b\u4e8c\u7ef4\u200b\u6570\u7ec4\u200b\u7684\u200b\u8d77\u59cb\u200b\u5730\u5740\u200b\uff0c\u200b\u4e5f\u200b\u79f0\u4e3a\u200b\u57fa\u200b\u5730\u5740\u200b\u3002</p>"},{"location":"DataStruct/12-%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9-%E4%B8%89%E5%85%83%E7%BB%84%E8%A1%A8-%E8%BD%AC%E7%BD%AE/","title":"\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u538b\u7f29\u200b-\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\uff08\u200b\u8f6c\u7f6e\u200b\uff09","text":"<p>\u200b\u82e5\u200b\u77e9\u9635\u200b\u4e2d\u200b\u7684\u200b\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\u8fdc\u8fdc\u200b\u5c0f\u4e8e\u200b\u77e9\u9635\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\uff0c\u200b\u4e14\u200b\u5206\u5e03\u200b\u6ca1\u6709\u200b\u89c4\u5f8b\u200b\uff0c\u200b\u5219\u200b\u79f0\u200b\u8fd9\u4e2a\u200b\u77e9\u9635\u200b\u4e3a\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\u3002 \u200b\u538b\u7f29\u200b\u5b58\u50a8\u200b\u662f\u200b\u6307\u200b\u5bf9\u200b\u591a\u4e2a\u200b\u503c\u200b\u76f8\u540c\u200b\u7684\u200b\u5143\u7d20\u200b\u53ea\u200b\u5206\u914d\u200b\u4e00\u4e2a\u200b\u5b58\u50a8\u7a7a\u95f4\u200b\uff0c\u200b\u5bf9\u200b\u96f6\u200b\u5143\u7d20\u200b\u4e0d\u200b\u5206\u914d\u200b\u7a7a\u95f4\u200b\u3002</p> <p>\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u538b\u7f29\u200b\u5b58\u50a8\u200b\u6709\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\uff1a\u200b\u4e09\u5143\u7ec4\u200b\u7684\u200b\u987a\u5e8f\u5b58\u50a8\u200b\uff08\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\uff09\u200b\u548c\u200b\u94fe\u5f0f\u200b\u5b58\u50a8\u200b\uff08\u200b\u5341\u5b57\u200b\u94fe\u8868\u200b\uff09\u3002</p> <p>\u200b\u73b0\u5728\u200b\u4e3b\u8981\u200b\u8bb2\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\uff0c\u200b\u7531\u4e8e\u200b\u4e24\u4e2a\u200b\u9636\u6570\u200b\u4e0d\u540c\u200b\u7684\u200b\u77e9\u9635\u200b\u53ef\u80fd\u200b\u5177\u6709\u200b\u76f8\u540c\u200b\u7684\u200b\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u533a\u522b\u200b\uff0c\u200b\u5728\u200b\u5b58\u50a8\u200b\u4e09\u5143\u7ec4\u200b\u65f6\u200b\uff0c\u200b\u540c\u65f6\u200b\u8fd8\u5e94\u200b\u5b58\u50a8\u200b\u8be5\u200b\u77e9\u9635\u200b\u7684\u200b\u884c\u6570\u200b\u3001\u200b\u5217\u6570\u200b\u3002\u200b\u901a\u5e38\u200b\u4e3a\u4e86\u200b\u8fd0\u7b97\u200b\u7684\u200b\u65b9\u4fbf\u200b\uff0c\u200b\u4e5f\u200b\u5b58\u653e\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\u3002\u200b\u8fd9\u79cd\u200b\u4ee5\u200b\u987a\u5e8f\u5b58\u50a8\u200b</p> <p>\u200b\u7ed3\u6784\u200b\u6765\u200b\u8868\u793a\u200b\u4e09\u5143\u7ec4\u200b\u7684\u200b\u7ebf\u6027\u8868\u200b\uff0c\u200b\u79f0\u4e4b\u4e3a\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\u3002\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u5b58\u50a8\u200b\u7684\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\u7684\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u53ef\u5b9a\u4e49\u200b\u5982\u4e0b\u200b\uff1a <pre><code>#define MAXSIZE 1000            //\u200b\u7528\u6237\u200b\u81ea\u5b9a\u4e49\u200b\u4e09\u5143\u7ec4\u200b\u6700\u5927\u200b\u4e2a\u6570\u200b\ntypedef int ElemType;\ntypedef struct {                //\u200b\u4e09\u5143\u7ec4\u200b\n    int row,col;                //\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u884c\u6570\u200b\u548c\u200b\u5217\u6570\u200b\n    ElemType e;                 //\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u503c\u200b\n}Triple;\ntypedef struct {\n    Triple data[MAXSIZE];       //\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\n    int m,n, len;               //\u200b\u77e9\u9635\u200b\u7684\u200b\u884c\u6570\u200b\u3001\u200b\u5217\u6570\u200b\u548c\u200b\u975e\u200b\u96f6\u200b\u4e2a\u6570\u200b\n}TSMatrix;\n</code></pre></p>"},{"location":"DataStruct/12-%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9-%E4%B8%89%E5%85%83%E7%BB%84%E8%A1%A8-%E8%BD%AC%E7%BD%AE/#-_1","title":"\u4e09\u5143\u7ec4\u200b\u8868\u200b\u7684\u200b\u77e9\u9635\u200b\u8f6c\u7f6e\u200b\u8fd0\u7b97\u200b-\u201c\u200b\u76f4\u63a5\u200b\u53d6\u200b\uff0c\u200b\u987a\u5e8f\u200b\u5b58\u200b\u201d","text":"<p><pre><code>//\u200b\u8f6c\u7f6e\u200b\nTSMatrix TransTSMatrixSlow(TSMatrix a,TSMatrix b) {\n    int q;\n    b.m = a.n;\n    b.n = a.m;\n    b.len = a.len;\n    if (b.len) {\n        q = 0;                          //B\u200b\u4e2d\u200b\u7684\u200b\u975e\u200b\u96f6\u200b\u4e2a\u6570\u200b\n        for (int j = 0; j &lt; a.n;j++) {          //\u200b\u6309\u5217\u200b\u8f6c\u7f6e\u200b\n            for (int h = 0; h &lt; a.len; h++) {\n                if (j==a.data[h].col) {         //\u200b\u672c\u5217\u200b\u4e2d\u200b\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\n                    b.data[q].row = a.data[h].col;\n                    b.data[q].col = a.data[h].row;\n                    b.data[q].e = a.data[h].e;\n                    q++;\n                }\n            }\n        }\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u77e9\u9635\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u65e0\u9700\u200b\u8f6c\u7f6e\u200b\uff01\" &lt;&lt; endl;\n    }\n    return b;\n}\n</code></pre> \u200b\u4f46\u662f\u200b\u6bcf\u200b\u5904\u7406\u200b\u4e00\u5217\u200b\u5c31\u8981\u200b\u67e5\u904d\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\uff0c\u200b\u5de5\u4f5c\u91cf\u200b\u6bd4\u8f83\u200b\u5927\u200b</p>"},{"location":"DataStruct/12-%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9-%E4%B8%89%E5%85%83%E7%BB%84%E8%A1%A8-%E8%BD%AC%E7%BD%AE/#-_2","title":"\u4e09\u5143\u7ec4\u200b\u8868\u200b\u7684\u200b\u77e9\u9635\u200b\u5feb\u901f\u200b\u8f6c\u7f6e\u200b\u8fd0\u7b97\u200b-\u201c\u200b\u987a\u5e8f\u200b\u53d6\u200b\uff0c\u200b\u76f4\u63a5\u200b\u5b58\u200b\u201d","text":"<p><pre><code>//\u200b\u5feb\u901f\u200b\u8f6c\u7f6e\u200b\nTSMatrix TransTSMatrixFast(TSMatrix a, TSMatrix b) {\n    int number[MAXSIZE],position[MAXSIZE];\n    b.m = a.n;\n    b.n = a.m;\n    b.len = a.len;\n    for (int j = 0; j &lt; a.n;j++) {\n        number[j] = 0;      //\u200b\u5c06\u200b\u77e9\u9635\u200ba\u200b\u6bcf\u200b\u4e00\u5217\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\u521d\u59cb\u5316\u200b\u4e3a\u200b\u96f6\u200b\n    }\n    for (int t = 0; t &lt; a.len; t++) {\n        number[a.data[t].col]++;        //\u200b\u6c42\u200b\u6bcf\u200b\u4e00\u5217\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\n    }\n    position[0] = 0;\n    for (int j = 1; j &lt; a.n; j++) { //a.data[]\u200b\u7684\u200b\u7b2c\u200bj\u200b\u5217\u200b\u7b2c\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u5728\u200bb.data\u200b\u4e2d\u200b\u7684\u200b\u5e8f\u53f7\u200b\n        position[j] = position[j - 1] + number[j - 1];\n    }\n    int j,q;\n    for (int p = 0; p &lt; a.len; p++) {   //\u200b\u6c42\u200b\u8f6c\u7f6e\u200b\u77e9\u9635\u200bb\u200b\u7684\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\n        j = a.data[p].col;\n        q = position[j];\n        b.data[q].row = a.data[p].col;\n        b.data[q].col = a.data[p].row;\n        b.data[q].e = a.data[p].e;\n        position[j]++;\n    }\n    return b;\n}\n</code></pre> \u200b\u6838\u5fc3\u200b\uff1a\u200b\u82e5\u7528\u200bnumber\u200b\u6570\u7ec4\u200b\u8bb0\u5f55\u200b\u77e9\u9635\u200bA\u200b\u4e2d\u200b\u6bcf\u5217\u200b\u7684\u200b\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b\uff0c\u200b\u7528\u200bposition\u200b\u6570\u7ec4\u200b\u8bb0\u5f55\u200bA\u200b\u4e2d\u200b\u6bcf\u5217\u200b\u7b2c\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u5728\u200b\u4e09\u5143\u7ec4\u200b\u8868\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u5219\u200b\u82e5\u200b\u7b2c\u200bj-1\u200b\u5217\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u5728\u200bposition[j-1]\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\uff0c\u200b\u7b2c\u200bj\u200b\u5217\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u5fc5\u5728\u200b\u7b2c\u200bposition[j-1]+number[j-1]\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\u3002</p>"},{"location":"DataStruct/12-%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9-%E4%B8%89%E5%85%83%E7%BB%84%E8%A1%A8-%E8%BD%AC%E7%BD%AE/#_1","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#define MAXSIZE 1000            //\u200b\u7528\u6237\u200b\u81ea\u5b9a\u4e49\u200b\u4e09\u5143\u7ec4\u200b\u6700\u5927\u200b\u4e2a\u6570\u200b\ntypedef int ElemType;\ntypedef struct {                //\u200b\u4e09\u5143\u7ec4\u200b\n    int row,col;                //\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u884c\u6570\u200b\u548c\u200b\u5217\u6570\u200b\n    ElemType e;                 //\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u503c\u200b\n}Triple;\ntypedef struct {\n    Triple data[MAXSIZE];       //\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\n    int m,n, len;               //\u200b\u77e9\u9635\u200b\u7684\u200b\u884c\u6570\u200b\u3001\u200b\u5217\u6570\u200b\u548c\u200b\u975e\u200b\u96f6\u200b\u4e2a\u6570\u200b\n}TSMatrix;\n//\u200b\u8f93\u51fa\u200b\u77e9\u9635\u200b\nvoid print(TSMatrix a){\n    int k;\n    for (int i = 0; i &lt; a.m;i++) {\n        for (int j = 0; j &lt; a.n;j++) {\n            k = 0;\n            for(int h=0;h&lt;a.len;h++){\n                if (i == a.data[h].row &amp;&amp; j==a.data[h].col) {\n                    cout &lt;&lt;\"     \"&lt;&lt; a.data[h].e;\n                    k = 1;\n                }\n            }\n            if (k == 0) {\n                cout &lt;&lt; \"     \" &lt;&lt; k;\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n}\n//\u200b\u8f6c\u7f6e\u200b\nTSMatrix TransTSMatrixSlow(TSMatrix a,TSMatrix b) {\n    int q;\n    b.m = a.n;\n    b.n = a.m;\n    b.len = a.len;\n    if (b.len) {\n        q = 0;                          //B\u200b\u4e2d\u200b\u7684\u200b\u975e\u200b\u96f6\u200b\u4e2a\u6570\u200b\n        for (int j = 0; j &lt; a.n;j++) {          //\u200b\u6309\u5217\u200b\u8f6c\u7f6e\u200b\n            for (int h = 0; h &lt; a.len; h++) {\n                if (j==a.data[h].col) {         //\u200b\u672c\u5217\u200b\u4e2d\u200b\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\n                    b.data[q].row = a.data[h].col;\n                    b.data[q].col = a.data[h].row;\n                    b.data[q].e = a.data[h].e;\n                    q++;\n                }\n            }\n        }\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u77e9\u9635\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u65e0\u9700\u200b\u8f6c\u7f6e\u200b\uff01\" &lt;&lt; endl;\n    }\n    return b;\n}\n//\u200b\u5feb\u901f\u200b\u8f6c\u7f6e\u200b\nTSMatrix TransTSMatrixFast(TSMatrix a, TSMatrix b) {\n    int number[MAXSIZE],position[MAXSIZE];\n    b.m = a.n;\n    b.n = a.m;\n    b.len = a.len;\n    for (int j = 0; j &lt; a.n;j++) {\n        number[j] = 0;      //\u200b\u5c06\u200b\u77e9\u9635\u200ba\u200b\u6bcf\u200b\u4e00\u5217\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\u521d\u59cb\u5316\u200b\u4e3a\u200b\u96f6\u200b\n    }\n    for (int t = 0; t &lt; a.len; t++) {\n        number[a.data[t].col]++;        //\u200b\u6c42\u200b\u6bcf\u200b\u4e00\u5217\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\n    }\n    position[0] = 0;\n    for (int j = 1; j &lt; a.n; j++) { //a.data[]\u200b\u7684\u200b\u7b2c\u200bj\u200b\u5217\u200b\u7b2c\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u5728\u200bb.data\u200b\u4e2d\u200b\u7684\u200b\u5e8f\u53f7\u200b\n        position[j] = position[j - 1] + number[j - 1];\n    }\n    int j,q;\n    for (int p = 0; p &lt; a.len; p++) {   //\u200b\u6c42\u200b\u8f6c\u7f6e\u200b\u77e9\u9635\u200bb\u200b\u7684\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\n        j = a.data[p].col;\n        q = position[j];\n        b.data[q].row = a.data[p].col;\n        b.data[q].col = a.data[p].row;\n        b.data[q].e = a.data[p].e;\n        position[j]++;\n    }\n    return b;\n}\nvoid main() {\n    TSMatrix A, B;\n    A.m = 5;\n    A.n = 6;\n    A.len = 7;\n    A.data[0].row = 0; A.data[0].col = 1; A.data[0].e = 6;\n    A.data[1].row = 0; A.data[1].col = 5; A.data[1].e = -2;\n    A.data[2].row = 2; A.data[2].col = 3; A.data[2].e = -8;\n    A.data[3].row = 3; A.data[3].col = 1; A.data[3].e = 3;\n    A.data[4].row = 3; A.data[4].col = 5; A.data[4].e = 7;\n    A.data[5].row = 4; A.data[5].col = 0; A.data[5].e = -12;\n    A.data[6].row = 4; A.data[6].col = 2; A.data[6].e = 9;\n    cout &lt;&lt; \"\u200b\u77e9\u9635\u200bA\u200b\u4e3a\u200b\uff1a\" &lt;&lt; endl;\n    print(A);\n    cout &lt;&lt; \"\u200b\u6c42\u200b\u7cfb\u6570\u200b\u77e9\u9635\u200bA\u200b\u7684\u200b\u8f6c\u7f6e\u200b\u77e9\u9635\u200bB\uff1f\" &lt;&lt; endl;\n    B = TransTSMatrixSlow(A,B);\n    cout &lt;&lt; \"\u200b\u8f6c\u7f6e\u200b\u77e9\u9635\u200bB\u200b\u4e3a\u200b:\" &lt;&lt; endl;\n    print(B);\n    cout &lt;&lt; endl;\n    B = TransTSMatrixFast(A,B);\n    print(B);\n    system(\"pause\");\n}\n</code></pre>"},{"location":"DataStruct/13-%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9-%E4%B8%89%E5%85%83%E7%BB%84-%E7%9B%B8%E4%B9%98/","title":"\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u538b\u7f29\u200b-\u200b\u4e09\u5143\u7ec4\u200b\uff08\u200b\u76f8\u4e58\u200b\uff09","text":"<ul> <li>\u200b\u56e0\u4e3a\u200bposition[i]\u200b\u8868\u793a\u200bB\u200b\u7684\u200b\u7b2c\u200bi\u200b\u884c\u200b\u7b2c\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u5728\u200bB.data\u200b\u4e2d\u200b\u7684\u200b\u5e8f\u53f7\u200b\uff0cposition[i+1]-1\u200b\u5c31\u200b\u8868\u793a\u200b\u7b2c\u200bi\u200b\u884c\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u5728\u200bB.data\u200b\u4e2d\u200b\u7684\u200b\u5e8f\u53f7\u200b\u3002\u200b\u4e3a\u4e86\u200b\u8868\u793a\u200bB\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u884c\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u5728\u200bB.data\u200b\u4e2d\u200b\u7684\u200b\u5e8f\u53f7\u200b\uff0c\u200b\u9700\u5728\u200b\u5411\u91cf\u200bposition\u200b\u4e2d\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u5206\u91cf\u200b\uff0c\u200b\u5373\u200bB\u200b\u7684\u200b\u7b2c\u200bm2\u200b\u884c\u200b\u7b2c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u867d\u7136\u200bB\u200b\u4e2d\u200b\u65e0\u200b\u7b2c\u200bm2\u200b\u884c\u200b\u3002</li> <li>\u200b\u77e9\u9635\u200b\u76f8\u4e58\u200b\u7684\u200b\u57fa\u672c\u200b\u601d\u60f3\u200b\u662f\u200b\uff1a\u200b\u5bf9\u200bA.data\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200bA.data.e\uff0c\u200b\u627e\u5230\u200b\u6ee1\u8db3\u200bA.data[p].col=B.data[q].row\u200b\u7684\u200b\u6240\u6709\u200bq\uff0c\u200b\u5c06\u200bA.data[p].e\u200b\u4e0e\u200bB.data[q].e\u200b\u7684\u200b\u4e58\u79ef\u200b\u52a0\u200b\u5230\u200b\u9002\u5f53\u200b\u7684\u200b\u6c42\u200b\u7d2f\u79ef\u200b\u548c\u200b\u7684\u200b\u53d8\u91cf\u200b\u4e0a\u200b\u3002</li> <li>\u200b\u4e24\u4e2a\u200b\u7a00\u758f\u200b\u76f8\u4e58\u200b\u7684\u200b\u7ed3\u679c\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u662f\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\uff0c\u200b\u76f8\u4e58\u200b\u7684\u200b\u4e24\u4e2a\u200b\u5206\u91cf\u200bA[i][k] x B[k][j]\u200b\u4e0d\u4e3a\u200b\u96f6\u200b\uff0c\u200b\u4f46\u200b\u7d2f\u52a0\u200b\u7684\u200b\u7ed3\u679c\u200b\u53ef\u80fd\u200b\u4e3a\u200b\u96f6\u200b\u3002</li> </ul> <p>\u200b\u6539\u8fdb\u200b\u7684\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\u7684\u200b\u7c7b\u578b\u200b\u8bf4\u660e\u200b\u5982\u4e0b\u200b\uff1a <pre><code>#define MAXSIZE 1000            //\u200b\u7528\u6237\u200b\u81ea\u5b9a\u4e49\u200b\u4e09\u5143\u7ec4\u200b\u6700\u5927\u200b\u4e2a\u6570\u200b\n#define MAXROW 100\ntypedef int ElemType;\ntypedef struct {                //\u200b\u4e09\u5143\u7ec4\u200b\n    int row,col;                //\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u884c\u6570\u200b\u548c\u200b\u5217\u6570\u200b\n    ElemType e;                 //\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u503c\u200b\n}Triple;\n\ntypedef struct {\n    Triple data[MAXSIZE];       //\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\n    int position[MAXROW];       //\u200b\u5404\u884c\u200b\u7b2c\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u8868\u200b\n    int m,n, len;               //\u200b\u77e9\u9635\u200b\u7684\u200b\u884c\u6570\u200b\u3001\u200b\u5217\u6570\u200b\u548c\u200b\u975e\u200b\u96f6\u200b\u4e2a\u6570\u200b\n}TSMatrix;\n</code></pre></p>"},{"location":"DataStruct/13-%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9-%E4%B8%89%E5%85%83%E7%BB%84-%E7%9B%B8%E4%B9%98/#_1","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#define MAXSIZE 1000            //\u200b\u7528\u6237\u200b\u81ea\u5b9a\u4e49\u200b\u4e09\u5143\u7ec4\u200b\u6700\u5927\u200b\u4e2a\u6570\u200b\n#define MAXROW 100\ntypedef int ElemType;\nint sum[10];\ntypedef struct {                //\u200b\u4e09\u5143\u7ec4\u200b\n    int row,col;                //\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u884c\u6570\u200b\u548c\u200b\u5217\u6570\u200b\n    ElemType e;                 //\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u503c\u200b\n}Triple;\ntypedef struct {\n    Triple data[MAXSIZE];       //\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\n    int position[MAXROW];       //\u200b\u5404\u884c\u200b\u7b2c\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u8868\u200b\n    int m,n, len;               //\u200b\u77e9\u9635\u200b\u7684\u200b\u884c\u6570\u200b\u3001\u200b\u5217\u6570\u200b\u548c\u200b\u975e\u200b\u96f6\u200b\u4e2a\u6570\u200b\n}TSMatrix;\n//\u200b\u8f93\u51fa\u200b\u77e9\u9635\u200b\nvoid print(TSMatrix a){\n    int k;\n    for (int i = 0; i &lt; a.m;i++) {\n        for (int j = 0; j &lt; a.n;j++) {\n            k = 0;\n            for(int h=0;h&lt;a.len;h++){\n                if (i == a.data[h].row &amp;&amp; j==a.data[h].col) {\n                    cout &lt;&lt;\"     \"&lt;&lt; a.data[h].e;\n                    k = 1;\n                }\n            }\n            if (k == 0) {\n                cout &lt;&lt; \"     \" &lt;&lt; k;\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n}\n//\u200b\u91c7\u7528\u200b\u6539\u8fdb\u200b\u7684\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\u8868\u793a\u6cd5\u200b\uff0c\u200b\u6c42\u200b\u77e9\u9635\u200b\u4e58\u79ef\u200bC=A*B\nvoid MulMatrix(TSMatrix A,TSMatrix B,TSMatrix *C) {\n    int p=0,crow,ccol,brow;\n    if (A.n != B.m) {\n        cout &lt;&lt; \"\u200b\u77e9\u9635\u200b\u65e0\u6cd5\u200b\u76f8\u4e58\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        C-&gt;m = A.m;\n        C-&gt;n = B.n;\n        C-&gt;len = 0;\n        while (p &lt; A.len) {     //\u200b\u5904\u7406\u200bA\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\n            crow = A.data[p].row;\n            for ( ccol = 0; ccol &lt; C-&gt;n; ccol++) sum[ccol] = 0; //\u200b\u5f53\u524d\u200b\u884c\u200b\u5404\u200b\u5143\u7d20\u200b\u6e05\u96f6\u200b\n            while (p&lt;A.len &amp;&amp; A.data[p].row==crow) {\n                brow = A.data[p].col;           //B\u200b\u7684\u200b\u5f53\u524d\u200b\u884c\u200b\u7b49\u4e8e\u200bA\u200b\u7684\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\u7684\u200b\u5217\u200b\u53f7\u200b\n                for (int q = B.position[brow]; q &lt; B.position[brow + 1];q++) {  //\u200b\u5904\u7406\u200bB\u200b\u5f53\u524d\u200b\u884c\u200b\n                    ccol = B.data[q].col;   //\u200b\u4e58\u79ef\u200b\u5143\u7d20\u200b\u5728\u200bC\u200b\u4e2d\u200b\u7684\u200b\u5217\u200b\u53f7\u200b\n                    sum[ccol] += A.data[p].e*B.data[q].e;\n                }\n                p++;\n            }\n            for (ccol = 0; ccol &lt; C-&gt;n; ccol++) {\n                //\u200b\u538b\u7f29\u200b\u5b58\u50a8\u200b\u8be5\u884c\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u5230\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200bC.data\u200b\u4e2d\u200b\n                if (sum[ccol]) {\n                    C-&gt;data[C-&gt;len].row = crow;\n                    C-&gt;data[C-&gt;len].col = ccol;\n                    C-&gt;data[C-&gt;len].e = sum[ccol];\n                    C-&gt;len++;\n                }\n            }\n        }\n    }\n}\n\nvoid main() {\n    TSMatrix A, B, C;\n    A.m = 4; A.n = 4; A.len = 2;\n    A.data[0].row = 1; A.data[0].col = 1; A.data[0].e = 2; A.position[1] = 0;\n    A.data[1].row = 2; A.data[1].col = 3; A.data[1].e = 3; A.position[2] = 1;\n    A.position[3] = 2;\n\n    B.m = 4; B.n = 4; B.len = 3;\n    B.data[0].row = 1; B.data[0].col = 1; B.data[0].e = 2; B.position[1] = 0;\n    B.data[1].row = 2; B.data[1].col = 3; B.data[1].e = 3; B.position[2] = 1;\n    B.data[2].row = 3; B.data[2].col = 2; B.data[2].e = 2; B.position[3] = 2;\n    B.position[4] = 3;\n\n    MulMatrix(B, B, &amp;C);\n    print(C);\n    system(\"pause\");\n}\n</code></pre>"},{"location":"DataStruct/14-%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9-%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8/","title":"\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u538b\u7f29\u200b-\u200b\u5341\u5b57\u200b\u94fe\u8868","text":"<p>\u200b\u5229\u7528\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\u8868\u793a\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\u65f6\u200b\uff0c\u200b\u82e5\u200b\u77e9\u9635\u200b\u7684\u200b\u8fd0\u7b97\u200b\u4f7f\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\u53d1\u751f\u53d8\u5316\u200b\uff0c\u200b\u5c31\u200b\u5fc5\u987b\u200b\u5bf9\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\u8fdb\u884c\u200b\u63d2\u5165\u200b\u3001\u200b\u5220\u9664\u200b\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u5fc5\u987b\u200b\u79fb\u52a8\u200b\u4e09\u5143\u7ec4\u200b\u8868\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u7531\u4e8e\u200b\u4e09\u5143\u7ec4\u200b\u8868\u662f\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8fd9\u4e9b\u200b\u64cd\u4f5c\u200b\u5c06\u200b\u82b1\u8d39\u200b\u5927\u91cf\u200b\u7684\u200b\u65f6\u95f4\u200b\uff0c\u200b\u5341\u5b57\u200b\u94fe\u8868\u200b\u53ef\u4ee5\u200b\u514b\u670d\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\u7684\u200b\u4e0a\u8ff0\u200b\u7f3a\u70b9\u200b\u3002</p> <p>\u200b\u5728\u200b\u5341\u5b57\u200b\u94fe\u8868\u200b\u4e2d\u200b\uff0c\u200b\u6570\u7ec4\u200b\u7684\u200b\u6bcf\u200b\u4e00\u884c\u200b\u7684\u200b\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u6784\u6210\u200b\u4e00\u4e2a\u200b\u5e26\u5934\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\uff0c\u200b\u6bcf\u200b\u4e00\u5217\u200b\u7684\u200b\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u4e5f\u200b\u6784\u6210\u200b\u4e00\u4e2a\u200b\u5e26\u5934\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u7ec4\u7ec7\u200b\u65b9\u6cd5\u200b\u4f7f\u200b\u540c\u4e00\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u65e2\u200b\u5904\u5728\u200b\u67d0\u200b\u4e00\u884c\u200b\u7684\u200b\u94fe\u8868\u200b\u4e2d\u200b\uff0c\u200b\u53c8\u200b\u5904\u5728\u200b\u67d0\u200b\u4e00\u5217\u200b\u7684\u200b\u94fe\u8868\u200b\u4e2d\u200b\u3002\u200b\u56e0\u6b64\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u4e2d\u200b\u8bbe\u6709\u200b\u4e24\u4e2a\u200b\u6307\u9488\u200b\u57df\u200b\uff1a\u200b\u6307\u9488\u200b\u57df\u200bdown\u200b\u6307\u5411\u200b\u5176\u200b\u540c\u5217\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff0cright\u200b\u57df\u200b\u6307\u5411\u200b\u5176\u200b\u540c\u884c\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u3002\u200b\u9664\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u57df\u5916\u200b\uff0c\u200b\u7ed3\u70b9\u200b\u4e2d\u200b\u8fd8\u200b\u5e94\u200b\u8bbe\u6709\u200b\u5b58\u653e\u200b\u8be5\u200b\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u884c\u503c\u200b\u3001\u200b\u5217\u503c\u200b\u3001\u200b\u5143\u7d20\u200b\u503c\u200b\u7684\u200b\u57df\u200b\uff0c\u200b\u8bbe\u200b\u4ed6\u4eec\u200b\u5206\u522b\u200b\u4e3a\u200brow\u3001col\u200b\u548c\u200be\u3002\u200b\u5341\u5b57\u200b\u94fe\u8868\u200b\u4e2d\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u7684\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a </p> <p>\u200b\u4e3a\u4e86\u200b\u4f7f\u200b\u6574\u4e2a\u200b\u94fe\u8868\u200b\u4e2d\u200b\u7684\u200b\u7ed3\u70b9\u200b\u7ed3\u6784\u200b\u4e00\u81f4\u200b\uff0c\u200b\u6211\u4eec\u200b\u89c4\u5b9a\u200b\u884c\u200b\uff08\u200b\u5217\u200b\uff09\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u7684\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u548c\u8868\u200b\u4e2d\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u7ed3\u70b9\u200b\u4e00\u6837\u200b\uff0c\u200b\u4e5f\u200b\u8bbe\u200b5\u200b\u4e2a\u57df\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5747\u200b\u7f6e\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u7684\u200b\u884c\u57df\u200b\u548c\u200b\u5217\u57df\u200b\u4e3a\u200b\u96f6\u200b\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u884c\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u4e0d\u200b\u4f7f\u7528\u200bdown\u200b\u57df\u200b\uff0c\u200b\u800c\u200b\u5217\u8868\u200b\u5934\u200b\u7ed3\u70b9\u200b\u4e0d\u200b\u4f7f\u7528\u200bright\u200b\u57df\u200b\uff0c\u200b\u56e0\u6b64\u200b\uff0c\u200b\u7b2c\u200bi\u200b\u884c\u200b\u7684\u200b\u884c\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u548c\u200b\u7b2c\u200bi\u200b\u5217\u200b\u7684\u200b\u5217\u8868\u200b\u5934\u200b\u7ed3\u70b9\u200b\u53ef\u4ee5\u200b\u5408\u7528\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u79f0\u4e3a\u200b\u884c\u200b\u5217\u8868\u200b\u5934\u200b\u7ed3\u70b9\u200b\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u884c\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6570\u636e\u200b\u57df\u200b\u6ca1\u6709\u200b\u610f\u4e49\u200b\u7684\u200b\uff0c\u200b\u800c\u4e14\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u5c06\u884c\u200b\u5217\u8868\u200b\u5934\u200b\u7ed3\u70b9\u200b\u7ec4\u7ec7\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u4e2d\u200b\uff0c\u200b\u56e0\u6b64\u200b\uff0c\u200b\u4f7f\u7528\u200bC\u200b\u8bed\u8a00\u200b\u4e2d\u5171\u200b\u7528\u4f53\u200b\u7684\u200b\u6982\u5ff5\u200b\uff0c\u200b\u5c06\u200b\u8fd9\u4e2a\u200b\u57df\u200b\u4f5c\u4e3a\u200b\u6307\u9488\u200b\u57df\u200b\uff0c\u200b\u5c06\u200b\u5404\u884c\u200b\u5217\u8868\u200b\u5934\u200b\u94fe\u63a5\u200b\u8d77\u6765\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u4e3a\u200b\u6574\u4e2a\u200b\u5341\u5b57\u200b\u94fe\u8868\u200b\u518d\u8bbe\u200b\u4e00\u4e2a\u200b\u603b\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u5176\u200brow\u200b\u57df\u200b\u548c\u200bcol\u200b\u57df\u200b\u7684\u200b\u503c\u200b\u5206\u522b\u200b\u662f\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u884c\u6570\u200b\u548c\u200b\u5217\u6570\u200b\uff0c\u200b\u884c\u5217\u200b\u6307\u9488\u200b\u65e0\u200b\u610f\u4e49\u200b\uff0c\u200b\u7528\u200b\u6307\u9488\u200b\u57df\u200b\uff08\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5143\u7d20\u200b\u503c\u57df\u200b\uff0c\u200b\u884c\u200b\u5217\u8868\u200b\u5934\u200b\u7ed3\u70b9\u200b\u76f8\u94fe\u200b\u7684\u200b\u6307\u9488\u200b\u57df\u200b\uff09\u200b\u6307\u5411\u200b\u7b2c\u4e00\u4e2a\u200b\u5217\u8868\u200b\u5934\u200b\u7ed3\u70b9\u200b\u3002\u200b\u8bbe\u200bhead\u200b\u4e3a\u200b\u6307\u5411\u200b\u603b\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u56e0\u6b64\u200b\uff0c\u200b\u53ea\u8981\u200b\u7ed9\u5b9a\u200bhead\u200b\u6307\u9488\u200b\u503c\u200b\uff0c\u200b\u4fbf\u200b\u53ef\u200b\u53d6\u5f97\u200b\u7a00\u758f\u200b\u77e9\u9635\u200b\u7684\u200b\u5168\u90e8\u200b\u4fe1\u606f\u200b\u4e86\u200b\u3002</p> <p></p>"},{"location":"DataStruct/14-%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9-%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8/#_1","title":"\u5341\u5b57\u200b\u94fe\u8868\u200b\u7684\u200b\u7ed3\u6784\u200b\u7c7b\u578b\u200b\u8bf4\u660e\u200b\uff1a","text":"<p><pre><code>typedef  int ElemType;\ntypedef struct OLNode{\n    int row, col;\n    union \n    {\n        struct OLNode *next;    //\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u4f7f\u7528\u200bnext\u200b\u57df\u200b\n        ElemType e;             //\u200b\u8868\u4e2d\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u4f7f\u7528\u200be\u200b\u57df\u200b\n    }uval;\n    struct OLNode *down, *right;\n}OLNode,*OLink;\n</code></pre> \u200b\u5efa\u7acb\u200b\u5341\u5b57\u200b\u94fe\u8868\u200b\u7684\u200b\u7b97\u6cd5\u200b\u5206\u4e3a\u200b\u4e24\u6b65\u200b\uff1a - \u200b\u5efa\u7acb\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u3002\u200b\u8bfb\u5165\u200b\u77e9\u9635\u200b\u7684\u200b\u884c\u6570\u200b\u3001\u200b\u5217\u6570\u200b\u548c\u200b\u975e\u200b\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\u3002\u200b\u56e0\u4e3a\u200b\u884c\u200b\u3001\u200b\u5217\u200b\u94fe\u8868\u200b\u5171\u4eab\u200b\u540c\u200b\u4e00\u7ec4\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u7684\u200b\u4e2a\u6570\u200b\u5e94\u662f\u200b\u884c\u6570\u200b\u3001\u200b\u5217\u6570\u200b\u4e2d\u200b\u7684\u200b\u8f83\u5927\u200b\u8005\u200b\u3002\u200b\u5efa\u7acb\u200b\u6574\u4e2a\u200b\u5341\u5b57\u200b\u94fe\u8868\u200b\u7684\u200b\u5934\u200b\u7ed3\u70b9\u200b*head\u200b\u4ee5\u53ca\u200b\u6240\u6709\u200b\u884c\u200b\u3001\u200b\u5217\u200b\u94fe\u8868\u200b\u7684\u200b\u5934\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u5c06\u5934\u200b\u7ed3\u70b9\u200b\u901a\u8fc7\u200bnext\u200b\u57df\u200b\u94fe\u63a5\u200b\u6210\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u3002\u200b\u521d\u59cb\u200b\u65f6\u200b\u6bcf\u200b\u4e00\u884c\u200b\u3001\u200b\u5217\u200b\u94fe\u8868\u200b\u90fd\u200b\u662f\u200b\u7a7a\u200b\u7684\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u3002</p> <ul> <li>\u200b\u4f9d\u6b21\u200b\u8bfb\u5165\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e09\u5143\u7ec4\u200b\u8868\u200b\uff08row\uff0ccol\uff0ce\uff09\uff0c\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b*p\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u5176\u200b\u63d2\u5165\u200b\u5230\u200b\u7b2c\u200brow\u200b\u884c\u200b\u7684\u200b\u884c\u200b\u94fe\u8868\u200b\u7684\u200b\u6b63\u786e\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u7b2c\u200bcol\u200b\u5217\u200b\u7684\u200b\u5217\u200b\u94fe\u8868\u200b\u7684\u200b\u6b63\u786e\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\u3002p\u200b\u7684\u200b\u6b63\u786e\u200b\u4f4d\u7f6e\u200b\u5e94\u4e3a\u200b\uff1a\u200b\u5728\u200b\u884c\u200b\u94fe\u8868\u200b\u4e0a\u200b\uff0c\u200b\u9996\u5148\u200b\u67e5\u627e\u200b\u5230\u200b\u7b2c\u200brow\u200b\u884c\u200b\u7684\u200b\u5934\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u7136\u540e\u200b\u6cbf\u7740\u200b\u7ed3\u70b9\u200b\u7684\u200bright\u200b\u57df\u200b\u627e\u5230\u200b\u7b2c\u4e00\u4e2a\u200b\u5217\u53f7\u200b\u5927\u4e8e\u200bcol\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff08q-&gt;right\uff09,\u200b\u800c\u200b*\uff08q-&gt;right\uff09\u200b\u5373\u200b\u4e3a\u200b*p\u200b\u53ca\u200b\u7ed3\u70b9\u200b\u7684\u200b\u540e\u7ee7\u200b\uff0c*q\u200b\u5373\u200b\u4e3a\u200b*p\u200b\u7ed3\u70b9\u200b\u7684\u200b\u524d\u9a71\u200b\uff0c*p\u200b\u5e94\u200b\u63d2\u5165\u200b\u5230\u200b*q\u200b\u7ed3\u70b9\u200b\u4e4b\u540e\u200b\u3002\u200b\u5982\u679c\u200b\u884c\u200b\u94fe\u8868\u200b\u4e0a\u200b\u6240\u6709\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5217\u200b\u53f7\u200b\u5747\u200b\u5c0f\u4e8e\u200bcol\uff0c\u200b\u5219\u200b*p\u200b\u5e94\u200b\u63d2\u5165\u200b\u5230\u884c\u200b\u94fe\u8868\u200b\u7684\u200b\u8868\u5c3e\u200b\u3002\u200b\u67e5\u627e\u200b\u7b2c\u200bcol\u200b\u5217\u200b\u7684\u200b\u5217\u200b\u94fe\u8868\u200b\u7684\u200b\u6b63\u786e\u200b\u63d2\u5165\u200b\u4f4d\u7f6e\u200b\u4e0e\u200b\u6b64\u200b\u7c7b\u4f3c\u200b\u3002</li> </ul>"},{"location":"DataStruct/14-%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9-%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#define  max    100\ntypedef  int ElemType;\ntypedef struct OLNode{\n    int row, col;\n    union \n    {\n        struct OLNode *next;    //\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u4f7f\u7528\u200bnext\u200b\u57df\u200b\n        ElemType e;             //\u200b\u8868\u4e2d\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u4f7f\u7528\u200be\u200b\u57df\u200b\n    }uval;\n    struct OLNode *down, *right;\n}OLNode,*OLink;\nOLink CreateCrossList() {       //\u200b\u5efa\u7acb\u200b\u5341\u5b57\u200b\u94fe\u8868\u200b\n    int m, n, t,row,col,e, maxmn;\n    OLink h[max],p,q;\n    cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u884c\u200b\u6570\u200b\u3001\u200b\u5217\u6570\u200b\u4ee5\u53ca\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\" &lt;&lt; endl;\n    cin &gt;&gt; m &gt;&gt; n &gt;&gt; t;\n    if (m &gt; n) maxmn = m;\n    else maxmn = n;\n    OLink head = (OLNode*)malloc(sizeof(OLNode));\n    head-&gt;row = m;\n    head-&gt;col = n;\n    h[maxmn] = head;        //h[maxmn+1]\u200b\u4e3a\u200b\u4e00\u7ec4\u200b\u6307\u793a\u200b\u884c\u200b\u5217\u8868\u200b\u5934\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6307\u9488\u200b\n    for (int i = 0; i &lt; maxmn;i++) {    //\u200b\u5efa\u7acb\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b   \n        p= (OLNode*)malloc(sizeof(OLNode));\n        p-&gt;row = 0; p-&gt;col = 0;\n        p-&gt;down = p; p-&gt;right = p;\n        h[i] = p;\n        if (i == 0) head-&gt;uval.next = p;\n        else h[i - 1]-&gt;uval.next = p;\n    }\n    p-&gt;uval.next = head;        //\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u6307\u5411\u200b\u8868\u5934\u200b\u7ed3\u70b9\u200b*head\n    for (int num = 1; num &lt;= t;num++) {\n        cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u4e00\u4e2a\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u4e09\u5143\u7ec4\u200b\" &lt;&lt; endl;\n        cin &gt;&gt; row &gt;&gt; col &gt;&gt; e;\n        p= (OLNode*)malloc(sizeof(OLNode));  //\u200b\u751f\u6210\u200b\u7ed3\u70b9\u200b\n        p-&gt;row = row;\n        p-&gt;col = col;\n        p-&gt;uval.e = e;\n        q = h[row];\n        while (q-&gt;right!=h[row] &amp;&amp; q-&gt;right-&gt;col&lt;col) { //\u200b\u67e5\u200b*p\u200b\u5728\u200b\u7b2c\u200brow\u200b\u884c\u200b\u7684\u200b\u63d2\u5165\u200b\u4f4d\u7f6e\u200b\n            q = q-&gt;right;\n        }\n        p-&gt;right = q-&gt;right; q-&gt;right = p;  //\u200b\u5c06\u200b*p\u200b\u63d2\u5165\u200b\u5230\u200b\u7b2c\u200brow\u200b\u884c\u200b\u7684\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u4e2d\u200b\n        q = h[col];\n        while (q-&gt;down != h[col] &amp;&amp; q-&gt;down-&gt;row &lt; row) {//\u200b\u67e5\u200b*p\u200b\u5728\u200b\u7b2c\u200bcol\u200b\u5217\u200b\u7684\u200b\u63d2\u5165\u200b\u4f4d\u7f6e\u200b\n\n            q = q-&gt;down;\n        }\n        p-&gt;down = q-&gt;down; q-&gt;down = p;  //\u200b\u5c06\u200b*p\u200b\u63d2\u5165\u200b\u5230\u200b\u7b2c\u200bcol\u200b\u5217\u200b\u7684\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u4e2d\u200b\n    }\n    return head;\n}\nvoid print(OLink head) {\n    OLink p = head-&gt;uval.next;\n    int m = 0,n = 0;\n    while (m != head-&gt;row) {\n        p = p-&gt;right;\n        while (n != head-&gt;col) {\n            if (m == p-&gt;row &amp;&amp; n == p-&gt;col &amp;&amp; p-&gt;uval.e!=NULL) {\n                cout &lt;&lt; p-&gt;uval.e &lt;&lt; \" \";\n                p = p-&gt;right;\n            }\n            else {\n                cout &lt;&lt; \"0 \";\n            }\n            n++;\n        }\n        n = 0;\n        m++;\n        p = p-&gt;uval.next;\n        cout &lt;&lt; endl;\n    }\n}\nvoid main() {\n    OLink list;\n    list = CreateCrossList();\n    cout &lt;&lt; \"\u200b\u94fe\u8868\u200b\u5185\u5bb9\u200b\u4e3a\u200b:\" &lt;&lt; endl;\n    print(list);\n    system(\"pause\");\n}\n</code></pre>"},{"location":"DataStruct/15-%E6%A0%91/","title":"\u6811","text":""},{"location":"DataStruct/15-%E6%A0%91/#_2","title":"\u5b9a\u4e49","text":"<p>\u200b\u6811\u662f\u200b\u7531\u200bn\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u6784\u6210\u200b\u7684\u200b\u6709\u9650\u200b\u96c6\u5408\u200bT\u3002\u200b\u5982\u679c\u200b\u7ed3\u70b9\u200b\u4e3a\u200b\u96f6\u200b\uff0c\u200b\u5219\u200b\u79f0\u4e3a\u200b\u7a7a\u6811\u200b\u3002\u200b\u5426\u5219\u200b\uff0c\u200b\u4efb\u4f55\u200b\u4e00\u4e2a\u200b\u975e\u7a7a\u6811\u200b\u6ee1\u8db3\u200b\u4ee5\u4e0b\u200b\u4e24\u4e2a\u200b\u6761\u4ef6\u200b\uff1a - \u200b\u6709\u4e14\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u7279\u5b9a\u200b\u7684\u200b\u79f0\u4e3a\u200b\u6839\u200b\u7684\u200b\u7ed3\u70b9\u200b\u3002 - \u200b\u9664\u6839\u200b\u7ed3\u70b9\u200b\u4ee5\u5916\u200b\u7684\u200b\u5176\u5b83\u200b\u7ed3\u70b9\u200b\u88ab\u200b\u5206\u4e3a\u200bm\u200b\u4e2a\u200b\u4e92\u4e0d\u200b\u76f8\u4ea4\u200b\u7684\u200b\u6709\u9650\u200b\u96c6\u5408\u200bT1\uff0cT2\uff0cT3\uff0c, , , , Tm\uff0c\u200b\u5176\u4e2d\u200b\u6bcf\u4e2a\u200b\u96c6\u5408\u200b\u53c8\u200b\u662f\u200b\u4e00\u68f5\u6811\u200b\uff0c\u200b\u5e76\u200b\u79f0\u4e3a\u200b\u6839\u7684\u5b50\u200b\u6811\u200b\u3002 </p>"},{"location":"DataStruct/15-%E6%A0%91/#_3","title":"\u6811\u200b\u7684\u200b\u672f\u8bed\u200b\uff1a","text":"<ul> <li>\u200b\u7ed3\u70b9\u200b\uff1a\u200b\u5b83\u200b\u5305\u542b\u200b\u6570\u636e\u9879\u200b\u53ca\u200b\u6307\u5411\u200b\u5176\u5b83\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5206\u652f\u200b\u3002</li> <li>\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5ea6\u200b\uff1a\u200b\u7ed3\u70b9\u200b\u6240\u200b\u62e5\u6709\u200b\u7684\u200b\u5b50\u6811\u200b\u7684\u200b\u4e2a\u6570\u200b\u3002</li> <li>\u200b\u53f6\u200b\u7ed3\u70b9\u200b\uff1a\u200b\u6811\u200b\u4e2d\u5ea6\u200b\u4e3a\u200b0\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u53c8\u79f0\u200b\u7ec8\u7aef\u200b\u7ed3\u70b9\u200b\u3002</li> <li>\u200b\u975e\u200b\u7ec8\u7aef\u200b\u7ed3\u70b9\u200b\uff1a\u200b\u5ea6\u4e0d\u4e3a\u200b\u96f6\u200b\u7684\u200b\u7ed3\u70b9\u200b\u3002</li> <li>\u200b\u5b69\u5b50\u200b\uff1a\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u76f4\u63a5\u200b\u540e\u7ee7\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u8be5\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5b69\u5b50\u200b\u3002</li> <li>\u200b\u53cc\u4eb2\u200b\uff1a\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u76f4\u63a5\u200b\u524d\u9a71\u200b\u7ed3\u70b9\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u8be5\u200b\u7ed3\u70b9\u200b\u7684\u200b\u53cc\u4eb2\u200b\u7ed3\u70b9\u200b\u3002</li> <li>\u200b\u5144\u5f1f\u200b\uff1a\u200b\u540c\u4e00\u200b\u53cc\u4eb2\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5b69\u5b50\u200b\u7ed3\u70b9\u200b\u4e92\u200b\u79f0\u4e3a\u200b\u5144\u5f1f\u200b\u3002</li> <li>\u200b\u7956\u5148\u200b\uff1a\u200b\u4ece\u6839\u200b\u7ed3\u70b9\u200b\u5230\u200b\u8be5\u200b\u7ed3\u70b9\u200b\u6240\u200b\u7ecf\u200b\u5206\u652f\u200b\u4e0a\u200b\u7684\u200b\u6240\u6709\u200b\u7ed3\u70b9\u200b\u3002</li> <li>\u200b\u5b50\u5b59\u200b\uff1a\u200b\u4ee5\u200b\u67d0\u200b\u4e00\u200b\u7ed3\u70b9\u200b\u4e3a\u6839\u200b\u7684\u200b\u5b50\u6811\u4e2d\u200b\u4efb\u4e00\u200b\u7ed3\u70b9\u200b\u3002</li> <li>\u200b\u5c42\u6b21\u200b\uff1a\u200b\u5c06\u200b\u6839\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5c42\u6b21\u200b\u8bbe\u200b\u4e3a\u200b1\uff0c\u200b\u5176\u200b\u5b69\u5b50\u200b\u7ed3\u70b9\u200b\u5c42\u6b21\u200b\u4e3a\u200b2\uff0c\u200b\u4ee5\u6b64\u7c7b\u63a8\u200b\u3002</li> <li>\u200b\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\uff1a\u200b\u6811\u4e2d\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6700\u5927\u200b\u5c42\u6b21\u200b\u3002</li> <li>\u200b\u6709\u5e8f\u200b\u6811\u200b\u548c\u200b\u65e0\u5e8f\u200b\u6811\u200b\uff1a\u200b\u5982\u679c\u200b\u6811\u4e2d\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5404\u5b50\u200b\u6811\u200b\u4ece\u5de6\u5230\u53f3\u200b\u662f\u200b\u6709\u200b\u6b21\u5e8f\u200b\u7684\u200b\uff08\u200b\u4e0d\u80fd\u200b\u4e92\u6362\u200b\uff09\uff0c\u200b\u5219\u200b\u79f0\u200b\u8be5\u200b\u6811\u4e3a\u200b\u6709\u5e8f\u200b\u6811\u200b\uff0c\u200b\u5426\u5219\u200b\u79f0\u4e3a\u200b\u65e0\u5e8f\u200b\u6811\u200b\u3002</li> <li>\u200b\u68ee\u6797\u200b\uff1am\u200b\u68f5\u200b\u4e92\u4e0d\u200b\u76f8\u4ea4\u200b\u7684\u200b\u6811\u200b\u7684\u200b\u96c6\u5408\u200b\u3002\u200b\u5220\u9664\u200b\u4e00\u68f5\u6811\u200b\u7684\u200b\u7ed3\u70b9\u200b\u5c31\u200b\u4f1a\u200b\u5f97\u5230\u200b\u4e00\u4e2a\u200b\u68ee\u6797\u200b\uff0c\u200b\u53cd\u4e4b\u200b\uff0c\u200b\u82e5\u200b\u7ed9\u200b\u68ee\u6797\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u7edf\u4e00\u200b\u7684\u200b\u6839\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u68ee\u6797\u200b\u5c31\u200b\u53d8\u6210\u200b\u4e00\u68f5\u6811\u200b\u3002</li> </ul>"},{"location":"DataStruct/15-%E6%A0%91/#_4","title":"\u6811\u200b\u7684\u200b\u8868\u793a\u6cd5\u200b\uff1a","text":""},{"location":"DataStruct/15-%E6%A0%91/#_5","title":"\u6811\u200b\u7684\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\uff1a","text":""},{"location":"DataStruct/15-%E6%A0%91/#1","title":"1.\u200b\u53cc\u4eb2\u200b\u8868\u793a\u6cd5","text":"<p>\u200b\u5728\u200b\u4e00\u68f5\u6811\u200b\u4e2d\u200b\uff0c\u200b\u6839\u200b\u7ed3\u70b9\u200b\u65e0\u200b\u53cc\u4eb2\u200b\uff0c\u200b\u5176\u5b83\u200b\u4efb\u4f55\u200b\u7ed3\u70b9\u200b\u7684\u200b\u53cc\u4eb2\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\uff0c\u200b\u8fd9\u200b\u662f\u200b\u7531\u200b\u6811\u200b\u7684\u200b\u5b9a\u4e49\u200b\u51b3\u5b9a\u200b\u7684\u200b\u3002\u200b\u53cc\u4eb2\u200b\u8868\u793a\u6cd5\u200b\u6b63\u662f\u200b\u5229\u7528\u200b\u4e86\u200b\u6811\u200b\u7684\u200b\u8fd9\u79cd\u200b\u7279\u6027\u200b\uff0c\u200b\u5c06\u200b\u6811\u200b\u4e2d\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u4fe1\u606f\u200b\u5b58\u653e\u200b\u5728\u200b\u4e00\u4e2a\u200b\u4e66\u5e8f\u200b\u8868\u4e2d\u200b\uff0c\u200b\u7ed3\u70b9\u200b\u7684\u200b\u4fe1\u606f\u200b\u5305\u542b\u200b\u5143\u7d20\u200b\u6570\u636e\u200b\u503c\u200bdata\u200b\u548c\u200b\u7ed3\u70b9\u200b\u53cc\u4eb2\u200b\u5728\u200b\u8868\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200bparent\uff0c\u200b\u5176\u200b\u5f62\u5f0f\u200b\u8bf4\u660e\u200b\u5982\u4e0b\u200b\uff1a <pre><code>#define MAX_NODE 64     //\u200b\u7528\u6237\u200b\u5b9a\u4e49\u200b\u6700\u5927\u200b\u7ed3\u70b9\u200b\u6570\u200b\ntypedef char ElmeType;\ntypedef struct {       //\u200b\u6811\u200b\u7684\u200b\u53cc\u4eb2\u200b\u8868\u793a\u6cd5\u200b\u5b58\u50a8\u200b\u8868\u793a\u200b\n    ElmeType data;      //\u200b\u6570\u636e\u200b\u57df\u200b\n    int parent;         //\u200b\u53cc\u4eb2\u200b\u6307\u793a\u200b\u57df\u200b\n}Ptnode;\n\ntypedef struct {\n    Ptnode nodes[MAX_NODE];\n    int n;              //\u200b\u6811\u4e2d\u200b\u7684\u200b\u7ed3\u70b9\u200b\u4e2a\u6570\u200b\n}Ptree;\n</code></pre> </p>"},{"location":"DataStruct/15-%E6%A0%91/#2","title":"2.\u200b\u5b69\u5b50\u200b\u8868\u793a\u6cd5","text":"<p>\u200b\u628a\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5b69\u5b50\u200b\u6392\u5217\u200b\u8d77\u6765\u200b\uff0c\u200b\u5f62\u6210\u200b\u4e00\u4e2a\u200b\u94fe\u8868\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u5efa\u7acb\u200b\u4e00\u4e2a\u200b\u5b69\u5b50\u200b\u94fe\u8868\u200b\u3002\u200b\u53f6\u5b50\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5b69\u5b50\u200b\u94fe\u8868\u200b\u4e3a\u7a7a\u200b\u3002 <pre><code>#define MAX_NODE 64 \ntypedef char ElemType;\ntypedef struct Ctnode { //\u200b\u5b69\u5b50\u200b\u7ed3\u70b9\u200b\n    int child;\n    struct Ctnode *next;\n}*childlink;\ntypedef struct {\n    ElemType data;\n    childlink firstchild;\n}CTBox;\nCTBox nodes[MAX_NODE];\n</code></pre> </p>"},{"location":"DataStruct/15-%E6%A0%91/#3","title":"3.\u200b\u5b69\u5b50\u200b\u5144\u5f1f\u200b\u8868\u793a\u6cd5","text":"<p>\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u4e5f\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u4e8c\u53c9\u6811\u200b\u8868\u793a\u6cd5\u200b\uff0c\u200b\u5373\u7528\u200b\u4e8c\u53c9\u200b\u94fe\u8868\u200b\u4f5c\u4e3a\u200b\u6811\u200b\u7684\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u3002\u200b\u94fe\u8868\u200b\u4e2d\u200b\u7ed3\u70b9\u200b\u7684\u200b\u4e24\u4e2a\u200b\u94fe\u57df\u200b\u5206\u522b\u200b\u6307\u5411\u200b\u8be5\u200b\u7ed3\u70b9\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5b69\u5b50\u200b\u7ed3\u70b9\u200b\u548c\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5144\u5f1f\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u4e24\u4e2a\u200b\u94fe\u57df\u200b\u5206\u522b\u200b\u547d\u540d\u200b\u4e3a\u200bfirstchild\u200b\u548c\u200bnextsibling\u3002\u200b\u5176\u200b\u8bf4\u660e\u200b\u5982\u4e0b\u200b\uff1a <pre><code>typedef char ElemType;\ntypedef struct CSNode {\n    ElemType   data;\n    struct CSNode *firstchild, *nextsibling;\n}CSNode,*CSTree;\n</code></pre> </p>"},{"location":"DataStruct/15-%E6%A0%91/#_6","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#define MAX_NODE 64     //\u200b\u7528\u6237\u200b\u5b9a\u4e49\u200b\u6700\u5927\u200b\u7ed3\u70b9\u200b\u6570\u200b\ntypedef char ElemType;\ntypedef struct {       //\u200b\u6811\u200b\u7684\u200b\u53cc\u4eb2\u200b\u8868\u793a\u6cd5\u200b\u5b58\u50a8\u200b\u8868\u793a\u200b\n    ElemType data;      //\u200b\u6570\u636e\u200b\u57df\u200b\n    int parent;         //\u200b\u53cc\u4eb2\u200b\u6307\u793a\u200b\u57df\u200b\n}Ptnode;\ntypedef struct {\n    Ptnode nodes[MAX_NODE];\n    int n;              //\u200b\u6811\u4e2d\u200b\u7684\u200b\u7ed3\u70b9\u200b\u4e2a\u6570\u200b\n}Ptree;\nvoid TreeInit(Ptree *T) {   //\u200b\u521d\u59cb\u5316\u200b\n    T-&gt;nodes[MAX_NODE];\n    T-&gt;n = 0;\n}\nvoid TreeChild(Ptree *T, ElemType x) {  //\u200b\u6c42\u5b50\u200b\u6811\u200b\u6570\u91cf\u200b\n    int num=0,flag=0;\n    for (int i = 0; i &lt; T-&gt;n;i++) {\n        if (T-&gt;nodes[i].data == x) {\n            num = i;\n            break;\n         }\n    }\n    for (int i = 0; i &lt; T-&gt;n; i++) {\n        if (T-&gt;nodes[i].parent == num) {\n            flag++;\n        }\n    }\n    cout &lt;&lt; \"\u200b\u5b50\u6811\u200b\u7684\u200b\u6570\u91cf\u200b\u4e3a\u200b:\" &lt;&lt; flag &lt;&lt; endl;\n}\nvoid TreeBuild(Ptree *T) {          //\u200b\u6784\u9020\u200b\u975e\u7a7a\u6811\u200b\n    //\u200b\u6811\u200b\uff1aA(B(D,E),C(F,G,H))\n    T-&gt;n = 8;\n    T-&gt;nodes[0].data = 'A';\n    T-&gt;nodes[0].parent = -1;\n    T-&gt;nodes[1].data = 'B';\n    T-&gt;nodes[1].parent = 0;\n    T-&gt;nodes[2].data = 'C';\n    T-&gt;nodes[2].parent = 0;\n    T-&gt;nodes[3].data = 'D';\n    T-&gt;nodes[3].parent = 1;\n    T-&gt;nodes[4].data = 'E';\n    T-&gt;nodes[4].parent = 1;\n    T-&gt;nodes[5].data = 'F';\n    T-&gt;nodes[5].parent = 2;\n    T-&gt;nodes[6].data = 'G';\n    T-&gt;nodes[6].parent = 2;\n    T-&gt;nodes[7].data = 'H';\n    T-&gt;nodes[7].parent = 2;\n}\nvoid TreeClear(Ptree *T){           //\u200b\u6e05\u7a7a\u200b\u6811\u200b\n    T-&gt;n = 0;\n    cout &lt;&lt; \"\u200b\u6e05\u7a7a\u200b\u5b8c\u6210\u200b\uff01\" &lt;&lt; endl;\n}\nvoid TreeRoot(Ptree *T){            //\u200b\u6c42\u6811\u200b\u7684\u200b\u6839\u200b\u7ed3\u70b9\u200b\n    if (T-&gt;n == 0) {\n        cout &lt;&lt; \"\u200b\u7a7a\u6811\u200b\u6ca1\u6709\u200b\u6839\u200b\u7ed3\u70b9\u200b\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u6839\u200b\u7ed3\u70b9\u200b\u4e3a\u200b\uff1a\" &lt;&lt; T-&gt;nodes[0].data &lt;&lt; endl;\n    }\n}\nvoid Traverse(Ptree *T) {           //\u200b\u904d\u5386\u200b\u6811\u200b\uff08\u200b\u5e7f\u5ea6\u200b\u65b9\u5411\u200b\u904d\u5386\u200b\uff09 \u200b\u5c42\u6b21\u200b\u975e\u200b\u9012\u5f52\u200b\n    if (T-&gt;n == 0) {\n        cout &lt;&lt; \"\u200b\u7a7a\u6811\u200b\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u5e7f\u5ea6\u200b\u4f18\u5148\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\u4e3a\u200b\" &lt;&lt; T-&gt;nodes[0].data;\n        for (int i = 0; i &lt; T-&gt;n; i++) {\n            for (int j = i + 1; j &lt; T-&gt;n; j++) {\n                if (T-&gt;nodes[j].parent == i) {\n                    cout &lt;&lt; T-&gt;nodes[j].data;\n                }\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n}\nvoid TreeDept(Ptree *T) {           //\u200b\u6c42\u200b\u5c42\u6b21\u200b\n    int height, max = 0, p;\n    for (int i = 0; i &lt; T-&gt;n; i++) {\n        height = 1;\n        p = T-&gt;nodes[i].parent;\n        while (p != -1) {\n            p = T-&gt;nodes[p].parent;\n            height++;\n        }\n        if (height &gt; max) {\n            max = height;\n        }\n    }\n    cout &lt;&lt; \"\u200b\u5c42\u6b21\u200b\u4e3a\u200b\uff1a\" &lt;&lt; max &lt;&lt; endl;\n}\nvoid TreeParent(Ptree *T,ElemType x) {      //\u200b\u6c42\u200b\u53cc\u4eb2\u200b\n    for (int i = 0; i &lt; T-&gt;n; i++) {\n        if (T-&gt;nodes[i].data == x) {\n            if (T-&gt;nodes[i].parent == -1) {\n                cout &lt;&lt; \"\u200b\u6839\u200b\u7ed3\u70b9\u200b\u65e0\u200b\u53cc\u4eb2\u200b\" &lt;&lt; endl;\n            }\n            else {\n                cout &lt;&lt; x &lt;&lt;\"\u200b\u53cc\u4eb2\u200b\u7ed3\u70b9\u200b\u4e3a\u200b:\" &lt;&lt; T-&gt;nodes[T-&gt;nodes[i].parent].data &lt;&lt; endl;\n            }\n            break;\n        }\n    }\n}\nvoid TreeRightBrother(Ptree *T, ElemType x) {   //\u200b\u6c42\u53f3\u200b\u5144\u5f1f\u200b\u7ed3\u70b9\u200b\n    int num = 0;\n    for (int i = 0; i &lt; T-&gt;n; i++) {\n        if (T-&gt;nodes[i].data == x) {\n            num = i;\n            break;\n        }\n    }\n    if (T-&gt;nodes[num].parent == T-&gt;nodes[num + 1].parent) {\n        cout &lt;&lt; x &lt;&lt; \"\u200b\u53f3\u200b\u5144\u5f1f\u200b\u7ed3\u70b9\u200b\u4e3a\u200b\uff1a\" &lt;&lt; T-&gt;nodes[num + 1].data &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u65e0\u53f3\u200b\u5144\u5f1f\u200b\u7ed3\u70b9\u200b\" &lt;&lt; endl;\n    }\n}\nvoid TreeLeftBrother(Ptree *T, ElemType x) {    //\u200b\u6c42\u200b\u5de6\u200b\u5144\u5f1f\u200b\u7ed3\u70b9\u200b\n    int num = 0;\n    for (int i = 0; i &lt; T-&gt;n; i++) {\n        if (T-&gt;nodes[i].data == x) {\n            num = i;\n            break;\n        }\n    }\n    if (T-&gt;nodes[num].parent == T-&gt;nodes[num - 1].parent) {\n        cout &lt;&lt; \"\u200b\u5de6\u200b\u5144\u5f1f\u200b\u7ed3\u70b9\u200b\u4e3a\u200b\uff1a\" &lt;&lt; T-&gt;nodes[num - 1].data &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u65e0\u200b\u5de6\u200b\u5144\u5f1f\u200b\u7ed3\u70b9\u200b\" &lt;&lt; endl;\n    }\n}\nvoid main() {\n    Ptree tree;\n    TreeInit(&amp;tree);\n    TreeBuild(&amp;tree);\n    TreeDept(&amp;tree);\n    Traverse(&amp;tree);\n    TreeRoot(&amp;tree);\n    TreeParent(&amp;tree, 'A');\n    TreeParent(&amp;tree, 'E');\n    TreeLeftBrother(&amp;tree, 'B');\n    TreeLeftBrother(&amp;tree, 'C');\n    TreeRightBrother(&amp;tree, 'H');\n    TreeRightBrother(&amp;tree, 'G');\n    TreeClear(&amp;tree);\n    Traverse(&amp;tree);\n    system(\"pause\");\n}\n</code></pre>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"\u4e8c\u53c9\u6811","text":""},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u6982\u5ff5","text":"<p>\u200b\u4e8c\u53c9\u6811\u200b\u662f\u200b\u53e6\u200b\u4e00\u79cd\u200b\u91cd\u8981\u200b\u7684\u200b\u6811\u5f62\u200b\u7ed3\u6784\u200b\uff0c\u200b\u5176\u200b\u9012\u5f52\u200b\u5f62\u5f0f\u200b\u7684\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\uff1a</p> <p>\u200b\u4e8c\u53c9\u6811\u200b\u662f\u200bn\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6709\u9650\u200b\u96c6\u5408\u200b\uff0c\u200b\u8be5\u200b\u96c6\u5408\u200b\u6216\u8005\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u6216\u8005\u200b\u662f\u200b\u7531\u200b\u4e00\u4e2a\u200b\u7279\u5b9a\u200b\u7684\u200b\u79f0\u4e4b\u4e3a\u200b\u6839\u200b\u7684\u200b\u7ed3\u70b9\u200b\u548c\u200b\u4e24\u4e2a\u200b\u4e92\u4e0d\u200b\u76f8\u4ea4\u200b\u7684\u200b\u79f0\u4e4b\u4e3a\u200b\u5de6\u5b50\u200b\u6811\u200b\u548c\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u7ec4\u6210\u200b\u3002</p> <pre><code>\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u7279\u70b9\u200b\u662f\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u6700\u591a\u200b\u6709\u200b\u4e24\u4e2a\u200b\u5b69\u5b50\u200b\uff0c\u200b\u5206\u522b\u200b\u79f0\u4e3a\u200b\u8be5\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5de6\u200b\u5b69\u5b50\u200b\u548c\u200b\u53f3\u200b\u5b69\u5b50\u200b\u3002\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0c\u200b\u4e8c\u53c9\u6811\u200b\u4e2d\u200b\u4e0d\u200b\u5b58\u5728\u200b\u5ea6\u200b\u5927\u4e8e\u200b2\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5b50\u6811\u6709\u200b\u5de6\u53f3\u200b\u4e4b\u5206\u200b\uff0c\u200b\u5176\u5b50\u200b\u6811\u200b\u7684\u200b\u6b21\u5e8f\u200b\u4e0d\u80fd\u200b\u98a0\u5012\u200b\uff0c\u200b\u5373\u4f7f\u200b\u53ea\u6709\u200b\u4e00\u9897\u200b\u5b50\u6811\u200b\uff0c\u200b\u4e5f\u200b\u5fc5\u987b\u200b\u8bf4\u660e\u200b\u662f\u200b\u5de6\u5b50\u200b\u6811\u200b\u8fd8\u662f\u200b\u53f3\u5b50\u200b\u6811\u200b\u3002\n</code></pre>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u4e94\u79cd\u200b\u57fa\u672c\u200b\u5f62\u6001\u200b\uff1a","text":""},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#-","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u7279\u6b8a\u200b\u60c5\u5f62\u200b-\u200b\u6ee1\u200b\u4e8c\u53c9\u6811\u200b\u548c\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811","text":"<p>\u200b\u6ee1\u200b\u4e8c\u53c9\u6811\u200b\uff1a\u200b\u6bcf\u5c42\u200b\u90fd\u200b\u6709\u200b\u6700\u5927\u200b\u6570\u76ee\u200b\u7ed3\u70b9\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u5373\u200b\u6df1\u5ea6\u200b\u4e3a\u200bk\u200b\u7684\u200b\u6ee1\u200b\u4e8c\u53c9\u6811\u200b\u6709\u200b2k-1\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u3002</p> <p>\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\uff1a\u200b\u6df1\u5ea6\u200b\u4e3a\u200bk\uff0c\u200b\u7ed3\u70b9\u200b\u6570\u4e3a\u200bn\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u5982\u679c\u200b\u5176\u200b\u7ed3\u70b9\u200b1~n\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\u5e8f\u53f7\u200b\u5206\u522b\u200b\u4e0e\u200b\u6ee1\u200b\u4e8c\u53c9\u6811\u200b\u5730\u200b \u200b\u7ed3\u70b9\u200b1~n\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u5e8f\u53f7\u200b\u4e00\u4e00\u5bf9\u5e94\u200b\uff0c\u200b\u5219\u200b\u6b64\u200b\u4e8c\u53c9\u6811\u200b\u4e3a\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u3002 </p>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u6027\u8d28","text":"<ul> <li>\u200b\u4e00\u4e2a\u200b\u975e\u7a7a\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u7b2c\u200bi\u200b\u5c42\u4e0a\u200b\u81f3\u591a\u200b\u6709\u200b2i-1\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\uff08i&gt;0\uff09\u3002</li> <li>\u200b\u6df1\u5ea6\u200b\u4e3a\u200bK\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u81f3\u591a\u200b\u6709\u200b2k-1\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\uff08k&gt;1\uff09\u3002</li> <li>\u200b\u5728\u200b\u4efb\u4f55\u200b\u4e00\u68f5\u200b\u4e8c\u53c9\u6811\u200b\u4e2d\u200b\uff0c\u200b\u82e5\u200b\u53f6\u5b50\u200b\u6570\u4e3a\u200bn0\uff0c\u200b\u5ea6\u4e3a\u200b2\u200b\u7684\u200b\u7ed3\u70b9\u200b\u4e2a\u6570\u200b\u4e3a\u200bn2\uff0cn0=n2+1\u3002</li> <li>\u200b\u5177\u6709\u200bn\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u6df1\u5ea6\u200b\u4e3a\u200bLog2(n+1)\u3002</li> <li>\u200b\u5982\u679c\u200b\u5bf9\u200b\u4e00\u68f5\u200b\u6709\u200bn\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u6309\u200b\u5c42\u6b21\u200b\u81ea\u4e0a\u800c\u4e0b\u200b\uff08\u200b\u6bcf\u5c42\u200b\u4ece\u200b\u5de6\u200b\u800c\u200b\u53f3\u200b\uff09\u200b\u5bf9\u200b\u7ed3\u70b9\u200b\u4ece\u200b1~n\u200b\u8fdb\u884c\u200b\u7f16\u53f7\u200b\uff0c\u200b\u5219\u200b\u5bf9\u200b\u4efb\u610f\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200bi(1\u2264i\u2264n)\uff0c\u200b\u6709\u200b</li> </ul> <p>\u2460\u200b\u82e5\u200bi=1\uff0c\u200b\u5219\u200b\u7ed3\u70b9\u200bi\u200b\u4e3a\u6839\u200b\uff0c\u200b\u65e0\u200b\u53cc\u4eb2\u200b\uff1b\u200b\u82e5\u200bi&gt;1\uff0c\u200b\u5219\u200b\u7ed3\u70b9\u200bi\u200b\u7684\u200b\u53cc\u4eb2\u200b\u7ed3\u70b9\u200b\u7684\u200b\u8fb9\u200b\u53f7\u200b\u662f\u200bi/2.</p> <p>\u2461\u200b\u82e5\u200b2i\u2264n\uff0c\u200b\u5219\u200bi\u200b\u7684\u200b\u5de6\u200b\u5b69\u5b50\u200b\u7684\u200b\u7f16\u53f7\u200b\u662f\u200b2i\uff0c\u200b\u5426\u5219\u200bi\u200b\u65e0\u200b\u5de6\u200b\u5b69\u5b50\u200b\u3002</p> <p>\u2462\u200b\u82e5\u200b2i+1\u2264n\uff0c\u200b\u5219\u200bi\u200b\u7684\u200b\u53f3\u200b\u5b69\u5b50\u200b\u7f16\u53f7\u200b\u662f\u200b2i+1\uff0c\u200b\u5426\u5219\u200bi\u200b\u65e0\u53f3\u200b\u5b69\u5b50\u200b\u3002</p>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5b58\u50a8\u200b\u7ed3\u6784","text":""},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#1","title":"1\uff09\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784","text":"<p>\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u662f\u200b\u4e00\u7ec4\u200b\u5730\u5740\u200b\u8fde\u7eed\u200b\u7684\u200b\u5b58\u50a8\u5355\u5143\u200b\u4e00\u6b21\u200b\u81ea\u4e0a\u800c\u4e0b\u200b\u3001\u200b\u4ece\u200b\u5de6\u200b\u81f3\u200b\u53f3\u200b\u5730\u200b\u5b58\u50a8\u200b\u4e8c\u53c9\u6811\u200b\u4e2d\u200b\u7684\u200b\u5404\u4e2a\u200b\u7ed3\u70b9\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u5c06\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u4e0a\u200b\u7f16\u53f7\u200b\u4e3a\u200bi\u200b\u7684\u200b\u7ed3\u70b9\u200b\u5b58\u50a8\u200b\u5728\u200b\u5982\u200b\u4e0a\u200b\u5b9a\u4e49\u200b\u7684\u200b\u4e00\u7ef4\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u4e0b\u6807\u200b\u4e3a\u200bi\u200b\u7684\u200b\u5206\u91cf\u200b\u4e2d\u200b\uff0c\u200b\u5982\u56fe\u200b6-5a\u200b\u6240\u793a\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u4e00\u822c\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u80fd\u591f\u200b\u5f88\u200b\u5bb9\u6613\u200b\u5730\u200b\u627e\u5230\u200b\u67d0\u4e00\u200b\u7ed3\u70b9\u200b\u7684\u200b\u53cc\u4eb2\u200b\u3001\u200b\u5b69\u5b50\u200b\u3001\u200b\u5144\u5f1f\u200b\u7b49\u200b\u5177\u6709\u200b\u4e00\u5b9a\u200b\u5173\u7cfb\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u5c06\u200b\u4e8c\u53c9\u6811\u200b\u5148\u200b\u6269\u5c55\u200b\u4e3a\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u65b0\u200b\u589e\u52a0\u200b\u7684\u200b\u7ed3\u70b9\u200b\u5168\u90e8\u8bb0\u200b\u4e3a\u200b\u201c\u00f8\u201c\uff0c\u200b\u8868\u793a\u200b\u8be5\u200b\u7ed3\u70b9\u200b\u4e0d\u200b\u5b58\u5728\u200b\u3002\u200b\u7136\u540e\u200b\u5c06\u200b\u5176\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u5b58\u50a8\u200b\u5728\u200b\u4e00\u7ef4\u200b\u6570\u7ec4\u200b\u7684\u200b\u76f8\u5e94\u200b\u5206\u91cf\u200b\u4e2d\u200b\u3002</p> <p></p> <p>\u200b\u8fd9\u79cd\u200b\u4e66\u5e8f\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u6bd4\u8f83\u200b\u9002\u7528\u200b\u4e8e\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u3002\u200b\u56e0\u4e3a\u200b\u5bf9\u4e8e\u200b\u4e00\u822c\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u6765\u8bf4\u200b\uff0c\u200b\u5728\u200b\u6700\u574f\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5bb9\u6613\u200b\u9020\u6210\u200b\u5b58\u50a8\u7a7a\u95f4\u200b\u7684\u200b\u6781\u5927\u200b\u6d6a\u8d39\u200b\u3002</p>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#2","title":"2\uff09\u200b\u94fe\u5f0f\u200b\u5b58\u50a8\u200b\u7ed3\u6784","text":"<p>\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u4e2d\u9664\u200b\u5b58\u50a8\u200b\u5143\u7d20\u200b\u672c\u8eab\u200b\u7684\u200b\u4fe1\u606f\u200b\u5916\u200b\uff0c\u200b\u5728\u200b\u8bbe\u7f6e\u200b\u4e24\u4e2a\u200b\u6307\u9488\u200b\u57df\u200blchild\u200b\u548c\u200brchild\uff0c\u200b\u5206\u522b\u200b\u6307\u5411\u200b\u8be5\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5de6\u200b\u5b69\u5b50\u200b\u548c\u200b\u53f3\u200b\u5b69\u5b50\u200b\uff0c\u200b\u5f53\u200b\u7ed3\u70b9\u200b\u7684\u200b\u67d0\u4e2a\u200b\u5b69\u5b50\u200b\u4e3a\u200b\u7a7a\u65f6\u200b\uff0c\u200b\u5219\u200b\u76f8\u5e94\u200b\u7684\u200b\u6307\u9488\u200b\u4e3a\u7a7a\u200b\u6307\u9488\u200b\u3002\u200b\u82e5\u8981\u200b\u5728\u200b\u4e8c\u53c9\u6811\u200b\u4e2d\u200b\u7ecf\u5e38\u200b\u5bfb\u627e\u200b\u7ed3\u70b9\u200b\u7684\u200b\u53cc\u4eb2\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b\u53cc\u4eb2\u200b\u7684\u200b\u6307\u9488\u200b\u57df\u200bparent\u3002 </p> <p>\u200b\u5229\u7528\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u7ed3\u70b9\u200b\u7ed3\u6784\u200b\u6240\u200b\u6784\u6210\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u5206\u522b\u200b\u79f0\u4e3a\u200b\u4e8c\u53c9\u200b\u94fe\u8868\u200b\u548c\u200b\u4e09\u53c9\u200b\u94fe\u8868\u200b\u3002\u200b\u7ed3\u70b9\u200b\u53ca\u200b\u94fe\u8868\u200b\u5b58\u50a8\u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_6","title":"\u904d\u5386","text":"<p>\u200b\u4e09\u79cd\u200b\u904d\u5386\u200b\u7684\u200b\u672c\u8d28\u200b\u4e0a\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u90fd\u200b\u4f1a\u200b\u88ab\u200b\u7ecf\u8fc7\u200b\u4e09\u6b21\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u662f\u200b\u7ed3\u70b9\u200b\u8f93\u51fa\u200b\u7684\u200b\u65f6\u95f4\u200b\u70b9\u200b\u4e0d\u540c\u200b\u3002</p>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_7","title":"\u524d\u5e8f\u200b\u904d\u5386\u200b\uff1a","text":"<pre><code>void BinTreefrontTraverse(BiTree T) {       //\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b\n    if (T) {\n        cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n        BinTreefrontTraverse(T-&gt;lchild);\n        BinTreefrontTraverse(T-&gt;rchild);\n    }\n}\n</code></pre>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_8","title":"\u4e2d\u5e8f\u200b\u904d\u5386\u200b\uff1a","text":"<pre><code>void BinTreeMidTraverse(BiTree T) {     //\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\n    if (T) {\n        BinTreeMidTraverse(T-&gt;lchild);\n        cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n        BinTreeMidTraverse(T-&gt;rchild);\n    }\n}\n</code></pre>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_9","title":"\u540e\u5e8f\u200b\u904d\u5386\u200b\uff1a","text":"<pre><code>void BinTreeBackTraverse(BiTree T) {    //\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\n    if (T) {\n        BinTreeBackTraverse(T-&gt;lchild);\n        BinTreeBackTraverse(T-&gt;rchild);\n        cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n    }\n}\n</code></pre>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_10","title":"\u975e\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386","text":"<pre><code>void BinTreefrontTraverseUn(BiTree T) {     //\u200b\u975e\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b\n    stack&lt;BiTree, vector&lt;BiTree&gt;&gt; s;\n    while (T || !s.empty()) {\n        if (T) {\n            cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n            s.push(T);\n            T = T-&gt;lchild;\n        }\n        else {\n            T = s.top();\n            s.pop();\n            T = T-&gt;rchild;\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_11","title":"\u975e\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386","text":"<pre><code>void BinTreeMidTraverseUn(BiTree T) {       //\u200b\u975e\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\n    stack&lt;BiTree, vector&lt;BiTree&gt;&gt; s;\n    while (T || !s.empty()) {\n        if (T) {\n            s.push(T);\n            T = T-&gt;lchild;\n        }\n        else {\n            T = s.top();\n            s.pop();\n            cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n            T = T-&gt;rchild;\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_12","title":"\u975e\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386","text":"<pre><code>void BinTreeBackTraverseUn(BiTree T) {  //\u200b\u975e\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\n    stack&lt;BiTree, vector&lt;BiTree&gt;&gt; s;\n    BiTree cur, pre=NULL;\n    s.push(T);\n    while (!s.empty()) {\n        cur = s.top();\n        if ((cur-&gt;lchild == NULL &amp;&amp; cur-&gt;rchild == NULL) || (pre != NULL &amp;&amp; (pre == cur-&gt;lchild || pre == cur-&gt;rchild))) {\n            cout &lt;&lt; cur-&gt;data &lt;&lt; \" \";\n            s.pop();\n            pre = cur;\n        }\n        else {\n            if (cur-&gt;rchild != NULL) s.push(cur-&gt;rchild);\n            if (cur-&gt;lchild != NULL) s.push(cur-&gt;lchild);\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_13","title":"\u6c42\u200b\u6df1\u5ea6\u200b\uff1a","text":"<pre><code>int BinTreeDepth(BiTree T) {\n    int i, j;\n    if (!T) {\n        return 0;\n    }\n    else\n    {\n        i = BinTreeDepth(T-&gt;lchild);\n        j = BinTreeDepth(T-&gt;rchild);\n    }\n    return i &gt; j ? i + 1 : j + 1;\n}\n</code></pre>"},{"location":"DataStruct/16-%E4%BA%8C%E5%8F%89%E6%A0%91/#_14","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;stack&gt;\nusing namespace std;\ntypedef char ElemType;\ntypedef struct BiNode {\n    ElemType data;\n    struct BiNode *lchild, *rchild;\n}BiNode, *BiTree;\nvoid BinTreeInit(BiTree &amp;T);\nvoid BinTreeCreateFront(BiTree &amp;T); //\u200b\u524d\u5e8f\u200b\u5e8f\u5217\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b\nvoid BinTreeCreateMid(BiTree &amp;T); //\u200b\u4e2d\u5e8f\u200b\u5e8f\u5217\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b\nvoid BinTreeCreateBack(BiTree &amp;T);  //\u200b\u540e\u5e8f\u200b\u5e8f\u5217\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b\nvoid BinTreeRoot(BiTree T);         //\u200b\u6c42\u6839\u200b\u7ed3\u70b9\u200b\nvoid BinTreeParent(BiTree T, BiTree p, ElemType x, ElemType &amp;a);        //\u200b\u6c42\u200b\u7ed3\u70b9\u200b\u7684\u200b\u53cc\u4eb2\u200b\nvoid BinLeftChild(BiTree T, ElemType x);    //\u200b\u6c42\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5de6\u200b\u5b69\u5b50\u200b\nvoid BinRightChild(BiTree T, ElemType x);       //\u200b\u6c42\u200b\u7ed3\u70b9\u200b\u7684\u200b\u53f3\u200b\u5b69\u5b50\u200b\nvoid BinTreeInsertLeft(BiTree &amp;T, ElemType y, ElemType x);      //\u200b\u5728\u200bY\u200b\u5904\u4ee5\u200b\u5de6\u5b50\u200b\u6811\u200b\u63d2\u5165\u200b  Y\u200b\u7684\u200b\u5de6\u5b50\u200b\u6811\u200b\u4f5c\u4e3a\u200bx\u200b\u7684\u200b\u5de6\u5b50\u200b\u6811\u200b\nvoid BinTreeInsertRight(BiTree &amp;T, ElemType y, ElemType x);//\u200b\u5728\u200bY\u200b\u5904\u4ee5\u200b\u53f3\u5b50\u200b\u6811\u200b\u63d2\u5165\u200b\nvoid BinTreeDeleteLeft(BiTree &amp;T);  //\u200b\u5220\u9664\u200b\u5de6\u5b50\u200b\u6811\u200b\nvoid BinTreeDeleteRight(BiTree &amp;T);     //\u200b\u5220\u9664\u200b\u53f3\u5b50\u200b\u6811\u200b\nvoid BinTreeClear(BiTree &amp;T);       //\u200b\u6e05\u7a7a\u200b  \u200b\u540e\u5e8f\u200b\u5e8f\u5217\u200b\u5220\u9664\u200b\u5982\u679c\u200b \u200b\u5148\u200b\u5220\u9664\u200b\u7ed3\u70b9\u200b\u7684\u8bdd\u200b\uff0c\u200b\u5c31\u200b\u65e0\u6cd5\u8bbf\u95ee\u200b\u5176\u5b50\u200b\u6811\u200b\nvoid BinTreefrontTraverse(BiTree T);    //\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b\nvoid BinTreeMidTraverse(BiTree T);  //\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\nvoid BinTreeBackTraverse(BiTree T); //\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\nvoid BinTreefrontTraverseUn(BiTree T);  //\u200b\u975e\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b\nvoid BinTreeMidTraverseUn(BiTree T);        //\u200b\u975e\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\nvoid BinTreeBackTraverseUn(BiTree T);   //\u200b\u975e\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\nvoid BinTreeEmpty(BiTree T);    //\u200b\u5224\u7a7a\u200b\nint BinTreeDepth(BiTree T);    //\u200b\u6c42\u200b\u6df1\u5ea6\u200b\nvoid print() {\n    cout &lt;&lt; \"************************************************************************\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   1 \u200b\u524d\u5e8f\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b    2 \u200b\u6c42\u200b\u6df1\u5ea6\u200b                3 \u200b\u6c42\u53f3\u200b\u5b69\u5b50\u200b             *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   4 \u200b\u6c42\u6839\u200b\u7ed3\u70b9\u200b          5 \u200b\u6c42\u200b\u53cc\u4eb2\u200b\u7ed3\u70b9\u200b            6 \u200b\u6c42\u200b\u5de6\u200b\u5b69\u5b50\u200b             *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   7 \u200b\u4ee5\u200b\u5de6\u5b50\u200b\u6811\u200b\u63d2\u5165\u200b      8 \u200b\u4ee5\u53f3\u5b50\u200b\u6811\u200b\u63d2\u5165\u200b          9 \u200b\u5220\u9664\u200b\u5de6\u5b50\u200b\u6811\u200b           *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  10 \u200b\u5220\u9664\u200b\u53f3\u5b50\u200b\u6811\u200b       11 \u200b\u6e05\u7a7a\u200b                 12 \u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b         *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  13 \u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b     14 \u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b         15 \u200b\u975e\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b       *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  16 \u200b\u975e\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b   17 \u200b\u975e\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b       18 \u200b\u6e05\u5c4f\u200b                 *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*  19 \u200b\u9000\u51fa\u200b             20 \u200b\u5224\u7a7a\u200b                                         *\" &lt;&lt; endl;\n    cout &lt;&lt; \"************************************************************************\" &lt;&lt; endl;\n}\nvoid main() {\n    BiTree tree, p=NULL; \n    ElemType y, x,a;\n    BinTreeInit(tree);\n    int num;\n    print();\n    while (1) {\n        cin &gt;&gt; num;\n        switch (num)\n        {\n        case 1:BinTreeCreateFront(tree);cout &lt;&lt; \"\u200b\u524d\u5e8f\u200b\u5e8f\u5217\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b\u5b8c\u6210\u200b\" &lt;&lt; endl; break;\n        case 2:cout &lt;&lt; \"\u200b\u6df1\u5ea6\u200b\u4e3a\u200b\uff1a\" &lt;&lt; BinTreeDepth(tree) &lt;&lt; endl; break;\n        case 3:cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u7ed3\u70b9\u200b\u7684\u200b\u503c\u200b\uff1a\" &lt;&lt; endl;\n            cin &gt;&gt; x;\n            BinRightChild(tree, x); break;\n        case 4:BinTreeRoot(tree); break;\n        case 5:a = 0;\n            cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u7ed3\u70b9\u200b\u7684\u200b\u503c\u200b\uff1a\" &lt;&lt; endl;\n            cin &gt;&gt; x; \n            BinTreeParent(tree,p,x,a);\n            cout &lt;&lt; \"\u200b\u53cc\u4eb2\u200b\u7ed3\u70b9\u200b\u4e3a\u200b\uff1a\" &lt;&lt; a &lt;&lt; endl;\n            break;\n        case 6:\n            cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u7ed3\u70b9\u200b\u7684\u200b\u503c\u200b\uff1a\" &lt;&lt; endl;\n            cin &gt;&gt; x; \n            BinLeftChild(tree, x);\n            break;\n        case 7:\n            cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u88ab\u200b\u63d2\u5165\u200b\u7ed3\u70b9\u200b\u503c\u200b\u548c\u200b\u63d2\u5165\u200b\u7ed3\u70b9\u200b\u503c\u200b\" &lt;&lt; endl;\n            cin &gt;&gt; y &gt;&gt; x;\n            BinTreeInsertLeft(tree, y, x); break;\n        case 8:\n            cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u88ab\u200b\u63d2\u5165\u200b\u7ed3\u70b9\u200b\u503c\u200b\u548c\u200b\u63d2\u5165\u200b\u7ed3\u70b9\u200b\u503c\u200b\" &lt;&lt; endl;\n            cin &gt;&gt; y &gt;&gt; x;\n            BinTreeInsertRight(tree, y, x); break;\n        case 9:BinTreeDeleteLeft(tree); break;\n        case 10:BinTreeDeleteRight(tree); break;\n        case 11:BinTreeClear(tree); cout &lt;&lt; \"\u200b\u5220\u9664\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl; break;\n        case 12:cout &lt;&lt; \"\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b:\"; BinTreefrontTraverse(tree); cout &lt;&lt; endl; break;\n        case 13:cout &lt;&lt; \"\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b:\"; BinTreeMidTraverse(tree); cout &lt;&lt; endl; break;\n        case 14:cout &lt;&lt; \"\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b:\"; BinTreeBackTraverse(tree); cout &lt;&lt; endl; break;\n        case 15:cout &lt;&lt; \"\u200b\u975e\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b:\"; BinTreefrontTraverseUn(tree); cout &lt;&lt; endl; break;\n        case 16:cout &lt;&lt; \"\u200b\u975e\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b:\"; BinTreeMidTraverseUn(tree); cout &lt;&lt; endl; break;\n        case 17:cout &lt;&lt; \"\u200b\u975e\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b:\"; BinTreeBackTraverseUn(tree); cout &lt;&lt; endl; break;\n        case 18:system(\"cls\");print(); break;\n        case 19:exit(0); break;\n        case 20:BinTreeEmpty(tree); break;\n        default:cout &lt;&lt; \"\u200b\u8f93\u5165\u200b\u9519\u8bef\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\" &lt;&lt; endl;break;\n        }\n    }\n}\nvoid BinTreeInit(BiTree &amp;T) {       //\u200b\u6784\u9020\u200b\u7a7a\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\n    T = NULL;\n}\nvoid BinTreeCreateFront(BiTree &amp;T) {    //\u200b\u524d\u5e8f\u200b\u5e8f\u5217\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b\n    ElemType ch;\n    cin &gt;&gt; ch;\n    if (ch == '#') {\n        T = NULL;\n    }\n    else {\n        T = (BiNode *)malloc(sizeof(BiNode));\n        T-&gt;data = ch;\n        BinTreeCreateFront(T-&gt;lchild);\n        BinTreeCreateFront(T-&gt;rchild);\n    }\n}\nvoid BinTreeCreateMid(BiTree &amp;T) {  //\u200b\u4e2d\u5e8f\u200b\u5e8f\u5217\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b\n    ElemType ch;\n    cin &gt;&gt; ch;\n    if (ch == '#') {\n        T = NULL;\n    }\n    else {\n        T = (BiNode *)malloc(sizeof(BiNode));\n        BinTreeCreateMid(T-&gt;lchild);\n        T-&gt;data = ch;\n        BinTreeCreateMid(T-&gt;rchild);\n    }\n}\nvoid BinTreeCreateBack(BiTree &amp;T) { //\u200b\u540e\u5e8f\u200b\u5e8f\u5217\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b\n    ElemType ch;\n    cin &gt;&gt; ch;\n    if (ch == '#') {\n        T = NULL;\n    }\n    else {\n        T = (BiNode *)malloc(sizeof(BiNode));\n        BinTreeCreateBack(T-&gt;lchild);\n        BinTreeCreateBack(T-&gt;rchild);\n        T-&gt;data = ch;\n    }\n}\nvoid BinTreeRoot(BiTree T) {        //\u200b\u6c42\u6839\u200b\u7ed3\u70b9\u200b\n    if (T) {\n        cout &lt;&lt; \"\u200b\u6839\u200b\u8282\u70b9\u200b\u662f\u200b\uff1a   \" &lt;&lt; T-&gt;data &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u7a7a\u6811\u200b\u6ca1\u6709\u200b\u6839\u200b\u8282\u70b9\u200b\"&lt;&lt; endl;\n    }\n\n}\nvoid BinTreeParent(BiTree T, BiTree pre, ElemType x,ElemType &amp;a) {      //\u200b\u6c42\u200b\u7ed3\u70b9\u200b\u7684\u200b\u53cc\u4eb2\u200b\n    if (!T) {\n        return;\n    }\n    if (T-&gt;data == x) {\n        a = pre-&gt;data;\n        return;\n    }\n    if (!a) {\n        BinTreeParent(T-&gt;lchild, T, x, a);\n        BinTreeParent(T-&gt;rchild, T, x, a);\n    }\n}\nvoid BinLeftChild(BiTree T, ElemType x) {       //\u200b\u6c42\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5de6\u200b\u5b69\u5b50\u200b\n    if (T-&gt;data != x) {\n        BinLeftChild(T-&gt;lchild, x);\n        BinLeftChild(T-&gt;rchild, x);\n    }\n    else if (T-&gt;lchild != NULL) {\n        cout &lt;&lt; x &lt;&lt; \"\u200b\u7684\u200b\u5de6\u200b\u5b69\u5b50\u200b\u662f\u200b\uff1a\" &lt;&lt; T-&gt;lchild-&gt;data &lt;&lt; endl;\n    }\n}\nvoid BinRightChild(BiTree T, ElemType x) {      //\u200b\u6c42\u200b\u7ed3\u70b9\u200b\u7684\u200b\u53f3\u200b\u5b69\u5b50\u200b\n    if (T-&gt;data != x) {\n        BinRightChild(T-&gt;lchild, x);\n        BinRightChild(T-&gt;rchild, x);\n    }\n    else if (T-&gt;rchild != NULL) {\n        cout &lt;&lt; x &lt;&lt; \"\u200b\u7684\u200b\u5de6\u200b\u5b69\u5b50\u200b\u662f\u200b\uff1a\" &lt;&lt; T-&gt;rchild-&gt;data &lt;&lt; endl;\n    }\n}\nvoid BinTreeInsertLeft(BiTree &amp;T, ElemType y, ElemType x) {     //\u200b\u5728\u200bY\u200b\u5904\u4ee5\u200b\u5de6\u5b50\u200b\u6811\u200b\u63d2\u5165\u200b  Y\u200b\u7684\u200b\u5de6\u5b50\u200b\u6811\u200b\u4f5c\u4e3a\u200bx\u200b\u7684\u200b\u5de6\u5b50\u200b\u6811\u200b\n    if (T &amp;&amp; T-&gt;data != y) {\n        BinTreeInsertLeft(T-&gt;lchild, y, x);\n        BinTreeInsertLeft(T-&gt;rchild, y, x);\n    }\n    else {\n        BiTree P = (BiNode*)malloc(sizeof(BiNode));\n        P-&gt;data = x;\n        P-&gt;lchild = T-&gt;lchild;\n        P-&gt;rchild = NULL;\n        T-&gt;lchild = P;\n        cout &lt;&lt; \"\u200b\u5de6\u5b50\u200b\u6811\u200b\u63d2\u5165\u200b\u6210\u529f\u200b\" &lt;&lt; endl;\n    }\n}\nvoid BinTreeInsertRight(BiTree &amp;T, ElemType y, ElemType x) {//\u200b\u5728\u200bY\u200b\u5904\u4ee5\u200b\u53f3\u5b50\u200b\u6811\u200b\u63d2\u5165\u200b\n    if (T&amp;&amp;T-&gt;data != y) {\n        BinTreeInsertRight(T-&gt;lchild, y, x);\n        BinTreeInsertRight(T-&gt;rchild, y, x);\n    }\n    else {\n        BiTree P = (BiNode*)malloc(sizeof(BiNode));\n        P-&gt;data = x;\n        P-&gt;rchild = T-&gt;rchild;\n        P-&gt;lchild = NULL;\n        T-&gt;rchild = P;\n        cout &lt;&lt; \"\u200b\u53f3\u5b50\u200b\u6811\u200b\u63d2\u5165\u200b\u6210\u529f\u200b\" &lt;&lt; endl;\n    }\n}\nvoid BinTreeDeleteLeft(BiTree &amp;T) {     //\u200b\u5220\u9664\u200b\u5de6\u5b50\u200b\u6811\u200b\n    if (T) {\n        BinTreeClear(T-&gt;lchild);\n    }\n    cout &lt;&lt; \"\u200b\u5220\u9664\u200b\u5de6\u5b50\u200b\u6811\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\nvoid BinTreeDeleteRight(BiTree &amp;T) {        //\u200b\u5220\u9664\u200b\u53f3\u5b50\u200b\u6811\u200b\n    if (T) {\n        BinTreeClear(T-&gt;rchild);\n    }\n    cout &lt;&lt; \"\u200b\u5220\u9664\u200b\u5de6\u5b50\u200b\u6811\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\nvoid BinTreeClear(BiTree &amp;T) {      //\u200b\u6e05\u7a7a\u200b  \u200b\u540e\u5e8f\u200b\u5e8f\u5217\u200b\u5220\u9664\u200b\u5982\u679c\u200b \u200b\u5148\u200b\u5220\u9664\u200b\u7ed3\u70b9\u200b\u7684\u8bdd\u200b\uff0c\u200b\u5c31\u200b\u65e0\u6cd5\u8bbf\u95ee\u200b\u5176\u5b50\u200b\u6811\u200b\n    if (T) {\n        BinTreeClear(T-&gt;lchild);\n        BinTreeClear(T-&gt;rchild);\n        free(T);\n        T = NULL;\n    }\n}\nvoid BinTreefrontTraverse(BiTree T) {       //\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b\n    if (T) {\n        cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n        BinTreefrontTraverse(T-&gt;lchild);\n        BinTreefrontTraverse(T-&gt;rchild);\n    }\n}\nvoid BinTreeMidTraverse(BiTree T) {     //\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\n    if (T) {\n        BinTreeMidTraverse(T-&gt;lchild);\n        cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n        BinTreeMidTraverse(T-&gt;rchild);\n    }\n}\nvoid BinTreeBackTraverse(BiTree T) {    //\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\n    if (T) {\n        BinTreeBackTraverse(T-&gt;lchild);\n        BinTreeBackTraverse(T-&gt;rchild);\n        cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n    }\n}\nvoid BinTreefrontTraverseUn(BiTree T) {     //\u200b\u975e\u200b\u9012\u5f52\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b\n    stack&lt;BiTree, vector&lt;BiTree&gt;&gt; s;\n    while (T || !s.empty()) {\n        if (T) {\n            cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n            s.push(T);\n            T = T-&gt;lchild;\n        }\n        else {\n            T = s.top();\n            s.pop();\n            T = T-&gt;rchild;\n        }\n    }\n}\nvoid BinTreeMidTraverseUn(BiTree T) {       //\u200b\u975e\u200b\u9012\u5f52\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\n    stack&lt;BiTree, vector&lt;BiTree&gt;&gt; s;\n    while (T || !s.empty()) {\n        if (T) {\n            s.push(T);\n            T = T-&gt;lchild;\n        }\n        else {\n            T = s.top();\n            s.pop();\n            cout &lt;&lt; T-&gt;data &lt;&lt; \" \";\n            T = T-&gt;rchild;\n        }\n    }\n}\nvoid BinTreeBackTraverseUn(BiTree T) {  //\u200b\u975e\u200b\u9012\u5f52\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\n    stack&lt;BiTree, vector&lt;BiTree&gt;&gt; s;\n    BiTree cur, pre=NULL;\n    s.push(T);\n    while (!s.empty()) {\n        cur = s.top();\n        if ((cur-&gt;lchild == NULL &amp;&amp; cur-&gt;rchild == NULL) || (pre != NULL &amp;&amp; (pre == cur-&gt;lchild || pre == cur-&gt;rchild))) {\n            cout &lt;&lt; cur-&gt;data &lt;&lt; \" \";\n            s.pop();\n            pre = cur;\n        }\n        else {\n            if (cur-&gt;rchild != NULL) s.push(cur-&gt;rchild);\n            if (cur-&gt;lchild != NULL) s.push(cur-&gt;lchild);\n        }\n    }\n}\nvoid BinTreeEmpty(BiTree T) {\n    if (T) {\n        cout &lt;&lt; \"\u200b\u975e\u7a7a\u6811\u200b\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u7a7a\u6811\u200b\" &lt;&lt; endl;\n    }\n}\nint BinTreeDepth(BiTree T) {\n    int i, j;\n    if (!T) {\n        return 0;\n    }\n    else\n    {\n        i = BinTreeDepth(T-&gt;lchild);\n        j = BinTreeDepth(T-&gt;rchild);\n    }\n    return i &gt; j ? i + 1 : j + 1;\n}\n</code></pre>"},{"location":"DataStruct/17-%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"\u7ebf\u7d22\u200b\u4e8c\u53c9\u6811","text":"<p> \u200b\u4ee5\u200b\u8fd9\u79cd\u200b\u7ed3\u70b9\u200b\u6784\u6210\u200b\u7684\u200b\u4e8c\u53c9\u200b\u94fe\u8868\u200b\u4f5c\u4e3a\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\uff0c\u200b\u79f0\u4e3a\u200b\u7ebf\u7d22\u200b\u94fe\u8868\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6307\u5411\u200b\u7ed3\u70b9\u200b\u524d\u9a71\u200b\u548c\u200b\u540e\u7ee7\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u79f0\u4e3a\u200b\u7ebf\u7d22\u200b\uff1b\u200b\u52a0\u4e0a\u200b\u7ebf\u7d22\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u79f0\u4e3a\u200b\u7ebf\u7d22\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u4ee5\u200b\u67d0\u79cd\u200b\u6b21\u5e8f\u200b\u904d\u5386\u200b\u4e8c\u53c9\u6811\u200b\u4f7f\u200b\u5176\u200b\u53d8\u4e3a\u200b\u7ebf\u7d22\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u79f0\u4e3a\u200b\u7ebf\u7d22\u200b\u5316\u200b\u3002</p>"},{"location":"DataStruct/17-%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\ntypedef char ElemType;\nenum flag{  zero, one};  // zero \u200b\u4ee3\u8868\u200b\u5426\u200b one\u200b\u4ee3\u8868\u200b\u771f\u200b\ntypedef struct BiThrNode {\n    ElemType data;\n    struct BiThrNode *lchild, *rchild;\n    flag ltag : 2;  //\u200b\u5206\u522b\u200b\u4e24\u4e2a\u200b\u5b57\u8282\u200b\n    flag rtag : 2;\n}BiThrNode,*BiThrTree;\nvoid CreateBiTree(BiThrTree  &amp;T) {  //\u200b\u524d\u5e8f\u200b\u5e8f\u5217\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b\n    ElemType ch;\n    cin &gt;&gt; ch;\n    if (ch == '#') {\n        T = NULL;\n    }\n    else {\n        T = (BiThrTree)malloc(sizeof(BiThrNode));\n        T-&gt;data = ch;\n        CreateBiTree(T-&gt;lchild);\n        if (T-&gt;lchild) {\n            T-&gt;ltag = zero;\n        }\n        CreateBiTree(T-&gt;rchild);\n        if (T-&gt;rchild) {\n            T-&gt;rtag = zero;\n        }\n    }\n}\nBiThrTree pre = NULL;\nvoid inThreat(BiThrTree p) { //\u200b\u5bf9\u200b\u4e8c\u53c9\u6811\u200b\u8fdb\u884c\u200b\u4e2d\u5e8f\u200b\u7ebf\u7d22\u200b\u5316\u200b\n    if (p) {\n        inThreat(p-&gt;lchild);\n        if (p-&gt;lchild == NULL) {\n            p-&gt;ltag = one;\n            p-&gt;lchild = pre;\n        }\n        if (pre-&gt;rchild == NULL) {\n            pre-&gt;rtag = one;\n            pre-&gt;rchild = p;\n        }\n        pre = p;\n        inThreat(p-&gt;rchild);\n    }\n}\nvoid inOrderThreat(BiThrTree &amp;T,BiThrTree p) {  //\u200b\u8fde\u63a5\u200b\u542b\u6709\u200bnull\u200b\u7684\u200b\u7ed3\u70b9\u200b\u5f62\u6210\u200b\u4e00\u4e2a\u200b\u95ed\u73af\u200b\n    T = (BiThrTree)malloc(sizeof(BiThrNode));\n    T-&gt;ltag = zero;\n    T-&gt;rtag = one;\n    T-&gt;rchild = T;\n    if (p) {\n        T-&gt;lchild = p;\n        pre = T;\n        inThreat(p);\n        pre-&gt;rtag = one;\n        pre-&gt;rchild = T;\n        T-&gt;rchild = pre;\n    }\n    else {\n        T-&gt;lchild = T;\n    }\n}\nvoid inOrderThreatTraverse(BiThrTree T) {  //\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u4e8c\u53c9\u6811\u200b\n    BiThrTree p = T-&gt;lchild;\n    while (p!=T) {\n        while (p-&gt;ltag == zero) {\n            p = p-&gt;lchild;\n        }\n        cout &lt;&lt; p-&gt;data &lt;&lt; \" \";\n        while (p-&gt;rtag==one &amp;&amp; p-&gt;rchild !=T) {\n            p = p-&gt;rchild;\n            cout &lt;&lt; p-&gt;data &lt;&lt; \" \";\n        }\n        p = p-&gt;rchild;\n    }\n}\nvoid main() {\n    BiThrTree H,T;\n    cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b\u524d\u5e8f\u200b\u5e8f\u5217\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b\" &lt;&lt; endl;\n    CreateBiTree(T);\n    inOrderThreat(H, T);\n    cout &lt;&lt; \"\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\u4e3a\u200b\uff1a\" &lt;&lt; endl;\n    inOrderThreatTraverse(H);\n    system(\"pause\");\n}\n</code></pre>"},{"location":"DataStruct/18-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/","title":"\u54c8\u592b\u66fc\u200b\u6811","text":"<p>\u200b\u54c8\u592b\u66fc\u200b\u6811\u200b\uff0c\u200b\u53c8\u79f0\u200b\u6700\u4f18\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u662f\u200b\u4e00\u7c7b\u200b\u5e26\u6743\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\u6700\u77ed\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u3002</p> <p>\uff081\uff09\u200b\u8def\u5f84\u200b\uff1a\u200b\u4ece\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5206\u652f\u200b\u5e8f\u5217\u200b\u3002</p> <p>\uff082\uff09\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\uff1a\u200b\u4ece\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u6240\u200b\u7ecf\u8fc7\u200b\u7684\u200b\u5206\u652f\u200b\u6570\u76ee\u200b\u3002\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u662f\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\u6700\u77ed\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u3002</p> <p>\uff083\uff09\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6743\u200b\uff1a\u200b\u5728\u200b\u5b9e\u9645\u200b\u5e94\u7528\u200b\u4e2d\u200b\uff0c\u200b\u4eba\u4eec\u200b\u5e38\u5e38\u200b\u7ed9\u200b\u6811\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u8d4b\u4e88\u200b\u4e00\u4e2a\u200b\u5177\u6709\u200b\u67d0\u79cd\u200b\u5b9e\u9645\u610f\u4e49\u200b\u7684\u200b\u6570\u200b\uff0c\u200b\u5982\u200b\u5355\u4ef7\u200b\u3001\u200b\u51fa\u73b0\u200b\u9891\u7387\u200b\u7b49\u200b\uff0c\u200b\u79f0\u4e3a\u200b\u8fd9\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6743\u200b\u3002</p> <p>\uff084\uff09\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5e26\u6743\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\uff1a\u200b\u5728\u200b\u6811\u5f62\u200b\u7ed3\u6784\u200b\u4e2d\u200b\uff0c\u200b\u628a\u200b\u4ece\u200b\u6811\u6839\u200b\u5230\u200b\u67d0\u200b\u4e00\u200b\u7ed3\u70b9\u200b\u7684\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\u4e0e\u200b\u8be5\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6743\u200b\u7684\u200b\u4e58\u79ef\u200b\u3002</p> <p>\uff085\uff09\u200b\u6811\u200b\u7684\u200b\u5e26\u6743\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\uff1a\u200b\u6811\u4e2d\u200b\u6240\u6709\u200b\u53f6\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5e26\u6743\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\u4e4b\u200b\u548c\u200b\u3002</p> <p></p>"},{"location":"DataStruct/18-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/#_2","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#define n 4\ntypedef struct {    //\u200b\u54c8\u592b\u66fc\u200b\u7ed3\u70b9\u200b\u7ed3\u6784\u200b\n    char data;\n     int weight;\n     int parent, lchild, rchild;\n}hufmTree;\ntypedef struct {\n    int start;\n    char ch;\n    char bits[n];\n}codetype;\nint minNum(hufmTree t[],int i) {  //\u200b\u6c42\u6743\u503c\u200b\u6700\u5c0f\u200b\u7684\u200b\u7ed3\u70b9\u200b\n    int m;\n    int k = 10000;      \n    for (int j = 1; j &lt; i; j++) {\n        if (t[j].weight &lt; k &amp;&amp; t[j].parent == 0) {\n            k = t[j].weight;\n            m = j;\n        }\n    }\n    t[m].parent = 1;\n    return m;\n}\nvoid selectNum(hufmTree t[], int i,int &amp;p1 ,int &amp;p2) {    //\u200b\u6c42\u6743\u503c\u200b\u6700\u5c0f\u200b\u7684\u200b\u4e24\u4e2a\u200b\u7ed3\u70b9\u200b\n    int x;\n    p1 = minNum(t, i);\n    p2 = minNum(t, i);\n    if (p1 &gt; p2) {\n        x = p1;\n        p1 = p2;\n        p2 = x;\n    }\n}\nvoid createhufman(hufmTree t[],int x) {  //n\u200b\u4e3a\u200b\u521d\u59cb\u200b\u68ee\u6797\u200b\u7684\u200b\u7ed3\u70b9\u200b\u6570\u200b\n    if (x &lt;= 1) {\n        cout &lt;&lt; \"\u200b\u7ed3\u70b9\u200b\u6570\u200b\u4e0d\u80fd\u200b\u5c0f\u4e8e\u200b2\";\n        return;\n    }\n    int  m = x * 2;\n    for (int i = 1; i &lt; m; i++) {    //\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b  \u200b\u4e0b\u6807\u200b0\u200b\u7684\u200b\u5355\u5143\u200b\u4e0d\u7528\u200b\n        t[i].parent = 0;\n        t[i].lchild = 0;\n        t[i].rchild = 0;\n        t[i].weight = 0;\n    }\n    for (int i = 1; i &lt;= x; i++) {   //\u200b\u8bfb\u5165\u200b\u53f6\u5b50\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6743\u503c\u200b\n        cin &gt;&gt; t[i].data&gt;&gt; t[i].weight;\n    }\n    for (int i = n + 1; i &lt; m; i++) {  //\u200b\u5c06\u200bn\u200b\u4e2a\u200b\u53f6\u5b50\u200b\u7ed3\u70b9\u200b\u4e0e\u200bn-1\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u8fdb\u884c\u200b\u5408\u5e76\u200b\u5f62\u6210\u200b\u54c8\u592b\u66fc\u200b\u6811\u200b\n        int p1, p2;\n        selectNum(t, i, p1, p2);\n        t[p1].parent = i;\n        t[p2].parent = i;\n        t[i].lchild = p1;\n        t[i].rchild = p2;\n        t[i].weight = t[p1].weight + t[p2].weight;\n    }\n}\nvoid hufmCoding(hufmTree t[],int x,codetype cd[]) {\n    int c,p;\n    codetype flag; //\u200b\u7f13\u51b2\u200b\u53d8\u91cf\u200b\n    for (int i = 1; i &lt;= x; i++) {\n        flag.ch = t[i].data;\n        flag.start = x;\n        c = i;\n        p = t[i].parent;\n        while (p != 0) {\n            flag.start--;\n            if (t[p].lchild == c) {\n                flag.bits[flag.start] = '0';\n            }\n            else {\n                flag.bits[flag.start] = '1';\n            }\n            c = p;\n            p = t[p].parent;\n        }\n        cd[i] = flag;\n    }\n}\nvoid printhufm(hufmTree t[]) {\n    int y = 1;\n    cout &lt;&lt; \"\u200b\u5b57\u7b26\u200b   \u200b\u6743\u503c\u200b   \u200b\u5de6\u200b\u5b69\u5b50\u200b   \u200b\u53f3\u200b\u5b69\u5b50\u200b   \u200b\u7236\u4eb2\u200b\u7ed3\u70b9\u200b\" &lt;&lt; endl;\n    while (t[y].parent != 0) {\n        cout &lt;&lt; t[y] .data&lt;&lt;\"      \"&lt;&lt; t[y].weight &lt;&lt; \"      \"&lt;&lt; t[y].lchild&lt;&lt;\"      \"&lt;&lt; t[y].rchild&lt;&lt;\"      \"&lt;&lt; t[y].parent&lt;&lt;endl;\n        y++;\n    }\n    cout &lt;&lt; t[y].data &lt;&lt; \"      \" &lt;&lt; t[y].weight &lt;&lt; \"      \" &lt;&lt; t[y].lchild &lt;&lt; \"      \" &lt;&lt; t[y].rchild &lt;&lt; \"      \" &lt;&lt; t[y].parent &lt;&lt; endl;\n}\nvoid main() {\n    hufmTree T[100];\n    codetype cd[n];\n    cout &lt;&lt; \"\u200b\u8bf7\u200b\u8f93\u5165\u200b4\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5b57\u7b26\u200b\u548c\u200b\u6743\u503c\u200b\" &lt;&lt; endl;\n    createhufman(T,n);\n    cout &lt;&lt; \"\u200b\u54c8\u592b\u66fc\u200b\u7f16\u7801\u200b\u4e3a\u200b\uff1a\" &lt;&lt; endl;\n    printhufm(T);\n    hufmCoding(T,n, cd);\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; cd[i].ch &lt;&lt; \" \";\n        for (int j = cd[i].start; j &lt; n; j++) {\n            cout &lt;&lt; cd[i].bits[j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n    system(\"pause\");\n}\n</code></pre>"},{"location":"DataStruct/2-%E7%AE%97%E6%B3%95/","title":"\u7b97\u6cd5","text":"<p>\u200b\u7b97\u6cd5\u200b\uff1a\u200b\u662f\u200b\u5bf9\u200b\u7279\u5b9a\u200b\u95ee\u9898\u200b\u6c42\u89e3\u200b\u6b65\u9aa4\u200b\u7684\u200b\u4e00\u79cd\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u662f\u200b\u5bf9\u200b\u6307\u4ee4\u200b\u7684\u200b\u6709\u9650\u200b\u5e8f\u5217\u200b\u3002</p> <p>\u200b\u7b97\u6cd5\u200b\u4e0e\u200b\u6570\u636e\u7ed3\u6784\u200b\u7684\u200b\u5173\u7cfb\u200b\u7d27\u5bc6\u200b\uff0c\u200b\u5728\u200b\u8fdb\u884c\u200b\u7b97\u6cd5\u200b\u8bbe\u8ba1\u200b\u65f6\u200b\u9996\u5148\u200b\u8981\u200b\u786e\u5b9a\u200b\u76f8\u5e94\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u3002</p> <p>\u200b\u7b97\u6cd5\u200b\u7684\u200b\u7279\u6027\u200b\uff1a - \u200b\u6709\u7a77\u6027\u200b\uff1a\u200b\u7b97\u6cd5\u200b\u53ea\u200b\u6267\u884c\u200b\u6709\u9650\u200b\u6b65\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6bcf\u6b65\u200b\u5e94\u8be5\u200b\u5728\u200b\u6709\u9650\u200b\u7684\u200b\u65f6\u95f4\u200b\u5185\u200b\u5b8c\u6210\u200b\u3002 - \u200b\u786e\u5b9a\u6027\u200b\uff1a\u200b\u7b97\u6cd5\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u200b\u4e00\u6761\u200b\u6307\u4ee4\u200b\u5fc5\u987b\u200b\u6709\u200b\u786e\u5207\u200b\u7684\u200b\u542b\u4e49\u200b\uff0c\u200b\u65e0\u200b\u4e8c\u4e49\u6027\u200b\u3002 - \u200b\u53ef\u884c\u6027\u200b\uff1a\u200b\u7b97\u6cd5\u200b\u4e2d\u200b\u63cf\u8ff0\u200b\u7684\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u662f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5df2\u7ecf\u200b\u5b9e\u73b0\u200b\u7684\u200b\u57fa\u672c\u200b\u8fd0\u7b97\u200b\u6267\u884c\u200b\u6709\u9650\u200b\u6b21\u6765\u200b\u5b9e\u73b0\u200b\u7684\u200b\u3002 - \u200b\u8f93\u5165\u200b\uff1a\u200b\u7b97\u6cd5\u200b\u5177\u6709\u200b\u96f6\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u8f93\u5165\u200b\u3002 - \u200b\u8f93\u51fa\u200b\uff1a\u200b\u7b97\u6cd5\u200b\u5177\u6709\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u8f93\u51fa\u200b\u3002</p> <p>\u200b\u7b97\u6cd5\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u8981\u6c42\u200b\uff1a - \u200b\u6b63\u786e\u6027\u200b\uff1a\u200b\u7b97\u6cd5\u200b\u7684\u200b\u6267\u884c\u200b\u7ed3\u679c\u200b\u5e94\u5f53\u200b\u6ee1\u8db3\u200b\u9884\u5148\u89c4\u5b9a\u200b\u7684\u200b\u529f\u80fd\u200b\u548c\u200b\u6027\u80fd\u200b\u7684\u200b\u8981\u6c42\u200b\u3002 - \u200b\u53ef\u8bfb\u6027\u200b\uff1a\u200b\u6307\u200b\u7b97\u6cd5\u200b\u7684\u200b\u53ef\u8bfb\u6027\u200b\u7a0b\u5ea6\u200b\u3002 - \u200b\u5065\u58ee\u6027\u200b\uff1a\u200b\u662f\u200b\u6307\u200b\u4e00\u4e2a\u200b\u7b97\u6cd5\u200b\u5bf9\u200b\u4e0d\u5408\u7406\u200b\uff08\u200b\u53c8\u79f0\u200b\u4e0d\u200b\u6b63\u786e\u200b\u3001\u200b\u975e\u6cd5\u200b\u3001\u200b\u9519\u8bef\u200b\u7b49\u200b\uff09\u200b\u6570\u636e\u200b\u8f93\u5165\u200b\u7684\u200b\u53cd\u5e94\u200b\u548c\u200b\u5904\u7406\u200b\u80fd\u529b\u200b\u3002 - \u200b\u9ad8\u6548\u6027\u200b\uff1a\u200b\u7b97\u6cd5\u200b\u5e94\u200b\u6709\u6548\u200b\u4f7f\u7528\u200b\u5b58\u50a8\u7a7a\u95f4\u200b\u548c\u200b\u6709\u200b\u8f83\u200b\u9ad8\u200b\u7684\u200b\u65f6\u95f4\u200b\u6548\u7387\u200b\u3002</p> <p>\u200b\u7b97\u6cd5\u200b\u6548\u7387\u200b\u7684\u200b\u8861\u91cf\u200b\u51c6\u5219\u200b\uff1a\u200b\u4e3b\u8981\u200b\u662f\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u548c\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b</p> <p>\u200b\u4e00\u4e2a\u200b\u7b97\u6cd5\u200b\u7684\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200bT\uff08n\uff09\u200b\u662f\u200b\u8be5\u200b\u7b97\u6cd5\u200b\u7684\u200b\u65f6\u95f4\u200b\u8017\u8d39\u200b\uff0c\u200b\u662f\u200b\u8be5\u200b\u7b97\u6cd5\u200b\u6240\u200b\u6c42\u89e3\u200b\u95ee\u9898\u200b\u89c4\u6a21\u200bn\u200b\u7684\u200b\u51fd\u6570\u200b\u3002 \u200b\u5f53\u200b\u95ee\u9898\u200b\u89c4\u6a21\u200b\u8d8b\u4e8e\u200b\u65e0\u7a77\u5927\u200b\u65f6\u200b\uff0c\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200bT\uff08n\uff09\u200b\u7684\u200b\u6570\u91cf\u7ea7\u200b\uff08\u200b\u9636\u200b\uff09\u200b\u6210\u4e3a\u200b\u7b97\u6cd5\u200b\u7684\u200b\u6e10\u8fdb\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\uff0c\u200b\u7b80\u79f0\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u3002</p> <p>\u200b\u8bed\u53e5\u200b\u7684\u200b\u9891\u5ea6\u200b\uff1a\u200b\u8be5\u200b\u8bed\u53e5\u200b\u91cd\u590d\u200b\u6267\u884c\u200b\u7684\u200b\u6b21\u6570\u200b\u3002</p> <p>\u200b\u6700\u574f\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\uff1a\u200b\u6700\u574f\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u7684\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u3002</p> <p>\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\uff1a\u200b\u7b97\u6cd5\u200b\u5728\u200b\u6267\u884c\u200b\u65f6\u6240\u200b\u5360\u7528\u200b\u7684\u200b\u5b58\u50a8\u7a7a\u95f4\u200b\u3002</p> <p>\u200b\u7b97\u6cd5\u200b\u7684\u200b\u50a8\u5b58\u91cf\u200b\uff1a - \u200b\u7a0b\u5e8f\u200b\u672c\u8eab\u200b\u6240\u200b\u5360\u200b\u7684\u200b\u5b58\u50a8\u7a7a\u95f4\u200b - \u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u6240\u200b\u5360\u200b\u7684\u200b\u7a7a\u95f4\u200b - \u200b\u8f85\u52a9\u200b\u53d8\u91cf\u200b\u6240\u200b\u5360\u200b\u7684\u200b\u7a7a\u95f4\u200b</p>"},{"location":"DataStruct/3-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%A1%BA%E5%BA%8F%E8%A1%A8/","title":"\u7ebf\u6027\u8868\u200b\u987a\u5e8f\u200b\u8868","text":""},{"location":"DataStruct/3-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%A1%BA%E5%BA%8F%E8%A1%A8/#_2","title":"\u5b9a\u4e49","text":"<p>\u200b\u7ebf\u6027\u8868\u200b\uff1a\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7ebf\u6027\u200b\u7ed3\u6784\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u542b\u6709\u200b n\u22650 \u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6709\u9650\u200b\u5e8f\u5217\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u5176\u4e2d\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u6709\u4e14\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5f00\u59cb\u200b\u7ed3\u70b9\u200b\u6ca1\u6709\u200b\u524d\u9a71\u200b\u4f46\u200b\u6709\u200b\u4e00\u4e2a\u200b\u540e\u7ee7\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u6709\u4e14\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7ec8\u7aef\u200b\u7ed3\u70b9\u200b\u6ca1\u6709\u200b\u540e\u7ee7\u200b\u4f46\u200b\u6709\u200b\u4e00\u4e2a\u200b\u524d\u9a71\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u5176\u5b83\u200b\u7684\u200b\u7ed3\u70b9\u200b\u90fd\u200b\u6709\u200b\u4e14\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u524d\u9a71\u200b\u548c\u200b\u4e00\u4e2a\u200b\u540e\u7ee7\u200b\u7ed3\u70b9\u200b\u3002</p> <p>\u200b\u7ebf\u6027\u8868\u200b\u7531\u200b\u5206\u4e3a\u200b\u987a\u5e8f\u200b\u8868\u200b\u548c\u200b\u94fe\u8868\u200b\u4e24\u7c7b\u200b\u3002</p> <p>\u200b\u987a\u5e8f\u200b\u8868\u200b\uff1a\u200b\u5728\u200b\u5185\u5b58\u200b\u4e2d\u200b\u7528\u200b\u5730\u5740\u200b\u8fde\u7eed\u200b\u6709\u9650\u200b\u7684\u200b\u4e00\u5757\u200b\u5b58\u50a8\u7a7a\u95f4\u200b\u987a\u5e8f\u200b\u5b58\u653e\u200b\u7ebf\u6027\u8868\u200b\u7684\u200b\u5404\u4e2a\u200b\u5143\u7d20\u200b\u3002</p> <p>\u200b\u4f18\u70b9\u200b\uff1a\u200b\u903b\u8f91\u200b\u4e0a\u200b\u76f8\u90bb\u200b\u7684\u200b\u5143\u7d20\u200b\u5728\u200b\u5c4b\u91cc\u200b\u5b58\u50a8\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\u4e5f\u200b\u76f8\u90bb\u200b\uff0c\u200b\u968f\u673a\u5b58\u53d6\u200b\uff0c\u200b\u8fd0\u7b97\u200b\u7b80\u5355\u200b\u3002</p> <p>\u200b\u7f3a\u70b9\u200b\uff1a\u200b\u63d2\u5165\u200b\u5220\u9664\u200b\u9700\u8981\u200b\u5927\u91cf\u200b\u79fb\u52a8\u200b\u5143\u7d20\u200b\uff0c\u200b\u5176\u6b21\u200b\u662f\u200b\u8981\u200b\u9884\u5148\u200b\u5206\u914d\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u3002</p>"},{"location":"DataStruct/3-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%A1%BA%E5%BA%8F%E8%A1%A8/#_3","title":"\u4ee3\u7801","text":"<p>\u200b\u987a\u5e8f\u200b\u8868\u200b\u7684\u200b\u57fa\u672c\u64cd\u4f5c\u200b\uff1a - Init\uff08\uff09\u200b\u540c\u200b\u7b2c\u4e00\u4e2a\u200b\uff0c\u200b\u521d\u59cb\u5316\u200b\u7ebf\u6027\u8868\u200b\u4e3a\u7a7a\u200b - Length\uff08L\uff09 \u200b\u8fd4\u56de\u200b\u8868\u200bL\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\u200b\u5373\u8868\u4e2d\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b - Get\uff08L\uff0ci\uff09 \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200bL\u200b\u4e2d\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\uff081\u2264i\u2264n\uff09 - Prior\uff08L\uff0ci\uff09 \u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b - Next\uff08L\uff0ci\uff09 \u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u7ee7\u200b\u5143\u7d20\u200b - Locate\uff08L\uff0cx\uff09 \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200b\u5143\u7d20\u200bx\u200b\u5728\u200bL\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b - Insert\uff08L\uff0ci\uff0cx\uff09\u200b\u5728\u200b\u8868\u200bL\u200b\u7684\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx\uff0c\u200b\u5c06\u200b\u539f\u200b\u5360\u636e\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b\u53ca\u200b\u540e\u9762\u200b\u7684\u200b\u5143\u7d20\u200b\u90fd\u200b\u5411\u200b\u540e\u200b\u63a8\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b - Delete\uff08L\uff0cp\uff09 \u200b\u4ece\u8868\u200bL\u200b\u4e2d\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bp\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b - IsEmpty(L) \u200b\u5982\u679c\u200b\u8868\u200bL\u200b\u4e3a\u200b\u7a7a\u8868\u200b(\u200b\u957f\u5ea6\u200b\u4e3a\u200b0)\u200b\u5219\u200b\u8fd4\u56de\u200btrue\uff0c\u200b\u5426\u5219\u200b\u8fd4\u56de\u200bfalse - Clear\uff08L\uff09\u200b\u6e05\u9664\u200b\u6240\u6709\u200b\u5143\u7d20\u200b - Traverse\uff08L\uff09\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u5143\u7d20\u200b - Update\uff08L\uff0ci,x\uff09\u200b\u4fee\u6539\u200b\u5143\u7d20\u200b - Sort\uff08L\uff09\u200b\u5bf9\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\u91cd\u65b0\u200b\u6309\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u6761\u4ef6\u200b\u6392\u5e8f\u200b - Full(L) \u00a0\u200b\u68c0\u67e5\u200b\u987a\u5e8f\u200b\u8868\u200b\u662f\u5426\u200b\u4e3a\u200b\u6ee1\u200b</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdlib&gt;\n#define maxsize 100\nusing namespace std;\ntypedef int dataType;\ntypedef struct {\n    dataType data[maxsize];\n    int last;\n}sqlList;\n//\u200b\u521d\u59cb\u5316\u200b\u7ebf\u6027\u8868\u200b\u4e3a\u7a7a\u200b\nsqlList sqlListInit() {\n    sqlList l;\n    l.last = 0;\n    return l;\n}\n//\u200b\u8868\u4e2d\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b\nint sqlListLength(sqlList l) {\n    return l.last;\n}\n//\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200bL\u200b\u4e2d\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\nvoid sqlListGet(sqlList l,int i) {\n    if (i&lt;1 || i&gt;l.last) cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff01\" &lt;&lt; endl;\n    else cout &lt;&lt; i &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; l.data[i - 1] &lt;&lt; endl;\n}\n//\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\nvoid sqlListPrior(sqlList l, int i) {\n    if (i&lt;1 || i&gt;l.last) cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff01\" &lt;&lt; endl;\n    else if(i == 1) cout&lt;&lt;\"\u200b\u9996\u200b\u5143\u7d20\u200b\u6ca1\u6709\u200b\u524d\u9a71\u200b\uff01\"&lt;&lt;endl;\n    else cout &lt;&lt;\"\u200b\u4f4d\u7f6e\u200b\uff1a\"&lt;&lt;i&lt;&lt;\"\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\u4e3a\u200b:\"&lt;&lt;l.data[i - 2] &lt;&lt; endl;;\n}\n//\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u7ee7\u200b\u5143\u7d20\u200b\nvoid sqlListNext(sqlList l, int i) {\n    if (i&lt;1 || i&gt;l.last) cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\" &lt;&lt; endl;\n    else if (i == l.last) cout&lt;&lt;\"\u200b\u5c3e\u200b\u5143\u7d20\u200b\u6ca1\u6709\u200b\u540e\u9a71\u200b\uff01\"&lt;&lt;endl;\n    else cout&lt;&lt;\"\u200b\u4f4d\u7f6e\u200b\"&lt;&lt;i&lt;&lt;\"\u200b\u7684\u200b\u540e\u200b\u9a71\u662f\u200b\uff1a\"&lt;&lt;l.data[i]&lt;&lt;endl;\n}\n//\u200b\u5143\u7d20\u200bx\u200b\u5728\u200bL\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\nvoid sqlListLocate(sqlList l, dataType x) {\n    int i = 1;\n    while (i &lt;= l.last &amp;&amp; l.data[i - 1] != x) {\n        i++;\n    }\n    if (i &lt;= l.last) cout&lt;&lt;x&lt;&lt;\"\u200b\u5728\u200b\u8868\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u662f\u200b\uff1a\"&lt;&lt;i&lt;&lt;endl;\n    else cout&lt;&lt;\"\u200b\u4e0d\u200b\u5728\u200b\u8868\u4e2d\u200b\"&lt;&lt;endl;\n}\n//\u200b\u5728\u200b\u8868\u200bL\u200b\u7684\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx\nsqlList sqlListInsert(sqlList l,int i,dataType x) {\n    if (l.last == maxsize) {\n        cout &lt;&lt; \"\u200b\u8868\u6ee1\u200b\uff01\u200b\u63d2\u5165\u200b\u5931\u8d25\u200b\uff01\" &lt;&lt; endl;\n        return l;\n    }\n    else if (i&lt;1 || i&gt;l.last) {\n        cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\" &lt;&lt; endl;\n        return l;\n    }\n    else for (int m = l.last; m &gt;= i;m--) {\n        l.data[m] = l.data[m-1];\n    }\n    l.data[i-1] = x;\n    ++l.last;\n    return l;\n}\n//\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\nsqlList sqlListDelete(sqlList l,int i) {\n    if (i&lt;1 || i&gt;l.last) {\n        cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\" &lt;&lt; endl; \n        return l;\n    }\n    for (int m = i-1; m &lt;l.last-1; m++) {\n        l.data[m] = l.data[m+1];\n    }\n    --l.last;\n    return l;\n}\n//\u200b\u8868\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b\nvoid sqlListEmpty(sqlList l) {\n    if (l.last == 0) {\n        cout &lt;&lt; \"\u200b\u662f\u200b\u7a7a\u8868\u200b\uff01\" &lt;&lt; endl;\n    }\n    else cout &lt;&lt; \"\u200b\u4e0d\u662f\u200b\u7a7a\u8868\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u6e05\u7a7a\u200b\u8868\u200b\nsqlList sqlListClear(sqlList l) {\n    l.last = 0;\n    return l;\n}\n//\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\nvoid sqlListTraverse(sqlList l) {\n    cout &lt;&lt; \"\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\u662f\u200b\uff1a\";\n    for (int m = 0; m &lt;= l.last - 1; m++) {\n        cout &lt;&lt; l.data[m] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}\n//\u200b\u5c06\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b\u4fee\u6539\u200b\u4e3a\u200bx\nsqlList sqlListUpdate(sqlList l,int i,dataType x) {\n    if (i&lt;1 || i&gt;l.last) {\n        cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\" &lt;&lt; endl;\n        return l;\n    }\n    else l.data[i - 1] = x;\n    cout &lt;&lt; \"\u200b\u4fee\u6539\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u6392\u5e8f\u200b\nsqlList sqlListSort(sqlList l) {\n    dataType t;\n    for (int i = 0; i &lt; l.last;i++) {\n        for (int j = i + 1; j &lt; l.last; j++) {\n            if (l.data[i] &gt; l.data[j]) {\n                t = l.data[i];\n                l.data[i] = l.data[j];\n                l.data[j] = t;\n            }\n        }\n    }\n    cout &lt;&lt; \"\u200b\u6392\u5e8f\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u8868\u200b\u662f\u5426\u200b\u6ee1\u200b\nvoid sqlListFull(sqlList l) {\n    if (l.last == maxsize) {\n        cout &lt;&lt; \"\u200b\u8868\u6ee1\u200b\uff01\" &lt;&lt; endl;\n    }\n    else cout &lt;&lt; \"\u200b\u8868\u200b\u4e0d\u662f\u200b\u6ee1\u8868\u200b\uff01\" &lt;&lt; endl;\n}\nvoid print() {\n    cout &lt;&lt; \"*************************************************\"&lt;&lt;endl;\n    cout &lt;&lt; \"*  1.\u200b\u987a\u5e8f\u200b\u8868\u200b\u7684\u200b\u957f\u5ea6\u200b          2.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b  *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  3.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u200b\u9a71\u200b         4.\u200b\u5143\u7d20\u200bx\u200b\u7684\u200b\u4f4d\u7f6e\u200b   *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  5.\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx    6.\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b  *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  7.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b         8.\u200b\u8868\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b    *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  9.\u200b\u6e05\u7a7a\u200b\u8868\u200b         10.\u200b\u904d\u5386\u200b\u8868\u200b             *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  11.\u200b\u4fee\u6539\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b    12.\u200b\u6392\u5e8f\u200b             *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  13.\u200b\u8868\u200b\u662f\u5426\u200b\u6ee1\u200b       14.\u200b\u9000\u51fa\u200b          *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  15.\u200b\u6e05\u7a7a\u200b\u547d\u4ee4\u884c\u200b                     *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*************************************************\"&lt;&lt; endl;\n}\nvoid main() {\n    sqlList l = sqlListInit();\n    for (int i = 40; i &gt; 0; i--) {\n        l.data[i - 1] = i;\n    }\n    l.last = 40;\n    int m=0,i = 0,n=0;\n    print();\n    while (1) {\n        cin &gt;&gt; i;\n        switch (i)\n        {\n        case 1:cout &lt;&lt;\"\u200b\u987a\u5e8f\u200b\u8868\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b\uff1a\"&lt;&lt;sqlListLength(l) &lt;&lt; endl; break;\n        case 2:cin &gt;&gt; m;sqlListPrior(l, m); break;\n        case 3:cin &gt;&gt; m; sqlListNext(l, m); break;\n        case 4:cin &gt;&gt; m; sqlListLocate(l, m); break;\n        case 5:cin &gt;&gt; m &gt;&gt; n;l=sqlListInsert(l, m, n); break;\n        case 6:cin &gt;&gt; m;l=sqlListDelete(l, m); break;\n        case 7:cin &gt;&gt; m; sqlListGet(l, m);break;\n        case 8:sqlListEmpty(l);break;\n        case 9:l = sqlListClear(l);break;\n        case 10:sqlListTraverse(l);break;\n        case 11:cin &gt;&gt; m; cin &gt;&gt; n;l = sqlListUpdate(l,m,n); break;\n        case 12:l = sqlListSort(l);break;\n        case 13:sqlListFull(l);break;\n        case 14:exit(0);\n        case 15:system(\"cls\"); print();break;\n        default:cout &lt;&lt; \"\u200b\u6570\u5b57\u200b\u8d85\u51fa\u8303\u56f4\u200b\uff0c\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\u3002\" &lt;&lt; endl; break;\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/4-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8/","title":"\u94fe\u8868","text":""},{"location":"DataStruct/4-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8/#_2","title":"\u94fe\u8868\u200b\u5b9a\u4e49","text":"<p>\u200b\u4ee5\u200b\u94fe\u5f0f\u200b\u7ed3\u6784\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u7684\u200b\u7ebf\u6027\u8868\u200b\u79f0\u4e3a\u200b\u7ebf\u6027\u200b\u94fe\u8868\u200b\u3002</p> <p>\u200b\u5143\u7d20\u200b\u672c\u8eab\u200b\u7684\u200b\u4fe1\u606f\u200b\u548c\u200b\u5176\u200b\u540e\u671f\u200b\u4fe1\u606f\u200b\u7ec4\u6210\u200b\u6570\u636e\u200b\u5143\u7d20\u200b\u7684\u200b\u5b58\u50a8\u200b\u6620\u50cf\u200b\uff0c\u200b\u79f0\u4e3a\u200b\u7ed3\u70b9\u200b;</p> <p>\u200b\u7ebf\u6027\u200b\u94fe\u8868\u200b\u6709\u200b\u4e09\u79cd\u200b\uff1a - \u200b\u5355\u94fe\u200b\u8868\u200b - \u200b\u53cc\u94fe\u200b\u8868\u200b - \u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u3002 \u200b\u5bf9\u200b\u94fe\u8868\u200b\u7684\u200b\u4efb\u4f55\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u5fc5\u987b\u200b\u4ece\u200b\u7b2c\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u5f00\u59cb\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5730\u5740\u200b\u5b58\u653e\u200b\u5728\u200b\u4e00\u4e2a\u200b\u6307\u9488\u200b\u53d8\u91cf\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u6307\u9488\u200b\u53d8\u91cf\u200b\u6307\u5411\u200b\u7b2c\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\uff0c \u200b\u4e5f\u200b\u5c31\u662f\u200b\u94fe\u8868\u200b\u6700\u200b\u524d\u9762\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u56e0\u6b64\u200b\u8fd9\u4e2a\u200b\u6307\u9488\u200b\u53d8\u91cf\u200b\u5e38\u200b\u79f0\u4e3a\u200b\u5934\u200b\u6307\u9488\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5728\u200b\u6574\u4e2a\u200b\u7ebf\u6027\u200b\u94fe\u8868\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u4e4b\u524d\u200b\u52a0\u5165\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u79f0\u4e3a\u200b\u5934\u200b\u7ed3\u70b9\u200b\u3002</p> <p>\u200b\u94fe\u8868\u200b\u4f18\u7f3a\u70b9\u200b\uff1a - \u200b\u7f3a\u200b\uff1a\u200b\u5931\u53bb\u200b\u4e86\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u7684\u200b\u968f\u673a\u200b\u5b58\u50a8\u200b\u7279\u70b9\u200b\uff0c\u200b\u5728\u200b\u67e5\u627e\u200b\u7b49\u200b\u7b97\u6cd5\u200b\u4e2d\u8981\u200b\u6bd4\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u6162\u200b\u3002 - \u200b\u4f18\u200b\uff1a\u200b\u63d2\u5165\u200b\u6216\u200b\u5220\u9664\u200b\u8981\u200b\u6bd4\u200b\u987a\u5e8f\u200b\u8868\u200b\u65b9\u4fbf\u200b\u5f97\u200b\u591a\u200b\u3002</p>"},{"location":"DataStruct/4-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8/#_3","title":"\u5355\u94fe\u200b\u8868","text":"<p>\u200b\u5355\u94fe\u200b\u8868\u662f\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u4e00\u79cd\u200b\u94fe\u5f0f\u200b\u7ed3\u6784\u200b\u3002\u200b\u8868\u4e2d\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u7ed3\u70b9\u200b\u5305\u62ec\u200b\u4e24\u200b\u90e8\u5206\u200b\uff1a\u200b\u6570\u636e\u200b\u57df\u200b\u548c\u200b\u540e\u7ee7\u200b\u8282\u70b9\u200b\u7684\u200b\u5730\u5740\u200b\u57df\u200b\u3002 \u200b\u5730\u5740\u200b\u57df\u200b\uff1a\u200b\u5b58\u653e\u6570\u636e\u200b\u5143\u7d20\u200b\u4fe1\u606f\u200b\u7684\u200b\u57df\u200b\u3002 \u200b\u6307\u9488\u200b\u57df\u200b\uff1a\u200b\u5b58\u653e\u200b\u540e\u671f\u200b\u5730\u5740\u200b\u7684\u200b\u57df\u200b\u3002 \u200b\u56e0\u4e3a\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u4e2d\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b\u540e\u7ee7\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5c31\u200b\u79f0\u4e3a\u200b\u5355\u94fe\u200b\u8868\u200b\u3002</p> <p>\u200b\u5355\u94fe\u200b\u8868\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff1a\u200b\u5934\u200b\u63d2\u6cd5\u200b\u548c\u200b\u5c3e\u200b\u63d2\u6cd5\u200b\u4e24\u79cd\u200b\u3002\u200b\u540c\u65f6\u200b\u4e5f\u200b\u5206\u5e26\u200b\u7ed3\u70b9\u200b\u548c\u200b\u4e0d\u5e26\u200b\u7ed3\u70b9\u200b\uff01</p>"},{"location":"DataStruct/4-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8/#_4","title":"\u5934\u200b\u63d2\u6cd5","text":""},{"location":"DataStruct/4-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8/#_5","title":"\u5c3e\u200b\u63d2\u6cd5","text":""},{"location":"DataStruct/4-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8/#_6","title":"\u4ee3\u7801","text":"<p>\u200b\u5355\u94fe\u200b\u8868\u200b\u7684\u200b\u57fa\u672c\u64cd\u4f5c\u200b\uff1a - Length\uff08L\uff09 \u200b\u8fd4\u56de\u200b\u8868\u200bL\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\u200b\u5373\u8868\u4e2d\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b - Prior\uff08L\uff0ci\uff09 \u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b - Next\uff08L\uff0ci\uff09 \u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u7ee7\u200b\u5143\u7d20\u200b - Locate\uff08L\uff0cx\uff09 \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200b\u5143\u7d20\u200bx\u200b\u5728\u200bL\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b - Insert\uff08L\uff0ci\uff0cx\uff09\u200b\u5728\u200b\u8868\u200bL\u200b\u7684\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx\uff0c\u200b\u5c06\u200b\u539f\u200b\u5360\u636e\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b\u53ca\u200b\u540e\u9762\u200b\u7684\u200b\u5143\u7d20\u200b\u90fd\u200b\u5411\u200b\u540e\u200b\u63a8\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b - Delete\uff08L\uff0cp\uff09 \u200b\u4ece\u8868\u200bL\u200b\u4e2d\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bp\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b - Get\uff08L\uff0ci\uff09 \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200bL\u200b\u4e2d\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\uff081\u2264i\u2264n\uff09 - Empty(L) \u200b\u5982\u679c\u200b\u8868\u200bL\u200b\u4e3a\u200b\u7a7a\u8868\u200b(\u200b\u957f\u5ea6\u200b\u4e3a\u200b0)\u200b\u5219\u200b\u8fd4\u56de\u200btrue\uff0c\u200b\u5426\u5219\u200b\u8fd4\u56de\u200bfalse - Clear\uff08L\uff09\u200b\u6e05\u9664\u200b\u6240\u6709\u200b\u5143\u7d20\u200b - Traverse\uff08L\uff09\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u5143\u7d20\u200b - Update\uff08L\uff0ci,x\uff09\u200b\u4fee\u6539\u200b\u5143\u7d20\u200b - \u200b\u9000\u51fa\u200b - \u200b\u6e05\u7a7a\u200b\u547d\u4ee4\u884c\u200b\uff01 - CreateT() \u200b\u5934\u200b\u63d2\u6cd5\u200b - CreateW1() \u200b\u5c3e\u200b\u63d2\u6cd5\u200b\uff08\u200b\u5e26\u5934\u200b\u7ed3\u70b9\u200b\uff09 - CreateW2()\u200b\u5c3e\u200b\u63d2\u6cd5\u200b\uff08\u200b\u4e0d\u200b\u5e26\u5934\u200b\u7ed3\u70b9\u200b\uff09 <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdlib&gt;\n#include&lt;malloc.h&gt;\nusing namespace std;\ntypedef int dataType;\ntypedef struct Node{\n    dataType data=-1;\n    struct Node *next;\n}LNode,*LinkedList;\n//\u200b\u521b\u5efa\u200b\u94fe\u8868\u200b  \u200b\u5934\u200b\u63d2\u6cd5\u200b\nLinkedList linkedListCreateT() {\n    int i = 1;\n    LinkedList l = (LNode*)malloc(sizeof(LNode));\n    if (l == NULL) {\n        cout &lt;&lt; \"\u200b\u521b\u5efa\u200b\u5931\u8d25\u200b\u6ca1\u6709\u200b\u8db3\u591f\u200b\u7a7a\u95f4\u200b\uff01\" &lt;&lt; endl;\n        return l;\n    }\n    l-&gt;next = NULL;\n    while (i != 21) {\n        LinkedList p = (LNode*)malloc(sizeof(LNode));\n        p-&gt;data = i;\n        ++i;\n        p-&gt;next = l-&gt;next;\n        l-&gt;next = p;\n    }\n    cout &lt;&lt; \"\u200b\u5934\u200b\u63d2\u6cd5\u200b\u5355\u94fe\u200b\u8868\u200b\u521b\u5efa\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u521b\u5efa\u200b\u94fe\u8868\u200b  \u200b\u5c3e\u200b\u63d2\u6cd5\u200b \u200b\u5e26\u5934\u200b\u7ed3\u70b9\u200b\nLinkedList linkedListCreateW1() {\n    int i = 1;\n    LinkedList r;\n    LinkedList l = (LNode*)malloc(sizeof(LNode));\n    if (l == NULL) {\n        cout &lt;&lt; \"\u200b\u521b\u5efa\u200b\u5931\u8d25\u200b\u6ca1\u6709\u200b\u8db3\u591f\u200b\u7a7a\u95f4\u200b\uff01\" &lt;&lt; endl;\n        return l;\n    } \n    l-&gt;next = NULL;\n    r = l;\n    while (i != 21) {\n        LinkedList p = (LNode*)malloc(sizeof(LNode));\n        p-&gt;data = i;\n        ++i;\n        p-&gt;next = r-&gt;next;\n        r-&gt;next = p;\n        r = p;\n    }\n    cout &lt;&lt; \"\u200b\u5c3e\u200b\u63d2\u6cd5\u200b\u5e26\u5934\u200b\u7ed3\u70b9\u200b\u5355\u94fe\u200b\u8868\u200b\u521b\u5efa\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u521b\u5efa\u200b\u94fe\u8868\u200b  \u200b\u5c3e\u200b\u63d2\u6cd5\u200b \u200b\u4e0d\u200b\u5e26\u5934\u200b\u7ed3\u70b9\u200b\nLinkedList linkedListCreateW2() {\n    int i = 1;\n    LinkedList r;\n    LinkedList l = (LNode*)malloc(sizeof(LNode));\n    if (l == NULL) {\n        cout &lt;&lt; \"\u200b\u521b\u5efa\u200b\u5931\u8d25\u200b\u6ca1\u6709\u200b\u8db3\u591f\u200b\u7a7a\u95f4\u200b\uff01\" &lt;&lt; endl;\n        return l;\n    }\n    l-&gt;next = NULL;\n    r = l;\n    while (i != 21) {\n        LinkedList p = (LNode*)malloc(sizeof(LNode));\n        p-&gt;data = i;\n        ++i;\n        if (l == NULL) l = p;\n        else r-&gt;next = p;\n        r = p;\n    }\n    if (r != NULL) r-&gt;next = NULL;\n    cout &lt;&lt; \"\u200b\u5c3e\u200b\u63d2\u6cd5\u200b\u4e0d\u200b\u5e26\u5934\u200b\u7ed3\u70b9\u200b\u5355\u94fe\u200b\u8868\u200b\u521b\u5efa\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u8868\u4e2d\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b\nint  linkedListLength(LinkedList l) {\n    int i=0;\n    LinkedList p;\n    if (l-&gt;data &gt; 0) {\n        p = l;\n        while (p!= NULL) {\n            ++i;\n            p = p-&gt;next;\n        }\n    }\n    else {\n        p = l-&gt;next;\n        while (p!= NULL) {\n            ++i;\n            p = p-&gt;next;\n        }\n    }\n    return i;\n}\n//\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200bL\u200b\u4e2d\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\nvoid linkedListGet(LinkedList l,int i) {\n    if (i&lt;1 || i&gt; linkedListLength(l)) cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u94fe\u8868\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff01\" &lt;&lt; endl;\n    else { \n        int j = 0;\n        LinkedList p;\n        if (l-&gt;data != NULL) {\n            p = l;\n            while (p-&gt;next != NULL &amp;&amp; j!= i) {\n                ++j;\n                p = p-&gt;next;\n            }\n        }\n        else {\n            p = l-&gt;next;\n            while (p-&gt;next != NULL &amp;&amp; j!=i) {\n                ++j;\n                p = p-&gt;next;\n            }\n        }\n        cout &lt;&lt; i &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; p-&gt;data &lt;&lt; endl; \n    }\n}\n//\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\nvoid linkedListPrior(LinkedList l, int i) {\n    if (i&lt;1 || i&gt; linkedListLength(l)) cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff01\" &lt;&lt; endl;\n    else if(i == 1) cout&lt;&lt;\"\u200b\u9996\u200b\u5143\u7d20\u200b\u6ca1\u6709\u200b\u524d\u9a71\u200b\uff01\"&lt;&lt;endl;\n    else {\n        int j = 0;\n        LinkedList p;\n        if (l-&gt;data != NULL) {\n            p = l;\n            while (p-&gt;next != NULL &amp;&amp; j!=i-1) {\n                ++j;\n                p = p-&gt;next;\n            }\n        }\n        else {\n            p = l-&gt;next;\n            while (p-&gt;next != NULL &amp;&amp; j != i - 1) {\n                ++j;\n                p = p-&gt;next;\n            }\n        }\n        cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\uff1a\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\u4e3a\u200b:\" &lt;&lt; p-&gt;data &lt;&lt; endl;\n    }\n}\n//\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u7ee7\u200b\u5143\u7d20\u200b\nvoid linkedListNext(LinkedList l, int i) {\n    if (i&lt;1 || i&gt; linkedListLength(l)) cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\" &lt;&lt; endl;\n    else if (i == linkedListLength(l)) cout&lt;&lt;\"\u200b\u5c3e\u200b\u5143\u7d20\u200b\u6ca1\u6709\u200b\u540e\u9a71\u200b\uff01\"&lt;&lt;endl;\n    else {\n        int j = 0;\n        LinkedList p;\n        if (l-&gt;data != NULL) {\n            p = l;\n            while (p-&gt;next != NULL &amp;&amp; j != i + 1) {\n                ++j;\n                p = p-&gt;next;\n            }\n        }\n        else {\n            p = l-&gt;next;\n            while (p-&gt;next != NULL &amp;&amp; j != i + 1) {\n                ++j;\n                p = p-&gt;next;\n            }\n        }\n        cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u540e\u200b\u9a71\u662f\u200b\uff1a\" &lt;&lt; p-&gt;data &lt;&lt; endl;\n    }\n}\n//\u200b\u5143\u7d20\u200bx\u200b\u5728\u200bL\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\nvoid linkedListLocate(LinkedList l, dataType x) {\n    int i = 0;\n    LinkedList p;\n    if (l-&gt;data != NULL) {\n        p = l;\n        while (p-&gt;next != NULL &amp;&amp; p-&gt;data != x) {\n            ++i;\n            p = p-&gt;next;\n        }\n    }\n    else {\n        p = l-&gt;next;\n        while (p-&gt;next != NULL &amp;&amp; p-&gt;data != x) {\n            ++i;\n            p = p-&gt;next;\n        }\n    }\n    if (i &lt;= linkedListLength(l)) cout&lt;&lt;x&lt;&lt;\"\u200b\u5728\u200b\u8868\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u662f\u200b\uff1a\"&lt;&lt;i&lt;&lt;endl;\n    else cout&lt;&lt;\"\u200b\u4e0d\u200b\u5728\u200b\u8868\u4e2d\u200b\"&lt;&lt;endl;\n}\n//\u200b\u5728\u200b\u8868\u200bL\u200b\u7684\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx\nLinkedList linkedListInsert(LinkedList l,int i,dataType x) {\n    int j = 1;\n    LinkedList pri=l,s=l;\n    LinkedList p = (LNode*)malloc(sizeof(LNode));\n    p-&gt;data = x;\n    if (l-&gt;data &gt; 0) {\n        if (i == 1) {\n            p-&gt;next = l;\n            cout &lt;&lt; \"\u200b\u63d2\u5165\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n            return p;\n        }\n        else while (j != i + 1) {\n            pri = s;\n            s = s-&gt;next;\n            ++j;\n        }\n        pri-&gt;next = p;\n        p-&gt;next = s;\n    }\n    else {\n        while (j != i + 1) {\n            pri = s;\n            s = s-&gt;next;\n            ++j;\n        }\n        pri-&gt;next = p;\n        p-&gt;next = s;\n    }\n    cout &lt;&lt; \"\u200b\u63d2\u5165\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\nLinkedList linkedListDelete(LinkedList l,int i) {\n    int j = 1;\n    LinkedList pri = l, p = l;\n    if (i&lt;1 || i&gt; linkedListLength(l)) {\n        cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\" &lt;&lt; endl; \n        return l;\n    }\n    if (l-&gt;data &gt; 0) {\n        if (i == 1) {\n            p = p-&gt;next;\n            free(pri);\n            cout &lt;&lt; \"\u200b\u5220\u9664\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n            return p;\n        }\n        else while (i != j) {\n            pri = p;\n            p = p-&gt;next;\n            ++j;\n        }\n        pri-&gt;next = p-&gt;next;\n        free(p);\n    }\n    else {\n        p = p-&gt;next;\n        if (i == 1) {\n            pri = p;\n            p = p-&gt;next;\n            l-&gt;next = p;\n            free(pri);\n        }\n        else {\n            while (i != j) {\n                pri = p;\n                p = p-&gt;next;\n                ++j;\n            }\n            pri-&gt;next = p-&gt;next;\n            free(p);\n        }\n    }\n    cout &lt;&lt; \"\u200b\u5220\u9664\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u8868\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b\nvoid linkedListEmpty(LinkedList l) {\n    if (l-&gt;next==NULL) {\n        cout &lt;&lt; \"\u200b\u662f\u200b\u7a7a\u8868\u200b\uff01\" &lt;&lt; endl;\n    }\n    else cout &lt;&lt; \"\u200b\u4e0d\u662f\u200b\u7a7a\u8868\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u6e05\u7a7a\u200b\u8868\u200b\nLinkedList linkedListClear(LinkedList l) {\n    LinkedList p,r;\n    p = l-&gt;next;\n    while (p!= NULL) {\n        r = p-&gt;next;\n        free(p);\n        p = r;\n    }\n    l-&gt;next=NULL;\n    l-&gt;data = NULL;\n    cout &lt;&lt; \"\u200b\u6e05\u7a7a\u200b\u5b8c\u6210\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\nvoid linkedListTraverse(LinkedList l) {\n    LinkedList p=l;\n    if (linkedListLength(l) != 0) {\n        cout &lt;&lt; \"\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\u662f\u200b\uff1a\";\n        if (l-&gt;data &gt; 0) {\n            while (p-&gt;next != NULL) {\n                cout &lt;&lt; p-&gt;data &lt;&lt; \" \";\n                p = p-&gt;next;\n            }\n            cout &lt;&lt; p-&gt;data;\n        }\n        else {\n            p = p-&gt;next;\n            while (p-&gt;next != NULL) {\n                cout &lt;&lt; p-&gt;data &lt;&lt; \" \";\n                p = p-&gt;next;\n            }\n        }\n        cout &lt;&lt; p-&gt;data;\n        cout &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u7a7a\u8868\u200b\u4e0d\u80fd\u200b\u904d\u5386\u200b\uff01\" &lt;&lt; endl;\n    }\n}\n//\u200b\u5c06\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b\u4fee\u6539\u200b\u4e3a\u200bx\nLinkedList sqlListUpdate(LinkedList l,int i,dataType x) {\n    LinkedList p=l;\n    int j = 1;\n    if (i&lt;1 || i&gt; linkedListLength(l)) {\n        cout &lt;&lt; \"\u200b\u8d85\u51fa\u200b\u987a\u5e8f\u200b\u8868\u200b\u957f\u5ea6\u200b\uff01\" &lt;&lt; endl;\n        return l;\n    }\n    if(l-&gt;data &gt; 0){\n        while (i != j) {\n            p = p-&gt;next;\n            ++j;\n        }\n        p-&gt;data = x;\n    }\n    else {\n        p = p-&gt;next;\n        while (i != j) {\n            p = p-&gt;next;\n            ++j;\n        }\n        p-&gt;data = x;\n    }\n    cout &lt;&lt; \"\u200b\u4fee\u6539\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\nvoid print() {\n    cout &lt;&lt; \"*********************************************\"&lt;&lt;endl;\n    cout &lt;&lt; \"*  1.\u200b\u94fe\u8868\u200b\u7684\u200b\u957f\u5ea6\u200b        2.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b     *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  3.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u200b\u9a71\u200b          4.\u200b\u5143\u7d20\u200bx\u200b\u7684\u200b\u4f4d\u7f6e\u200b  *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  5.\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx    6.\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  7.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b          8.\u200b\u8868\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b       *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  9.\u200b\u6e05\u7a7a\u200b\u8868\u200b              10.\u200b\u904d\u5386\u200b\u8868\u200b        *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  11.\u200b\u4fee\u6539\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b    12.\u200b\u9000\u51fa\u200b             *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  13.\u200b\u6e05\u7a7a\u200b\u547d\u4ee4\u884c\u200b           14\u200b\u5934\u200b\u63d2\u6cd5\u200b             *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  15.\u200b\u5c3e\u200b\u63d2\u6cd5\u200b\uff08\u200b\u5e26\u5934\u200b\u7ed3\u70b9\u200b\uff09  16\u200b\u5c3e\u200b\u63d2\u6cd5\u200b\uff08\u200b\u4e0d\u200b\u5e26\u5934\u200b\uff09*\" &lt;&lt; endl;\n    cout &lt;&lt; \"*********************************************\"&lt;&lt; endl;\n}\nvoid main() {\n    int m=0,i = 0,n=0;\n    LinkedList l = linkedListCreateT();\n    print();\n    while (1) {\n        cin &gt;&gt; i;\n        switch (i)\n        {\n        case 1:cout &lt;&lt;\"\u200b\u94fe\u8868\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b\uff1a\"&lt;&lt;linkedListLength(l) &lt;&lt; endl; break;\n        case 2:cin &gt;&gt; m;linkedListPrior(l, m); break;\n        case 3:cin &gt;&gt; m; linkedListNext(l, m); break;\n        case 4:cin &gt;&gt; m; linkedListLocate(l, m); break;\n        case 5:cin &gt;&gt; m &gt;&gt; n;l=linkedListInsert(l, m, n); break;\n        case 6:cin &gt;&gt; m;l=linkedListDelete(l, m); break;\n        case 7:cin &gt;&gt; m; linkedListGet(l, m);break;\n        case 8:linkedListEmpty(l);break;\n        case 9:l = linkedListClear(l);break;\n        case 10:linkedListTraverse(l);break;\n        case 11:cin &gt;&gt; m; cin &gt;&gt; n;l = sqlListUpdate(l,m,n); break;\n        case 12:exit(0);\n        case 13:system(\"cls\"); print();break;\n        case 14:l = linkedListCreateT(); break;\n        case 15:l = linkedListCreateW1(); break;\n        case 16:l = linkedListCreateW2(); break;\n        default:cout &lt;&lt; \"\u200b\u6570\u5b57\u200b\u8d85\u51fa\u8303\u56f4\u200b\uff0c\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\u3002\" &lt;&lt; endl; break;\n        }\n    }\n}\n</code></pre></p>"},{"location":"DataStruct/5-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/","title":"\u5faa\u73af\u200b\u94fe\u8868","text":""},{"location":"DataStruct/5-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_2","title":"\u5b9a\u4e49","text":"<p>\u200b\u5c06\u200b\u94fe\u8868\u200b\u901a\u8fc7\u200b\u6307\u9488\u200b\u57df\u200b\u9996\u5c3e\u76f8\u63a5\u200b\uff0c\u200b\u5373\u200b\u94fe\u8868\u200b\u5c3e\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6307\u9488\u200b\u57df\u200b\u6307\u5411\u200b\u5934\u200b\u7ed3\u70b9\u200b\u5f62\u6210\u200b\u7684\u200b\u94fe\u8868\u200b\u53eb\u505a\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u3002 </p> <p>\u200b\u7531\u200b\u5355\u94fe\u200b\u8868\u200b\u6784\u6210\u200b\u53eb\u505a\u200b\u5355\u5faa\u73af\u200b\u94fe\u8868\u200b\u3002</p> <p>\u200b\u5355\u5faa\u73af\u200b\u94fe\u8868\u200b\u5728\u200b\u4efb\u610f\u200b\u4e00\u200b\u7ed3\u70b9\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u8bbf\u95ee\u200b\u5176\u4ed6\u200b\u8282\u70b9\u200b\uff0c\u200b\u7528\u200b\u6307\u9488\u200b\u662f\u5426\u200b\u4e3a\u200bnull\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u5230\u8fbe\u200b\u94fe\u8868\u200b\u5c3e\u200b\u3002\u200b\u4e00\u822c\u200b\u4f7f\u7528\u200b\u5c3e\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6307\u9488\u200b\u6765\u200b\u8868\u793a\u200b\uff0c \u200b\u63d0\u9ad8\u6548\u7387\u200b\u3002</p>"},{"location":"DataStruct/5-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#_3","title":"\u4ee3\u7801","text":"<p>\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u64cd\u4f5c\u200b\uff1a(\u200b\u7531\u200b\u4e24\u4e2a\u200b\u5355\u94fe\u200b\u8868\u200b\u6784\u6210\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\uff0c\u200b\u5176\u4e2d\u200b\u4fdd\u7559\u200b\u4e00\u4e2a\u5934\u200b\u7ed3\u70b9\u200b\u4f5c\u4e3a\u200b\u5c3e\u200b\u7ed3\u70b9\u200b) - Length\uff08L\uff09 \u200b\u8fd4\u56de\u200b\u8868\u200bL\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\u200b\u5373\u8868\u4e2d\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b - Prior\uff08L\uff0ci\uff09 \u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b - Next\uff08L\uff0ci\uff09 \u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u7ee7\u200b\u5143\u7d20\u200b - Locate\uff08L\uff0cx\uff09 \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200b\u5143\u7d20\u200bx\u200b\u5728\u200bL\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b - Insert\uff08L\uff0ci\uff0cx\uff09\u200b\u5728\u200b\u8868\u200bL\u200b\u7684\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx\uff0c\u200b\u5c06\u200b\u539f\u200b\u5360\u636e\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b\u53ca\u200b\u540e\u9762\u200b\u7684\u200b\u5143\u7d20\u200b\u90fd\u200b\u5411\u200b\u540e\u200b\u63a8\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b - Delete\uff08L\uff0cp\uff09 \u200b\u4ece\u8868\u200bL\u200b\u4e2d\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bp\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b - Get\uff08L\uff0ci\uff09 \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200bL\u200b\u4e2d\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\uff081\u2264i\u2264n\uff09 - IsEmpty(L) \u200b\u5982\u679c\u200b\u8868\u200bL\u200b\u4e3a\u200b\u7a7a\u8868\u200b(\u200b\u957f\u5ea6\u200b\u4e3a\u200b0)\u200b\u5219\u200b\u8fd4\u56de\u200btrue\uff0c\u200b\u5426\u5219\u200b\u8fd4\u56de\u200bfalse - Clear\uff08L\uff09\u200b\u6e05\u9664\u200b\u6240\u6709\u200b\u5143\u7d20\u200b - Traverse\uff08L\uff09\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u5143\u7d20\u200b - Update\uff08L\uff0ci,x\uff09\u200b\u4fee\u6539\u200b\u5143\u7d20\u200b - \u200b\u9000\u51fa\u200b - \u200b\u6e05\u7a7a\u200b\u547d\u4ee4\u884c\u200b\uff01 - \u200b\u521b\u5efa\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdlib&gt;\n#include&lt;malloc.h&gt;\nusing namespace std;\ntypedef int dataType;\ntypedef struct Node{\n    dataType data=-1;\n    struct Node *next;\n}LNode,*LinkedList;\n//\u200b\u521b\u5efa\u200b\u94fe\u8868\u200b  \nLinkedList linkedListCreateT() {\n    int i = 1;\n    LinkedList l = (LNode*)malloc(sizeof(LNode));\n    LinkedList p;\n    l-&gt;next = NULL;\n    while (i != 21) {\n        p = (LNode*)malloc(sizeof(LNode));\n        p-&gt;data = i;\n        ++i;\n        p-&gt;next = l-&gt;next;\n        l-&gt;next = p;\n    }\n    return l;\n}\nLinkedList create() {\n    LinkedList p = linkedListCreateT();\n    LinkedList l = linkedListCreateT();\n    LinkedList lb = l;\n    LinkedList pb = p-&gt;next;\n    while (l-&gt;next != NULL) {\n        l = l-&gt;next;\n    }\n    LinkedList le = l;\n    le-&gt;next = pb;\n    free(p);\n    while (pb-&gt;next != NULL) {\n        pb = pb-&gt;next;\n    }\n    LinkedList pe = pb;\n    pe-&gt;next = lb;\n    cout &lt;&lt; \"\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u521b\u5efa\u200b\u6210\u529f\u200b\" &lt;&lt; endl;\n    return lb;\n}\n//\u200b\u8868\u4e2d\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b\nint  linkedListLength(LinkedList l) {\n    int i=0;\n    LinkedList p=l;\n    p = p-&gt;next;\n    while (p!=l) {\n        i++;\n        p=p-&gt;next;\n    }\n    return i+1;\n}\n//\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200bL\u200b\u4e2d\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\nvoid linkedListGet(LinkedList l,int i) {\n        int j = 0;\n        LinkedList p=l; \n        while (j!=i) {\n            ++j;\n            p = p-&gt;next;\n        }\n        cout &lt;&lt; i &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; p-&gt;data &lt;&lt; endl; \n}\n//\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\nvoid linkedListPrior(LinkedList l, int i) {\n        int j = 0;\n        LinkedList p=l;\n        while(j!=i-1) {\n                ++j;\n                p = p-&gt;next;\n        }\n        if (p==l) {\n            cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\uff1a\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\u4e3a\u200b:\u200b\u5c3e\u200b\u7ed3\u70b9\u200b\" &lt;&lt; endl;\n        }\n        else cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\uff1a\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\u4e3a\u200b:\" &lt;&lt; p-&gt;data &lt;&lt; endl;\n}\n//\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u7ee7\u200b\u5143\u7d20\u200b\nvoid linkedListNext(LinkedList l, int i) {\n        int j = 0;\n        LinkedList p=l;\n        while(j!=i+1) {         \n            ++j;\n            p = p-&gt;next;            \n        }\n        if (p == l){\n            cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u540e\u200b\u9a71\u662f\u200b\uff1a\u200b\u5c3e\u200b\u7ed3\u70b9\u200b\"&lt;&lt; endl;\n        }\n        else cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u540e\u200b\u9a71\u662f\u200b\uff1a\" &lt;&lt; p-&gt;data &lt;&lt; endl;\n}\n//\u200b\u5143\u7d20\u200bx\u200b\u5728\u200bL\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\nvoid linkedListLocate(LinkedList l, dataType x) {\n    int i = 0,flag=0;\n    LinkedList p=l;\n    while(i!=linkedListLength(l)){\n            ++i;\n            if (p-&gt;data == x) {\n                cout &lt;&lt; x &lt;&lt; \"\u200b\u5728\u200b\u8868\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u662f\u200b\uff1a\" &lt;&lt; i &lt;&lt; endl;\n                flag++;\n            }\n            p = p-&gt;next;    \n    }\n    if(flag==0) cout&lt;&lt;\"\u200b\u4e0d\u200b\u5728\u200b\u8868\u4e2d\u200b\"&lt;&lt;endl;\n}\n//\u200b\u5728\u200b\u8868\u200bL\u200b\u7684\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx\nLinkedList linkedListInsert(LinkedList l,int i,dataType x) {\n    int j = 0;\n    LinkedList pri=l,s=l;\n    LinkedList p = (LNode*)malloc(sizeof(LNode));\n    p-&gt;data = x;\n    while (j != i) {\n        ++j;\n        pri = s;\n        s = s-&gt;next;\n    }\n    pri-&gt;next = p;\n    p-&gt;next = s;\n    cout &lt;&lt; \"\u200b\u63d2\u5165\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\nLinkedList linkedListDelete(LinkedList l,int i) {\n    int j = 0;\n    LinkedList pri = l, p = l;\n    while(j!=i){\n        j++;\n        pri = p;\n        p = p-&gt;next;\n    }\n    pri-&gt;next = p-&gt;next;\n    free(p);\n    cout &lt;&lt; \"\u200b\u5220\u9664\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u8868\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b\nvoid linkedListEmpty(LinkedList l) {\n    if (l-&gt;next==l) {\n        cout &lt;&lt; \"\u200b\u662f\u200b\u7a7a\u8868\u200b\uff01\" &lt;&lt; endl;\n    }\n    else cout &lt;&lt; \"\u200b\u4e0d\u662f\u200b\u7a7a\u8868\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u6e05\u7a7a\u200b\u8868\u200b\nLinkedList linkedListClear(LinkedList l) {\n    LinkedList p=l,pri=l;\n    p = p-&gt;next;\n    while (p!=l) {\n        pri = p;\n        p = p-&gt;next;\n        free(pri);\n    }\n    l-&gt;next = l;\n    cout &lt;&lt; \"\u200b\u6e05\u7a7a\u200b\u5b8c\u6210\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\nvoid linkedListTraverse(LinkedList l) {\n    LinkedList p=l;\n    p=p-&gt;next;\n    if (p!=l) {\n        cout &lt;&lt; \"\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\u662f\u200b\uff1a\";\n        while (p != l) {\n                cout &lt;&lt; p-&gt;data &lt;&lt; \" \";\n                p = p-&gt;next;\n        }\n        cout &lt;&lt; endl;\n    }else {\n        cout &lt;&lt; \"\u200b\u7a7a\u8868\u200b\u4e0d\u80fd\u200b\u904d\u5386\u200b\uff01\" &lt;&lt; endl;\n    }\n}\n//\u200b\u5c06\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b\u4fee\u6539\u200b\u4e3a\u200bx\nLinkedList sqlListUpdate(LinkedList l,int i,dataType x) {\n    LinkedList p=l;\n    int j = 0;\n    while(j!=i){\n        ++j;\n        p = p-&gt;next;  \n    }\n    p-&gt;data = x;\n    cout &lt;&lt; \"\u200b\u4fee\u6539\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\nvoid print() {\n    cout &lt;&lt; \"*********************************************\"&lt;&lt;endl;\n    cout &lt;&lt; \"*  1.\u200b\u94fe\u8868\u200b\u7684\u200b\u957f\u5ea6\u200b        2.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b     *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  3.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u200b\u9a71\u200b          4.\u200b\u5143\u7d20\u200bx\u200b\u7684\u200b\u4f4d\u7f6e\u200b  *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  5.\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx    6.\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  7.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b          8.\u200b\u8868\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b       *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  9.\u200b\u6e05\u7a7a\u200b\u8868\u200b              10.\u200b\u904d\u5386\u200b\u8868\u200b        *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  11.\u200b\u4fee\u6539\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b    12.\u200b\u9000\u51fa\u200b             *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  13.\u200b\u6e05\u7a7a\u200b\u547d\u4ee4\u884c\u200b           14\u200b\u521b\u5efa\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b      *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*********************************************\"&lt;&lt; endl;\n}\nvoid main() {\n    int m=0,i = 0,n=0;\n    LinkedList l = create();\n    print();\n    while (1) {\n        cin &gt;&gt; i;\n        switch (i)\n        {\n        case 1:cout &lt;&lt;\"\u200b\u94fe\u8868\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b\uff1a\"&lt;&lt;linkedListLength(l) &lt;&lt; endl; break;\n        case 2:cin &gt;&gt; m;linkedListPrior(l, m); break;\n        case 3:cin &gt;&gt; m; linkedListNext(l, m); break;\n        case 4:cin &gt;&gt; m; linkedListLocate(l, m); break;\n        case 5:cin &gt;&gt; m &gt;&gt; n;l=linkedListInsert(l, m, n); break;\n        case 6:cin &gt;&gt; m;l=linkedListDelete(l, m); break;\n        case 7:cin &gt;&gt; m; linkedListGet(l, m);break;\n        case 8:linkedListEmpty(l);break;\n        case 9:l = linkedListClear(l);break;\n        case 10:linkedListTraverse(l);break;\n        case 11:cin &gt;&gt; m; cin &gt;&gt; n;l = sqlListUpdate(l,m,n); break;\n        case 12:exit(0);\n        case 13:system(\"cls\"); print();break;\n        case 14:l = create(); break;\n        default:cout &lt;&lt; \"\u200b\u6570\u5b57\u200b\u8d85\u51fa\u8303\u56f4\u200b\uff0c\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\u3002\" &lt;&lt; endl; break;\n        }\n    }\n}\n</code></pre></p>"},{"location":"DataStruct/6-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/","title":"\u53cc\u5411\u200b\u94fe\u8868","text":""},{"location":"DataStruct/6-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/#_2","title":"\u5b9a\u4e49","text":"<p>\u200b\u53cc\u94fe\u200b\u8868\u200b\uff1a \u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u6709\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b\u524d\u9a71\u200b\u7684\u200b\u6307\u9488\u200b\u57df\u200b\u548c\u200b\u6307\u5411\u200b\u540e\u7ee7\u200b\u7684\u200b\u6307\u9488\u200b\u57df\u200b\u662f\u200b\u94fe\u8868\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u53cc\u5411\u200b\u67e5\u627e\u200b\uff0c\u200b\u7528\u200b\u8fd9\u79cd\u200b\u7ed3\u70b9\u200b\u7ed3\u6784\u200b\u7ec4\u6210\u200b\u7684\u200b\u94fe\u8868\u200b\u79f0\u4e3a\u200b\u53cc\u94fe\u200b\u8868\u200b\u3002 </p> <p>\u200b\u53cc\u94fe\u200b\u8868\u200b\u5934\u5c3e\u200b\u76f8\u8fde\u200b\u6784\u6210\u200b\u53cc\u5411\u200b\u5faa\u73af\u200b\u94fe\u8868\u200b\u3002 </p>"},{"location":"DataStruct/6-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/#_3","title":"\u4ee3\u7801","text":"<p>\u200b\u53cc\u94fe\u200b\u8868\u200b\u7684\u200b\u57fa\u672c\u64cd\u4f5c\u200b\uff1a\uff08\u200b\u53cc\u94fe\u200b\u8868\u200b\u6ca1\u6709\u200b\u5faa\u73af\u200b\uff09 - Length\uff08L\uff09 \u200b\u8fd4\u56de\u200b\u8868\u200bL\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\u200b\u5373\u8868\u4e2d\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b - Prior\uff08L\uff0ci\uff09 \u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b - Next\uff08L\uff0ci\uff09 \u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u7ee7\u200b\u5143\u7d20\u200b - Locate\uff08L\uff0cx\uff09 \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200b\u5143\u7d20\u200bx\u200b\u5728\u200bL\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b - Insert\uff08L\uff0ci\uff0cx\uff09\u200b\u5728\u200b\u8868\u200bL\u200b\u7684\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx\uff0c\u200b\u5c06\u200b\u539f\u200b\u5360\u636e\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b\u53ca\u200b\u540e\u9762\u200b\u7684\u200b\u5143\u7d20\u200b\u90fd\u200b\u5411\u200b\u540e\u200b\u63a8\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b - Delete\uff08L\uff0cp\uff09 \u200b\u4ece\u8868\u200bL\u200b\u4e2d\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bp\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b - Get\uff08L\uff0ci\uff09 \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200bL\u200b\u4e2d\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\uff081\u2264i\u2264n\uff09 - Empty(L) \u200b\u5982\u679c\u200b\u8868\u200bL\u200b\u4e3a\u200b\u7a7a\u8868\u200b(\u200b\u957f\u5ea6\u200b\u4e3a\u200b0)\u200b\u5219\u200b\u8fd4\u56de\u200btrue\uff0c\u200b\u5426\u5219\u200b\u8fd4\u56de\u200bfalse - Clear\uff08L\uff09\u200b\u6e05\u9664\u200b\u6240\u6709\u200b\u5143\u7d20\u200b - Traverse\uff08L\uff09\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u5143\u7d20\u200b - Update\uff08L\uff0ci,x\uff09\u200b\u4fee\u6539\u200b\u5143\u7d20\u200b - \u200b\u9000\u51fa\u200b - \u200b\u6e05\u7a7a\u200b\u547d\u4ee4\u884c\u200b\uff01 - \u200b\u521b\u5efa\u200b\u53cc\u94fe\u200b\u8868\u200b <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdlib&gt;\n#include&lt;malloc.h&gt;\nusing namespace std;\ntypedef int dataType;\ntypedef struct Node{\n    dataType data;\n    struct Node *prior,*next;\n}LNode,*LinkedList;\n//\u200b\u521b\u5efa\u200b\u94fe\u8868\u200b  \nLinkedList linkedListCreateT() {\n    int i = 1;\n    LinkedList l = (LNode*)malloc(sizeof(LNode));\n    l-&gt;prior = l-&gt;next = NULL;\n    LinkedList r = l;\n    LinkedList p;\n    while (i != 21) {\n        p = (LNode*)malloc(sizeof(LNode));\n        p-&gt;data = i;\n        ++i;\n        p-&gt;next = r-&gt;next;\n        p-&gt;prior = r;\n        r-&gt;next = p;\n        r = p;\n    }\n    cout &lt;&lt; \"\u200b\u53cc\u94fe\u200b\u8868\u200b\u521b\u5efa\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u8868\u4e2d\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b\nint  linkedListLength(LinkedList l) {\n    int i=0;\n    LinkedList p = l;\n    while (p-&gt;next!=NULL) {\n        i++;\n        p=p-&gt;next;\n    }\n    return i;\n}\n//\u200b\u51fd\u6570\u200b\u503c\u4e3a\u200bL\u200b\u4e2d\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\nvoid linkedListGet(LinkedList l,int i) {\n        int j = 0;\n        LinkedList p=l; \n        while (j!=i) {\n            ++j;\n            p = p-&gt;next;\n        }\n        cout &lt;&lt; i &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; p-&gt;data &lt;&lt; endl; \n}\n//\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\nvoid linkedListPrior(LinkedList l, int i) {\n        int j = 0;\n        LinkedList p=l;\n        while(j!=i) {\n                ++j;\n                p = p-&gt;next;\n        }\n        if (i==1) {\n            cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\uff1a\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\u4e3a\u200b:\u200b\u7a7a\u200b\" &lt;&lt; endl;\n        }\n        else cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\uff1a\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u524d\u9a71\u200b\u5143\u7d20\u200b\u4e3a\u200b:\" &lt;&lt; p-&gt;prior-&gt;data &lt;&lt; endl;\n}\n//\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u7ee7\u200b\u5143\u7d20\u200b\nvoid linkedListNext(LinkedList l, int i) {\n        int j = 0;\n        LinkedList p=l;\n        while(j!=i) {           \n            ++j;\n            p = p-&gt;next;            \n        }\n        if (i == linkedListLength(l)){\n            cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u540e\u200b\u9a71\u662f\u200b\uff1a\u200b\u7a7a\u200b\"&lt;&lt; endl;\n        }\n        else cout &lt;&lt; \"\u200b\u4f4d\u7f6e\u200b\" &lt;&lt; i &lt;&lt; \"\u200b\u7684\u200b\u540e\u200b\u9a71\u662f\u200b\uff1a\" &lt;&lt; p-&gt;next-&gt;data &lt;&lt; endl;\n}\n//\u200b\u5143\u7d20\u200bx\u200b\u5728\u200bL\u200b\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\nvoid linkedListLocate(LinkedList l, dataType x) {\n    int i = 0,flag=0;\n    LinkedList p=l-&gt;next;\n    while(i!=linkedListLength(l)){\n            ++i;\n            if (p-&gt;data == x) {\n                cout &lt;&lt; x &lt;&lt; \"\u200b\u5728\u200b\u8868\u4e2d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u662f\u200b\uff1a\" &lt;&lt; i &lt;&lt; endl;\n                flag++;\n            }\n            p = p-&gt;next;    \n    }\n    if(flag==0) cout&lt;&lt;\"\u200b\u4e0d\u200b\u5728\u200b\u8868\u4e2d\u200b\"&lt;&lt;endl;\n}\n//\u200b\u5728\u200b\u8868\u200bL\u200b\u7684\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx\nLinkedList linkedListInsert(LinkedList l,int i,dataType x) {\n    int j = 0;\n    LinkedList s=l;\n    LinkedList p = (LNode*)malloc(sizeof(LNode));\n    p-&gt;data = x;\n    while (j != i) {\n        ++j;\n        s = s-&gt;next;\n    }\n    s-&gt;prior-&gt;next = p;\n    p-&gt;next = s;\n    s-&gt;prior = p;\n    cout &lt;&lt; \"\u200b\u63d2\u5165\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u7684\u200b\u5143\u7d20\u200b\nLinkedList linkedListDelete(LinkedList l,int i) {\n    int j = 0;\n    LinkedList p = l;\n    while(j!=i){\n        j++;\n        p = p-&gt;next;\n    }\n    p-&gt;prior-&gt;next = p-&gt;next;\n    p-&gt;next-&gt;prior = p-&gt;prior;\n    free(p);\n    cout &lt;&lt; \"\u200b\u5220\u9664\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\n//\u200b\u8868\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b\nvoid linkedListEmpty(LinkedList l) {\n    if (l-&gt;next==NULL) {\n        cout &lt;&lt; \"\u200b\u662f\u200b\u7a7a\u8868\u200b\uff01\" &lt;&lt; endl;\n    }\n    else cout &lt;&lt; \"\u200b\u4e0d\u662f\u200b\u7a7a\u8868\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u6e05\u7a7a\u200b\u8868\u200b\nLinkedList linkedListClear(LinkedList l) {\n    LinkedList p = l;\n    if (l-&gt;next == NULL) {\n        cout &lt;&lt; \"\u200b\u7a7a\u8868\u200b\u4e0d\u80fd\u200b\u8fdb\u884c\u200b\u6e05\u9664\u200b\uff01\" &lt;&lt; endl;\n        return l;\n    }\n    else {\n        p = p-&gt;next;\n        while (p-&gt;next!=NULL) {\n            p = p-&gt;next;\n            free(p-&gt;prior);\n        }\n        free(p);\n        l-&gt;next = NULL;\n        cout &lt;&lt; \"\u200b\u6e05\u7a7a\u200b\u5b8c\u6210\u200b\uff01\" &lt;&lt; endl;\n    }\n    return l;\n}\n//\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\nvoid linkedListTraverse(LinkedList l) {\n    LinkedList p=l;\n    if (p-&gt;next!=NULL) {\n        p = p-&gt;next;\n        cout &lt;&lt; \"\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\u662f\u200b\uff1a\";\n        while (p-&gt;next!= NULL) {\n                cout &lt;&lt; p-&gt;data &lt;&lt; \" \";\n                p = p-&gt;next;\n        }\n        cout &lt;&lt;p-&gt;data&lt;&lt; endl;\n    }else {\n        cout &lt;&lt; \"\u200b\u7a7a\u8868\u200b\u4e0d\u80fd\u200b\u904d\u5386\u200b\uff01\" &lt;&lt; endl;\n    }\n}\n//\u200b\u5c06\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b\u4fee\u6539\u200b\u4e3a\u200bx\nLinkedList sqlListUpdate(LinkedList l,int i,dataType x) {\n    LinkedList p=l;\n    int j = 0;\n    while(j!=i){\n        ++j;\n        p = p-&gt;next;  \n    }\n    p-&gt;data = x;\n    cout &lt;&lt; \"\u200b\u4fee\u6539\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return l;\n}\nvoid print() {\n    cout &lt;&lt; \"*********************************************\"&lt;&lt;endl;\n    cout &lt;&lt; \"*  1.\u200b\u94fe\u8868\u200b\u7684\u200b\u957f\u5ea6\u200b        2.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u524d\u9a71\u200b     *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  3.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u540e\u200b\u9a71\u200b          4.\u200b\u5143\u7d20\u200bx\u200b\u7684\u200b\u4f4d\u7f6e\u200b  *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  5.\u200b\u4f4d\u7f6e\u200bi\u200b\u5904\u200b\u63d2\u5165\u200b\u5143\u7d20\u200bx    6.\u200b\u5220\u9664\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  7.\u200b\u53d6\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b          8.\u200b\u8868\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b       *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  9.\u200b\u6e05\u7a7a\u200b\u8868\u200b              10.\u200b\u904d\u5386\u200b\u8868\u200b        *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  11.\u200b\u4fee\u6539\u200b\u4f4d\u7f6e\u200bi\u200b\u7684\u200b\u5143\u7d20\u200b    12.\u200b\u9000\u51fa\u200b             *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*  13.\u200b\u6e05\u7a7a\u200b\u547d\u4ee4\u884c\u200b           14\u200b\u53cc\u94fe\u200b\u8868\u200b         *\"&lt;&lt; endl;\n    cout &lt;&lt; \"*********************************************\"&lt;&lt; endl;\n}\nvoid main() {\n    int m=0,i = 0,n=0;\n    print();\n    LinkedList l = linkedListCreateT();\n    while (1) {\n        cin &gt;&gt; i;\n        switch (i)\n        {\n        case 1:cout &lt;&lt;\"\u200b\u94fe\u8868\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b\uff1a\"&lt;&lt;linkedListLength(l) &lt;&lt; endl; break;\n        case 2:cin &gt;&gt; m;linkedListPrior(l, m); break;\n        case 3:cin &gt;&gt; m; linkedListNext(l, m); break;\n        case 4:cin &gt;&gt; m; linkedListLocate(l, m); break;\n        case 5:cin &gt;&gt; m &gt;&gt; n;l=linkedListInsert(l, m, n); break;\n        case 6:cin &gt;&gt; m;l=linkedListDelete(l, m); break;\n        case 7:cin &gt;&gt; m; linkedListGet(l, m);break;\n        case 8:linkedListEmpty(l);break;\n        case 9:l = linkedListClear(l);break;\n        case 10:linkedListTraverse(l);break;\n        case 11:cin &gt;&gt; m; cin &gt;&gt; n;l = sqlListUpdate(l,m,n); break;\n        case 12:exit(0);\n        case 13:system(\"cls\"); print();break;\n        case 14:l = linkedListCreateT(); break;\n        default:cout &lt;&lt; \"\u200b\u6570\u5b57\u200b\u8d85\u51fa\u8303\u56f4\u200b\uff0c\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\u3002\" &lt;&lt; endl; break;\n        }\n    }\n}\n</code></pre></p>"},{"location":"DataStruct/7-%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/","title":"\u9759\u6001\u200b\u94fe\u8868","text":"<p>\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\uff1a\u200b\u7528\u200b\u6570\u7ec4\u200b\u63cf\u8ff0\u200b\u7684\u200b\u94fe\u8868\u200b\u3002\u200b\u800c\u4e14\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u7684\u200b\u8868\u73b0\u5f62\u5f0f\u200b\u5373\u200b\u4e3a\u200b\u7ed3\u6784\u200b\u4f53\u200b\u6570\u7ec4\u200b\uff0c\u200b\u7ed3\u6784\u200b\u4f53\u200b\u53d8\u91cf\u200b\u5305\u62ec\u200b\u6570\u636e\u200b\u57df\u200bdata\u200b\u548c\u200b\u6e38\u6807\u200bCUR\uff08\u200b\u6211\u7528\u200b\u7684\u200b\u662f\u200bnext\uff09data\u200b\u4e2d\u200b\u5b58\u653e\u200b\u7684\u200b\u662f\u200b\u50a8\u5b58\u200b\u7684\u200b\u5143\u7d20\u200b\u503c\u200b\u3002</p> <p>cur\u200b\u4e2d\u200b\u5b58\u653e\u200b\u7684\u200b\u662f\u200b\u4e0b\u200b\u4e00\u200b\u5143\u7d20\u200b\u7684\u200b\u6570\u7ec4\u200b\u4e0b\u6807\u200b\u3002</p> <p></p> <p>\u200b\u6211\u200b\u5bf9\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u7684\u200b\u7406\u89e3\u200b\u5c31\u662f\u200b\uff1a\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u8868\u9762\u200b\u4e0a\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7ed3\u6784\u200b\u4f53\u200b\u6570\u7ec4\u200b\uff0c\u200b\u4f46\u662f\u200b\u903b\u8f91\u200b\u4e0a\u200b\u662f\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u9996\u200b\u5143\u7d20\u200b\u7684\u200b\u4e0b\u6807\u200b\u662f\u200b0\uff0c\u200b\u5b83\u200b\u8fde\u63a5\u200b\u7684\u200b\u662f\u200b \u200b\u6240\u6709\u200b\u7a7a\u95f2\u200b\u7684\u200b\u7ed3\u70b9\u200b\u3002\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u9996\u200b\u5143\u7d20\u200b\u4e0b\u6807\u200b\u662f\u200b1\uff0c\u200b\u5b83\u200b\u8868\u793a\u200b\u7684\u200b\u662f\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u7684\u200b\u6240\u6709\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u7684\u200b\u5404\u79cd\u200b\u64cd\u4f5c\u200b\u4e5f\u200b\u4e3b\u8981\u200b\u56f4\u7ed5\u200b\u8fd9\u200b\u903b\u8f91\u200b\u4e0a\u200b\u7684\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\u3002 \u200b\u5047\u5982\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5982\u200b\u4e0a\u200b\u5f62\u5f0f\u200b\u7684\u200b\u7ed3\u6784\u200b\u4f53\u200b\u6570\u7ec4\u200b a[100],\u200b\u7ecf\u8fc7\u200b\u521d\u59cb\u5316\u200b\u4e4b\u540e\u200b\u5f62\u6210\u200b\u4e00\u4e2a\u200b\u7a7a\u200b\u7684\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\uff0c\u200b\u5f53\u200b\u6211\u4eec\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7a7a\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u6267\u884c\u200b\u6dfb\u52a0\u200b\u5143\u7d20\u200b\u64cd\u4f5c\u200b\u65f6\u200b\uff1a</p> <p></p> <p>\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u7684\u200b\u5220\u9664\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u4e0e\u200b\u4e4b\u200b\u7c7b\u4f3c\u200b\u3002</p>"},{"location":"DataStruct/7-%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#_2","title":"\u4ee3\u7801","text":"<p>\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u7684\u200b\u57fa\u672c\u64cd\u4f5c\u200b\uff1a - add() \u200b\u6dfb\u52a0\u200b\u7ed3\u70b9\u200b\u5143\u7d20\u200b                    - Delete()  \u200b\u5220\u9664\u200b\u8282\u70b9\u200b\u5143\u7d20\u200b - Update() \u200b\u4fee\u6539\u200b\u8282\u70b9\u200b\u5143\u7d20\u200b - Get()\u200b\u67e5\u8be2\u200b\u7ed3\u70b9\u200b\u5143\u7d20\u200b  - Traverse()\u200b\u904d\u5386\u200b\u9759\u6001\u200b\u94fe\u8868\u200b - \u200b\u6e05\u7a7a\u200b <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\n#define  max  100\ntypedef int  Elemtype;\ntypedef struct {\n    Elemtype data;\n    int next;\n} Slist[max];\n//\u200b\u521d\u59cb\u5316\u200b\nvoid init(Slist &amp;a) {   \n    for (int i = 0; i != max; i++) {\n        a[i].next= i+1;\n    }\n    a[max - 1].next= -1;\n    a[0].next = 2;\n    a[1].next = -1;\n}\n//\u200b\u7533\u8bf7\u200b\u7a7a\u95f2\u200b\u7ed3\u70b9\u200b\nint malloc_init(Slist &amp;a) {\n    int i = a[0].next;\n    if (i) {\n        a[0].next = a[i].next;\n    }\n    return i;\n}\n//\u200b\u6dfb\u52a0\u200b\u5143\u7d20\u200b\nvoid add(Slist &amp;a,Elemtype x) {\n    int y=1;\n    int i= malloc_init(a);\n    while (a[y].next != -1) {\n        y = a[y].next;\n    }\n    a[i].data = x;\n    a[y].next = i;\n    a[i].next = -1;\n    cout &lt;&lt; \"\u200b\u6dfb\u52a0\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u5220\u9664\u200b\u5143\u7d20\u200b\nvoid Delete(Slist &amp;a,Elemtype x) {\n    int i = 1,y=0;\n    while (a[i].data != x) {\n        y = i;\n        i = a[i].next;\n    }\n        a[y].next = a[i].next;\n        a[i].data = a[0].data;\n        a[i].next = a[0].next;\n        a[0].next = i;\n    cout &lt;&lt; \"\u200b\u5220\u9664\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u4fee\u6539\u200b\u5143\u7d20\u200b\nvoid Update(Slist &amp;a,Elemtype x, Elemtype y) {\n    int i = 1;\n    while (a[i].data != x) {\n        i = a[i].next;\n    }\n    a[i].data = y;\n    cout &lt;&lt; \"\u200b\u4fee\u6539\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n}\n//\u200b\u67e5\u8be2\u200b\u5143\u7d20\u200b\nvoid Get(Slist &amp;a,Elemtype x) {\n    int i = 1;\n    while (a[i].data != x) {\n        i = a[i].next;\n    }\n    if (i == -1) {\n        cout &lt;&lt; \"\u200b\u6b64\u200b\u94fe\u8868\u200b\u6ca1\u6709\u200b\u8be5\u200b\u5143\u7d20\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; x &lt;&lt; \"\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u662f\u200b:\" &lt;&lt; i &lt;&lt; endl;\n    }   \n}\n//\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\nvoid Traverse(Slist &amp;a){\n    int i = 1;\n    if (a[i].next == -1) {\n        cout &lt;&lt; \"\u200b\u94fe\u8868\u200b\u4e3a\u7a7a\u200b\uff01\" &lt;&lt; endl;\n    }else{\n    cout &lt;&lt; \"\u200b\u904d\u5386\u200b\u7684\u200b\u7ed3\u679c\u200b\u662f\u200b\uff1a\";\n    while (a[i].next != -1) {\n        cout &lt;&lt; a[a[i].next].data &lt;&lt; \" \";\n        i = a[i].next;\n    }\n    cout &lt;&lt; endl;\n    }\n}\nvoid print() {\n    cout &lt;&lt; \"*********************************************\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   1 \u200b\u6dfb\u52a0\u200b\u7ed3\u70b9\u200b\u5143\u7d20\u200b       2 \u200b\u5220\u9664\u200b\u8282\u70b9\u200b\u5143\u7d20\u200b     *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   3 \u200b\u4fee\u6539\u200b\u8282\u70b9\u200b\u5143\u7d20\u200b       4 \u200b\u67e5\u8be2\u200b\u7ed3\u70b9\u200b\u5143\u7d20\u200b     *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   5 \u200b\u904d\u5386\u200b\u9759\u6001\u200b\u94fe\u8868\u200b       6 \u200b\u6e05\u7a7a\u200b             *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*********************************************\" &lt;&lt; endl;\n}\nvoid main() {\n    int i = 0;\n    Elemtype m, n;\n    Slist a;\n    init(a);\n    print();\n    while (1) {\n        cin &gt;&gt; i;\n        switch (i) {\n        case 1:cin &gt;&gt; m; add(a, m);break;\n        case 2:cin &gt;&gt; m; Delete(a, m); break;\n        case 3:cin &gt;&gt; m &gt;&gt; n; Update(a, m, n); break;\n        case 4:cin &gt;&gt; n; Get(a, m);break;\n        case 5:Traverse(a);break;\n        case 6:system(\"cls\"); print(); break;\n        default:cout &lt;&lt; \"\u200b\u8f93\u5165\u200b\u6570\u5b57\u200b\u4e0d\u200b\u7b26\u5408\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff01\"&lt;&lt;endl; break;\n        }\n    }\n    system(\"pause\");\n}\n</code></pre></p>"},{"location":"DataStruct/8-%E6%A0%88/","title":"\u6808","text":""},{"location":"DataStruct/8-%E6%A0%88/#_2","title":"\u5b9a\u4e49","text":"<p>\u200b\u6808\u200b\u662f\u200b\u53ea\u200b\u5141\u8bb8\u200b\u5728\u200b\u8868\u5c3e\u200b\u8fdb\u884c\u200b\u63d2\u5165\u200b\u3001\u200b\u5220\u9664\u200b\u7684\u200b\u7ebf\u6027\u8868\u200b\u3002\u200b\u5bf9\u6808\u200b\u6765\u8bf4\u200b\uff0c\u200b\u8868\u5c3e\u200b\u6709\u200b\u7279\u6b8a\u200b\u7684\u200b\u542b\u4e49\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u8868\u5c3e\u200b\u79f0\u4e3a\u200b\u6808\u9876\u200b\uff0c\u200b\u800c\u8868\u200b\u7684\u200b\u53e6\u4e00\u7aef\u200b\uff0c\u200b\u5373\u200b\u8868\u5934\u200b\u79f0\u4e3a\u200b\u6808\u5e95\u200b\u3002\u200b\u4e0d\u200b\u542b\u200b\u5143\u7d20\u200b\u7684\u200b\u7a7a\u8868\u200b\u79f0\u4e3a\u200b\u7a7a\u6808\u200b\u3002\u200b\u7531\u200b\u5176\u200b\u5b9a\u4e49\u200b\u53ef\u4ee5\u200b\u770b\u51fa\u200b\u5148\u200b\u8fdb\u5165\u200b\u6808\u200b\u7684\u200b\u5143\u7d20\u200b\u6700\u540e\u200b\u624d\u80fd\u200b\u51fa\u6808\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6808\u200b\u53c8\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u540e\u8fdb\u5148\u51fa\u200b\u7684\u200b\u7ebf\u6027\u8868\u200b\u3002     \u200b\u82e5\u6808\u200b\u6ee1\u200b\uff0c\u200b\u6267\u884c\u200b\u8fdb\u6808\u200b\u5219\u200b\u53d1\u751f\u200b\u4e0a\u6ea2\u200b\u3002\u200b\u82e5\u6808\u200b\u7a7a\u200b\uff0c\u200b\u6267\u884c\u200b\u9000\u6808\u200b\u5219\u200b\u53d1\u751f\u200b\u4e0b\u6ea2\u200b\u3002 </p> <p>\u200b\u6808\u5206\u200b\u4e24\u79cd\u200b\uff1a - \u200b\u5229\u7528\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u5b9e\u73b0\u200b\u7684\u200b\u6808\u200b\u79f0\u4e3a\u200b\u987a\u5e8f\u200b\u6808\u200b - \u200b\u5229\u7528\u200b\u94fe\u5f0f\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u5b9e\u73b0\u200b\u7684\u200b\u6808\u200b\u79f0\u4e3a\u200b\u94fe\u6808\u200b</p>"},{"location":"DataStruct/8-%E6%A0%88/#_3","title":"\u4ee3\u7801","text":"<p>\u200b\u4e24\u79cd\u200b\u6808\u200b\u7684\u200b\u57fa\u672c\u200b\u5b9e\u73b0\u200b\u64cd\u4f5c\u200b\uff1a - Init()   \u200b\u521d\u59cb\u5316\u200b - Empty()  \u200b\u5224\u6808\u200b\u7a7a\u200b - Push()   \u200b\u5165\u6808\u200b - Pop()    \u200b\u51fa\u6808\u200b - GetTop() \u200b\u8bfb\u6808\u200b\u9876\u200b\u5143\u7d20\u200b - Clear()  \u200b\u6e05\u7a7a\u200b\u6808\u200b - Length() \u200b\u6c42\u6808\u200b\u957f\u200b</p>"},{"location":"DataStruct/8-%E6%A0%88/#_4","title":"\u987a\u5e8f\u200b\u6808","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#define MAXSIZE 100\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MAXSIZE];\n    int top;\n}Stack;\nStack Init() {\n    Stack s;\n    s.top = -1;\n    return s;\n}\nvoid Empty(Stack s) {\n    if (s.top == -1) {\n        cout &lt;&lt;\"\u200b\u6808\u4e3a\u200b\u7a7a\u200b\uff01\" &lt;&lt; endl;\n    }\n    else cout &lt;&lt; \"\u200b\u6808\u4e0d\u4e3a\u200b\u7a7a\u200b\uff01\" &lt;&lt; endl;\n}\nStack Push(Stack s,ElemType a) {\n    if (s.top == MAXSIZE - 1) {\n        cout &lt;&lt; \"\u200b\u6808\u6ee1\u200b\uff01\u200b\u538b\u6808\u200b\u5931\u8d25\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        s.top++;\n        s.data[s.top] =a;\n        cout &lt;&lt; \"\u200b\u538b\u6808\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    }\n    return s;\n}\nStack Pop(Stack s) {\n    if (s.top == -1) {\n        cout &lt;&lt; \"\u200b\u6808\u4e3a\u200b\u7a7a\u200b\uff01\u200b\u6ca1\u6709\u200b\u5143\u7d20\u200b\u51fa\u6808\u200b\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; s.data[s.top] &lt;&lt; endl;\n        s.top--;\n    }\n    return s;\n}\nvoid GetTop(Stack s) {\n    if (s.top != -1) {\n        cout &lt;&lt; \"\u200b\u6808\u9876\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; s.data[s.top] &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u7a7a\u6808\u200b\uff0c\u200b\u6ca1\u6709\u200b\u6808\u9876\u200b\u5143\u7d20\u200b\" &lt;&lt; endl;\n    }\n}\nStack clear(Stack s) {\n    s.top = -1;\n    cout &lt;&lt; \"\u200b\u6e05\u9664\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return s;\n}\nvoid Length(Stack s) {\n    cout &lt;&lt; \"\u200b\u6808\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b\uff1a\" &lt;&lt; s.top+1&lt;&lt; endl;\n}\nvoid print() {\n    cout &lt;&lt; \"*******************************************\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   1\u200b\u5224\u65ad\u200b\u6808\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b          2\u200b\u5165\u6808\u200b        *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   3\u200b\u51fa\u6808\u200b                    4\u200b\u8bfb\u6808\u200b\u9876\u200b\u5143\u7d20\u200b  *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   5\u200b\u6e05\u7a7a\u200b\u6808\u200b                  6\u200b\u6c42\u6808\u200b\u957f\u200b      *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   7 \u200b\u6e05\u5c4f\u200b                   8 \u200b\u9000\u51fa\u200b       *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*******************************************\" &lt;&lt; endl;\n}\nvoid main() {\n    int i,x;\n    Stack s = Init();\n    print();\n    while (1) {\n        cin &gt;&gt; i;\n        switch (i)\n        {\n        case 1:Empty(s); break;\n        case 2:cin &gt;&gt; x; s=Push(s, x); break;\n        case 3:s=Pop(s); break;\n        case 4:GetTop(s); break;\n        case 5:s=clear(s); break;\n        case 6:Length(s); break;\n        case 7:system(\"cls\"); print(); break;\n        case 8:exit(0); break;\n        default:cout &lt;&lt; \"\u200b\u8f93\u51fa\u200b\u503c\u200b\u8d85\u51fa\u8303\u56f4\u200b\uff0c\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff01\"&lt;&lt;endl; break;\n        }\n    }\n\n}\n</code></pre>"},{"location":"DataStruct/8-%E6%A0%88/#_5","title":"\u94fe\u6808","text":"<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n#define MAXSIZE 100\ntypedef int ElemType;\ntypedef struct StackNode{\n    ElemType data;\n    StackNode *next;\n}StackNode,*LinkedStack;\nLinkedStack Init() {\n    LinkedStack s;\n    s = NULL;\n    return s;\n}\nvoid Empty(LinkedStack s) {\n    if (s == NULL) {\n        cout &lt;&lt;\"\u200b\u6808\u4e3a\u200b\u7a7a\u200b\uff01\" &lt;&lt; endl;\n    }\n    else cout &lt;&lt; \"\u200b\u6808\u4e0d\u4e3a\u200b\u7a7a\u200b\uff01\" &lt;&lt; endl;\n}\nLinkedStack Push(LinkedStack s,ElemType a) {\n    LinkedStack p = (StackNode*)malloc(sizeof(StackNode));\n    p-&gt;data = a;\n    p-&gt;next = s;\n    s = p;  \n    cout &lt;&lt; \"\u200b\u538b\u6808\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;    \n    return s;\n}\nLinkedStack Pop(LinkedStack s) {\n    if (s==NULL) {\n        cout &lt;&lt; \"\u200b\u6808\u4e3a\u200b\u7a7a\u200b\uff01\u200b\u6ca1\u6709\u200b\u5143\u7d20\u200b\u51fa\u6808\u200b\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; s-&gt;data &lt;&lt; endl;\n        s = s-&gt;next;\n    }\n    return s;\n}\nvoid GetTop(LinkedStack s) {\n    if (s != NULL) {\n        cout &lt;&lt; \"\u200b\u6808\u9876\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; s-&gt;data &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u7a7a\u6808\u200b\uff0c\u200b\u6ca1\u6709\u200b\u6808\u9876\u200b\u5143\u7d20\u200b\" &lt;&lt; endl;\n    }\n}\nLinkedStack clear(LinkedStack s) {\n    LinkedStack p;\n    while (s!= NULL) {\n        p = s;\n        s = s-&gt;next;\n        free(p);\n    }\n    cout &lt;&lt; \"\u200b\u6e05\u9664\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return s;\n}\nvoid Length(LinkedStack s) {\n    int i = 0;\n    while (s!=NULL) {\n        i++;\n        s = s-&gt;next;\n    }\n    cout &lt;&lt; \"\u200b\u6808\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b\uff1a\" &lt;&lt; i &lt;&lt; endl;\n}\nvoid print() {\n    cout &lt;&lt; \"*******************************************\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   1\u200b\u5224\u65ad\u200b\u6808\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b          2\u200b\u5165\u6808\u200b        *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   3\u200b\u51fa\u6808\u200b                    4\u200b\u8bfb\u6808\u200b\u9876\u200b\u5143\u7d20\u200b  *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   5\u200b\u6e05\u7a7a\u200b\u6808\u200b                  6\u200b\u6c42\u6808\u200b\u957f\u200b      *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*   7 \u200b\u6e05\u5c4f\u200b                   8 \u200b\u9000\u51fa\u200b       *\" &lt;&lt; endl;\n    cout &lt;&lt; \"*******************************************\" &lt;&lt; endl;\n}\nvoid main() {\n    int i,x;\n    LinkedStack s = Init();\n    print();\n    while (1) {\n        cin &gt;&gt; i;\n        switch (i)\n        {\n        case 1:Empty(s); break;\n        case 2:cin &gt;&gt; x; s=Push(s, x); break;\n        case 3:s=Pop(s); break;\n        case 4:GetTop(s); break;\n        case 5:s=clear(s); break;\n        case 6:Length(s); break;\n        case 7:system(\"cls\"); print(); break;\n        case 8:exit(0); break;\n        default:cout &lt;&lt; \"\u200b\u8f93\u51fa\u200b\u503c\u200b\u8d85\u51fa\u8303\u56f4\u200b\uff0c\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff01\"&lt;&lt;endl; break;\n        }\n    }\n\n}\n</code></pre>"},{"location":"DataStruct/9-%E9%98%9F%E5%88%97/","title":"\u961f\u5217","text":""},{"location":"DataStruct/9-%E9%98%9F%E5%88%97/#_2","title":"\u5b9a\u4e49","text":"<p>\u200b\u961f\u5217\u200b\u662f\u200b\u4e00\u79cd\u200b\u53ea\u200b\u5141\u8bb8\u200b\u5728\u200b\u8868\u200b\u7684\u200b\u4e00\u7aef\u200b\u63d2\u5165\u200b\uff0c\u200b\u5728\u200b\u53e6\u5916\u200b\u4e00\u6bb5\u200b\u5220\u9664\u200b\u7684\u200b\u5b58\u53d6\u200b\u53d7\u9650\u200b\u7684\u200b\u7ebf\u6027\u8868\u200b\u3002\u200b\u5141\u8bb8\u200b\u63d2\u5165\u200b\u7684\u200b\u4e00\u7aef\u200b\u79f0\u4e3a\u200b\u961f\u5c3e\u200b\uff0c\u200b\u5141\u8bb8\u200b\u5220\u9664\u200b\u7684\u200b\u4e00\u7aef\u200b\u79f0\u4e3a\u200b\u5bf9\u5934\u200b\u3002\u200b\u50cf\u200b\u6392\u961f\u200b\u4e00\u6837\u200b\uff0c\u200b\u5148\u200b\u8fdb\u5165\u200b\u961f\u5217\u200b\u7684\u200b\u5143\u7d20\u200b\u5148\u51fa\u200b\u961f\u5217\u200b\u3002\u200b\u6240\u4ee5\u200b\u961f\u5217\u200b\u662f\u200b\u4e00\u79cd\u200b\u5148\u8fdb\u5148\u51fa\u200b\u7684\u200b\u7ebf\u6027\u8868\u200b\u3002</p> <p></p> <p>\u200b\u9664\u4e86\u200b\u6808\u200b\u548c\u200b\u961f\u5217\u200b\u4e4b\u5916\u200b\uff0c\u200b\u8fd8\u6709\u200b\u4e00\u79cd\u200b\u9650\u5b9a\u6027\u200b\u6570\u636e\u7ed3\u6784\u200b\u79f0\u4e3a\u200b\u53cc\u7aef\u200b\u961f\u5217\u200b\u3002\u200b\u53cc\u7aef\u200b\u961f\u5217\u200b\u662f\u200b\u9650\u5b9a\u200b\u63d2\u5165\u200b\u548c\u200b\u5220\u9664\u200b\u64cd\u4f5c\u200b\u5728\u200b\u8868\u200b\u7684\u200b\u4e24\u7aef\u200b\u8fdb\u884c\u200b\u7684\u200b\u7ebf\u6027\u8868\u200b\u3002\u200b\u5b9e\u9645\u200b\u4f7f\u7528\u200b\u4e2d\u200b\uff0c\u200b\u8fd8\u6709\u200b\u8f93\u5165\u200b\u53d7\u9650\u200b\u7684\u200b\u53cc\u7aef\u200b\u961f\u5217\u200b\uff08\u200b\u4e00\u6bb5\u200b\u8f93\u5165\u200b\uff0c\u200b\u4e24\u7aef\u200b\u8f93\u51fa\u200b\uff09\u200b\u548c\u200b\u8f93\u51fa\u200b\u53d7\u9650\u200b\u7684\u200b\u53cc\u7aef\u200b\u961f\u5217\u200b\uff08\u200b\u4e00\u7aef\u200b\u8f93\u51fa\u200b\uff0c\u200b\u4e24\u7aef\u200b\u8f93\u5165\u200b\uff09\u3002\u200b\u8fd9\u200b\u51e0\u79cd\u200b\u6570\u636e\u7ed3\u6784\u200b\u5e94\u7528\u200b\u8fdc\u4e0d\u5982\u200b\u6808\u200b\u548c\u200b\u961f\u5217\u200b\u5e7f\u6cdb\u200b\u3002</p> <p>\u200b\u961f\u5217\u200b\u4e5f\u200b\u662f\u200b\u64cd\u4f5c\u200b\u53d7\u9650\u200b\u7684\u200b\u7ebf\u6027\u8868\u200b\uff0c\u200b\u4e0e\u200b\u7ebf\u6027\u8868\u200b\u3001\u200b\u6808\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u961f\u5217\u200b\u4e5f\u200b\u6709\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u548c\u200b\u94fe\u5f0f\u200b\u5b58\u50a8\u200b\u4e24\u79cd\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u3002</p>"},{"location":"DataStruct/9-%E9%98%9F%E5%88%97/#-","title":"\u5faa\u73af\u200b\u961f\u5217\u200b--\u200b\u961f\u5217\u200b\u7684\u200b\u987a\u5e8f\u5b58\u50a8\u200b\u7ed3\u6784","text":"<p>\u200b\u533a\u522b\u200b\u961f\u6ee1\u200b\u548c\u200b\u961f\u7a7a\u200b\u6709\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\uff1a - \u200b\u662f\u200b\u53e6\u8bbe\u200b\u4e00\u200b\u6807\u5fd7\u200b\u4f4d\u4ee5\u200b\u533a\u5206\u200b\u961f\u5217\u200b\u662f\u200b\u7a7a\u200b\u8fd8\u662f\u200b\u4e0d\u7a7a\u200b\uff0c - \u200b\u662f\u200b\u5c11\u7528\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u4ee5\u961f\u200b\u5c3e\u200b\u6307\u9488\u200b\u52a0\u200b1\u200b\u7b49\u4e8e\u200b\u961f\u5934\u200b\u6307\u9488\u200b\u4f5c\u4e3a\u200b\u961f\u6ee1\u200b\u7684\u200b\u6807\u5fd7\u200b\uff0c\u200b\u6b64\u65f6\u200b\u7684\u200b\u72b6\u6001\u200b\u662f\u200b\uff1a\uff08rear+1\uff09%MAXSIZE = front</p> <p>\u200b\u5faa\u73af\u200b\u961f\u5217\u200b\u7684\u200b\u6838\u5fc3\u200b\u5c31\u662f\u200b %MAXSIZE\uff0c\u200b\u53d6\u4f59\u200b\u7684\u200b\u7ed3\u679c\u200b\u6c38\u8fdc\u200b&lt;=MAXSIZE,\u200b\u4ece\u800c\u200b\u5f62\u6210\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\uff01</p>"},{"location":"DataStruct/9-%E9%98%9F%E5%88%97/#_3","title":"\u4ee3\u7801\u200b\uff1a","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;sstream&gt;\nusing namespace std;\n#define MAXSIZE 100\ntypedef int Element;\ntypedef struct {\n    Element data[MAXSIZE];\n    int front, rear;\n}Sequeue;\n//\u200b\u521d\u59cb\u5316\u200b\nSequeue Init() {\n    Sequeue q;\n    q.rear = q.front = 0;\n    return q;\n}\n//\u200b\u5165\u961f\u200b\nSequeue SeqIn(Sequeue q,int x) {\n    if ((q.rear + 1) % MAXSIZE == q.front) {\n        cout &lt;&lt; \"\u200b\u961f\u6ee1\u200b\uff0c\u200b\u5165\u961f\u200b\u5931\u8d25\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        q.data[q.rear] = x;\n        q.rear = (q.rear + 1) % MAXSIZE;\n        cout &lt;&lt; \"\u200b\u5165\u961f\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    }\n    return q;\n}\n//\u200b\u51fa\u961f\u200b\nSequeue SeqOut(Sequeue q) {\n    if (q.front == q.rear) {\n        cout &lt;&lt; \"\u200b\u961f\u7a7a\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u51fa\u961f\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u51fa\u961f\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; q.data[q.front] &lt;&lt; endl;\n        q.front = (q.front + 1) % MAXSIZE;\n    }\n    return q;\n}\n//\u200b\u8bfb\u961f\u200b\u5934\u200b\u5143\u7d20\u200b\nvoid SeqHead(Sequeue q) {\n    if (q.front == q.rear) {\n        cout &lt;&lt; \"\u200b\u961f\u7a7a\u200b,\u200b\u6ca1\u6709\u200b\u961f\u5934\u200b\u5143\u7d20\u200b\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u961f\u5934\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; q.data[q.front] &lt;&lt; endl;\n    }\n}\n//\u200b\u5224\u65ad\u200b\u7a7a\u200b\nvoid SeqEmpty(Sequeue q) {\n    if (q.front == q.rear) {\n        cout &lt;&lt; \"\u200b\u961f\u4e3a\u200b\u7a7a\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u961f\u4e0d\u4e3a\u200b\u7a7a\u200b\uff01\" &lt;&lt; endl;\n    }\n}\n//\u200b\u6c42\u200b\u961f\u5217\u200b\u957f\u200b\nvoid SeqLength(Sequeue q) {\n    cout &lt;&lt; \"\u200b\u5bf9\u5217\u957f\u200b\u4e3a\u200b:\";\n    cout &lt;&lt; (q.rear - q.front + MAXSIZE) % MAXSIZE &lt;&lt; endl;\n}\nvoid print() {\n    cout &lt;&lt; \"******************************************\" &lt;&lt; endl;\n    cout &lt;&lt; \"* 1 \u200b\u5165\u961f\u200b                  2 \u200b\u51fa\u961f\u200b         *\" &lt;&lt; endl;\n    cout &lt;&lt; \"* 3 \u200b\u8bfb\u961f\u200b\u5934\u200b\u5143\u7d20\u200b            4 \u200b\u5224\u65ad\u200b\u7a7a\u200b       *\" &lt;&lt; endl;\n    cout &lt;&lt; \"* 5 \u200b\u961f\u5217\u200b\u957f\u5ea6\u200b              6 \u200b\u6e05\u5c4f\u200b         *\" &lt;&lt; endl;\n    cout &lt;&lt; \"* 7\u200b\u9000\u51fa\u200b                                  *\" &lt;&lt; endl;\n    cout &lt;&lt; \"******************************************\" &lt;&lt; endl;\n}\nvoid main() {\n    int i, m;\n    Sequeue q = Init();\n    print();\n    while (1) {\n        cin &gt;&gt; i;\n        switch (i) {\n        case 1:cin &gt;&gt; m; q = SeqIn(q, m); break;\n        case 2:q = SeqOut(q); break;\n        case 3:SeqHead(q); break;\n        case 4:SeqEmpty(q); break;\n        case 5:SeqLength(q); break;\n        case 6:system(\"cls\"); print(); break;\n        case 7:exit(0); break;\n        default:cout &lt;&lt; \"\u200b\u8f93\u5165\u200b\u9519\u8bef\u200b\uff0c\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff01\" &lt;&lt; endl; break;\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/9-%E9%98%9F%E5%88%97/#-_1","title":"\u94fe\u200b\u961f\u5217\u200b--\u200b\u961f\u5217\u200b\u7684\u200b\u94fe\u5f0f\u200b\u8868\u793a\u200b\u548c\u200b\u5b9e\u73b0","text":"<p>\u200b\u7528\u200b\u94fe\u5f0f\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u8868\u793a\u200b\u7684\u200b\u961f\u5217\u200b\u7b80\u79f0\u200b\u4e3a\u200b\u94fe\u200b\u961f\u5217\u200b\u3002\u200b\u4e00\u4e2a\u200b\u94fe\u200b\u961f\u5217\u200b\u663e\u7136\u200b\u9700\u8981\u200b\u4e24\u4e2a\u200b\u5206\u522b\u200b\u6307\u793a\u200b\u961f\u5934\u200b\u548c\u200b\u961f\u200b\u5c3e\u200b\u7684\u200b\u6307\u9488\u200b\uff08\u200b\u5206\u522b\u200b\u79f0\u4e3a\u200b\u5934\u200b\u6307\u9488\u200b\u548c\u200b\u5c3e\u200b\u6307\u9488\u200b\uff09\u200b\u624d\u80fd\u200b\u552f\u4e00\u200b\u786e\u5b9a\u200b\u3002\u200b\u548c\u200b\u7ebf\u6027\u8868\u200b\u7684\u200b\u5355\u94fe\u200b\u8868\u200b\u4e00\u6837\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u64cd\u4f5c\u200b\u4e0a\u200b\u7684\u200b\u65b9\u4fbf\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e5f\u200b\u7ed9\u200b\u94fe\u200b\u961f\u5217\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u5934\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u4ee4\u5934\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u5934\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u5c3e\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u5c3e\u200b\u7ed3\u70b9\u200b\u3002  </p> <p>\u200b\u5934\u200b\u6307\u9488\u200bfront\u200b\u548c\u200b\u5c3e\u200b\u6307\u9488\u200brear\u200b\u662f\u200b\u4e24\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b\u6307\u9488\u200b\u53d8\u91cf\u200b\uff0c\u200b\u4ece\u200b\u7ed3\u6784\u200b\u4e0a\u200b\u8003\u8651\u200b\uff0c\u200b\u901a\u5e38\u200b\u5c06\u200b\u4e8c\u8005\u200b\u5c01\u88c5\u200b\u5728\u200b\u4e00\u4e2a\u200b\u7ed3\u6784\u200b\u4e2d\u200b\u3002\u200b\u94fe\u8868\u200b\u7684\u200b\u7c7b\u578b\u200b\u63cf\u8ff0\u200b\u5982\u4e0b\u200b\uff1a  ```cpp  typedef struct LQNode{     Element data;     struct LQNode *next; }LQNode,*LinkedQNode;         //\u200b\u94fe\u200b\u961f\u5217\u200b\u7ed3\u70b9\u200b\u7c7b\u578b\u200b</p> <p>typedef struct {     struct LQNode *front, *rear;   //\u200b\u5934\u200b\u6307\u9488\u200b\u548c\u200b\u5c3e\u200b\u6307\u9488\u200b }LQueue,*LinkedQueue;                //\u200b\u5c06\u5934\u200b\u6307\u9488\u200b\u548c\u200b\u5c3e\u200b\u6307\u9488\u200b\u5c01\u88c5\u200b\u5728\u200b\u4e00\u8d77\u200b\u7684\u200b\u94fe\u200b\u961f\u5217\u200b  ```</p> <p>\u200b\u5f62\u6210\u200b\u7684\u200b\u961f\u5217\u200b\u7ed3\u6784\u200b\u662f\u200b\uff1a</p> <p></p>"},{"location":"DataStruct/9-%E9%98%9F%E5%88%97/#_4","title":"\u4ee3\u7801","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;sstream&gt;\nusing namespace std;\n#define MAXSIZE 100\ntypedef int Element;\ntypedef struct LQNode{\n    Element data;\n    struct LQNode *next;\n}LQNode,*LinkedQNode;         //\u200b\u94fe\u200b\u961f\u5217\u200b\u7ed3\u70b9\u200b\u7c7b\u578b\u200b\ntypedef struct {\n    struct LQNode *front, *rear;   //\u200b\u5934\u200b\u6307\u9488\u200b\u548c\u200b\u5c3e\u200b\u6307\u9488\u200b\n}LQueue,*LinkedQueue;                //\u200b\u5c06\u5934\u200b\u6307\u9488\u200b\u548c\u200b\u5c3e\u200b\u6307\u9488\u200b\u5c01\u88c5\u200b\u5728\u200b\u4e00\u8d77\u200b\u7684\u200b\u94fe\u200b\u961f\u5217\u200b\n//\u200b\u521d\u59cb\u5316\u200b\nLinkedQueue LinkedQueueInit() {\n    LinkedQueue q;\n    LinkedQNode p;\n    q = (LQueue*)malloc(sizeof(LQueue));\n    p = (LQNode*)malloc(sizeof(LQNode));\n    p-&gt;next = NULL;\n    q-&gt;front = q-&gt;rear = p;\n    return q;\n}\n//\u200b\u5165\u961f\u200b\nLinkedQueue LinkedQueueIn(LinkedQueue q,Element x) {\n    LinkedQNode p = (LQNode*)malloc(sizeof(LQNode));\n    p-&gt;data = x;\n    p-&gt;next = NULL;\n    q-&gt;rear-&gt;next = p;\n    q-&gt;rear = p;\n    cout &lt;&lt; \"\u200b\u5165\u961f\u200b\u6210\u529f\u200b\uff01\" &lt;&lt; endl;\n    return q;\n}\n//\u200b\u51fa\u961f\u200b\nLinkedQueue LinkedQueueOut(LinkedQueue q) {\n    if (q-&gt;front==q-&gt;rear) {\n        cout &lt;&lt; \"\u200b\u961f\u7a7a\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u51fa\u961f\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        LinkedQNode p;\n        p = q-&gt;front-&gt;next;\n        cout &lt;&lt; \"\u200b\u51fa\u961f\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; p-&gt;data &lt;&lt; endl;\n        q-&gt;front-&gt;next = p-&gt;next;\n        free(p);\n        if (q-&gt;front-&gt;next == NULL) {\n            q-&gt;rear = q-&gt;front;\n        }\n    }\n    return q;\n}\n//\u200b\u8bfb\u961f\u200b\u5934\u200b\u5143\u7d20\u200b\nvoid LinkedQueueHead(LinkedQueue q) {\n    if (q-&gt;front == q-&gt;rear) {\n        cout &lt;&lt; \"\u200b\u961f\u7a7a\u200b,\u200b\u6ca1\u6709\u200b\u961f\u5934\u200b\u5143\u7d20\u200b\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u961f\u5934\u200b\u5143\u7d20\u200b\u662f\u200b\uff1a\" &lt;&lt; q-&gt;front-&gt;next-&gt;data &lt;&lt; endl;\n    }\n}\n//\u200b\u5224\u65ad\u200b\u7a7a\u200b\nvoid LinkedQueueEmpty(LinkedQueue q) {\n    if (q-&gt;front == q-&gt;rear) {\n        cout &lt;&lt; \"\u200b\u961f\u4e3a\u200b\u7a7a\u200b\uff01\" &lt;&lt; endl;\n    }\n    else {\n        cout &lt;&lt; \"\u200b\u961f\u4e0d\u4e3a\u200b\u7a7a\u200b\uff01\" &lt;&lt; endl;\n    }\n}\n//\u200b\u6c42\u200b\u961f\u5217\u200b\u957f\u200b\nvoid LinkedQueueLength(LinkedQueue q) {\n    int i = 0;\n    LinkedQNode p;\n    p = q-&gt;front;\n    while (p-&gt;next != NULL) {\n        p = p-&gt;next;\n        i++;\n    }\n    cout &lt;&lt; \"\u200b\u5bf9\u5217\u957f\u200b\u4e3a\u200b:\" &lt;&lt; i &lt;&lt; endl;\n}\nvoid print() {\n    cout &lt;&lt; \"******************************************\" &lt;&lt; endl;\n    cout &lt;&lt; \"* 1 \u200b\u5165\u961f\u200b                  2 \u200b\u51fa\u961f\u200b         *\" &lt;&lt; endl;\n    cout &lt;&lt; \"* 3 \u200b\u8bfb\u961f\u200b\u5934\u200b\u5143\u7d20\u200b            4 \u200b\u5224\u65ad\u200b\u7a7a\u200b       *\" &lt;&lt; endl;\n    cout &lt;&lt; \"* 5 \u200b\u961f\u5217\u200b\u957f\u5ea6\u200b              6 \u200b\u6e05\u5c4f\u200b         *\" &lt;&lt; endl;\n    cout &lt;&lt; \"* 7\u200b\u9000\u51fa\u200b                                  *\" &lt;&lt; endl;\n    cout &lt;&lt; \"******************************************\" &lt;&lt; endl;\n}\nvoid main() {\n    int i, m;\n    LinkedQueue q = LinkedQueueInit();\n    print();\n    while (1) {\n        cin &gt;&gt; i;\n        switch (i) {\n        case 1:cin &gt;&gt; m; q = LinkedQueueIn(q, m); break;\n        case 2:q = LinkedQueueOut(q); break;\n        case 3:LinkedQueueHead(q); break;\n        case 4:LinkedQueueEmpty(q); break;\n        case 5:LinkedQueueLength(q); break;\n        case 6:system(\"cls\"); print(); break;\n        case 7:exit(0); break;\n        default:cout &lt;&lt; \"\u200b\u8f93\u5165\u200b\u9519\u8bef\u200b\uff0c\u200b\u8bf7\u200b\u91cd\u65b0\u200b\u8f93\u5165\u200b\uff01\" &lt;&lt; endl; break;\n        }\n    }\n}\n</code></pre>"},{"location":"Godot/","title":"\u76ee\u5f55","text":"<ul> <li>Vmd\u200b\u6587\u4ef6\u200b\u89e3\u6790\u200b</li> <li>3D\u200b\u7269\u4f53\u200b\u63cf\u8fb9\u200b</li> <li>xz\u200b\u5e73\u9762\u200b\u65b9\u5411\u200b\u79fb\u52a8\u200b</li> <li>shader\u200b\u7ed8\u5236\u200b\u7f51\u683c\u200b</li> </ul>"},{"location":"Godot/1-3DOutline/","title":"3D \u200b\u63cf\u8fb9\u200b\u7684\u200b Shader \u200b\u4ee3\u7801","text":"<p>\u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u5728\u200b Godot \u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u50cf\u7d20\u200b\u827a\u672f\u200b\u8f6e\u5ed3\u200b\u9ad8\u5149\u200b\u540e\u5904\u7406\u200b\u6548\u679c\u200b\u7684\u200b GLSL \u200b\u7740\u8272\u5668\u200b\u3002\u200b\u5b83\u200b\u4f7f\u7528\u200b\u4e86\u200b\u6df1\u5ea6\u200b\u7eb9\u7406\u200b\u3001\u200b\u5c4f\u5e55\u200b\u7eb9\u7406\u200b\u548c\u200b\u6cd5\u7ebf\u200b\u7eb9\u7406\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b\u9634\u5f71\u200b\u989c\u8272\u200b\u548c\u200b\u900f\u660e\u5ea6\u200b\u7684\u200b\u65b0\u200b\u5e27\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u8be5\u200b\u7740\u8272\u5668\u200b\u7684\u200b\u4e3b\u8981\u200b\u90e8\u5206\u200b\uff1a</p> <p>getDepth \u200b\u51fd\u6570\u200b\uff1a\u200b\u8ba1\u7b97\u200b\u7ed9\u5b9a\u200b\u5c4f\u5e55\u200b\u7a7a\u95f4\u200b\u5750\u6807\u200b\u5904\u200b\u7684\u200b\u6df1\u5ea6\u200b\u503c\u200b\u3002</p> <p>fragment \u200b\u51fd\u6570\u200b\uff1a\u200b\u4e3b\u8981\u200b\u7684\u200b\u7247\u6bb5\u200b\u7740\u8272\u200b\u51fd\u6570\u200b\uff0c\u200b\u5b83\u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u50cf\u7d20\u200b\u7684\u200b\u6df1\u5ea6\u200b\u4fe1\u606f\u200b\u3001\u200b\u5c4f\u5e55\u200b\u989c\u8272\u200b\u548c\u200b\u6cd5\u7ebf\u200b\u6570\u636e\u200b\uff0c\u200b\u7136\u540e\u200b\u904d\u5386\u200b\u5176\u200b\u5468\u56f4\u200b\u7684\u200b\u50cf\u7d20\u200b\u6765\u200b\u8ba1\u7b97\u200b\u8fb9\u7f18\u200b\u539a\u5ea6\u200b\u548c\u200b\u9634\u5f71\u200b\u989c\u8272\u200b\u3002</p> <p>\u200b\u904d\u5386\u200b\u5468\u56f4\u200b\u50cf\u7d20\u200b\u65f6\u200b\uff0c\u200b\u6bd4\u8f83\u200b\u5f53\u524d\u200b\u50cf\u7d20\u200b\u548c\u200b\u5468\u56f4\u200b\u50cf\u7d20\u200b\u7684\u200b\u6df1\u5ea6\u200b\u5dee\u5f02\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5dee\u5f02\u200b\u4e58\u4ee5\u200b\u4e00\u4e2a\u200b\u7cfb\u6570\u200b\u5f97\u5230\u200b\u6700\u7ec8\u200b\u7684\u200b\u9634\u5f71\u200b\u539a\u5ea6\u200b\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u5468\u56f4\u200b\u50cf\u7d20\u200b\u7684\u200b\u6df1\u5ea6\u200b\u6bd4\u200b\u5f53\u524d\u200b\u50cf\u7d20\u200b\u7684\u200b\u6df1\u5ea6\u200b\u5c0f\u200b\uff0c\u200b\u5219\u200b\u5c06\u200b\u5176\u200b\u989c\u8272\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u65b0\u200b\u7684\u200b\u9634\u5f71\u200b\u989c\u8272\u200b\uff0c\u200b\u5e76\u200b\u8ba1\u7b97\u200b\u76f8\u5e94\u200b\u7684\u200b\u6cd5\u7ebf\u200b\u5dee\u5f02\u200b\u3002 \u200b\u6700\u540e\u200b\uff0c\u200b\u6839\u636e\u200b\u8ba1\u7b97\u200b\u51fa\u200b\u7684\u200b\u9634\u5f71\u200b\u539a\u5ea6\u200b\u3001\u200b\u989c\u8272\u200b\u548c\u200b\u900f\u660e\u5ea6\u200b\u66f4\u65b0\u200b\u8f93\u51fa\u200b\u7684\u200b\u989c\u8272\u200b\u548c\u200b\u6df1\u5ea6\u200b\u503c\u200b\u3002</p> <pre><code>shader_type spatial;\nrender_mode unshaded, depth_draw_opaque, depth_prepass_alpha;\n\n// Inspired by https://godotshaders.com/shader/3d-pixel-art-outline-highlight-post-processing-shader/\n\nuniform sampler2D DEPTH_TEXTURE : hint_depth_texture, filter_linear_mipmap;\nuniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;\nuniform sampler2D NORMAL_TEXTURE : hint_normal_roughness_texture, filter_nearest;\n\n\nuniform vec3 shadow_color : source_color = vec3(0.0);\nuniform float shadow_thickness = 2.0;\n\nvec2 getDepth(vec2 screen_uv, sampler2D depth_texture, mat4 inv_projection_matrix){\n    float raw_depth = texture(depth_texture, screen_uv)[0];                              // \u200b\u4ece\u200b\u6df1\u5ea6\u200b\u7eb9\u7406\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u50cf\u7d20\u200b\u7684\u200b\u6df1\u5ea6\u200b\u503c\u200b\n    vec3 normalized_device_coordinates = vec3(screen_uv * 2.0 - 1.0, raw_depth);         // \u200b\u5c06\u200b\u5c4f\u5e55\u200b\u7a7a\u95f4\u200b\u5750\u6807\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5f52\u4e00\u5316\u200b\u8bbe\u5907\u200b\u5750\u6807\u200b\n    vec4 view_space = inv_projection_matrix * vec4(normalized_device_coordinates, 1.0);  // \u200b\u5c06\u200b\u5f52\u4e00\u5316\u200b\u8bbe\u5907\u200b\u5750\u6807\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u89c6\u56fe\u200b\u7a7a\u95f4\u200b\u5750\u6807\u200b\n    view_space.xyz /= view_space.w;                                                      // \u200b\u89c6\u56fe\u200b\u7a7a\u95f4\u200b\u5750\u6807\u200b\u9664\u4ee5\u200b w \u200b\u5206\u91cf\u200b\u5f97\u5230\u200b\u9f50\u6b21\u200b\u88c1\u526a\u200b\u5750\u6807\u200b\n    return vec2(-view_space.z, raw_depth);\n}\n\n\nvoid fragment() {\n    vec2 e = vec2(1./VIEWPORT_SIZE.xy)*1.0;   // \u200b\u8ba1\u7b97\u200b\u7528\u4e8e\u200b\u904d\u5386\u200b\u5468\u56f4\u200b\u50cf\u7d20\u200b\u7684\u200b\u5355\u4f4d\u5411\u91cf\u200b\n\n    float depth_diff = 0.0;\n    float neg_depth_diff = .5;\n\n    vec2 depth_data = getDepth(SCREEN_UV, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);  // \u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u50cf\u7d20\u200b\u7684\u200b\u6df1\u5ea6\u200b\u6570\u636e\u200b\n    float depth = depth_data.x;\n    vec3 color = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;  // \u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u50cf\u7d20\u200b\u7684\u200b\u989c\u8272\u200b\n    vec3 c = vec3(0.0);\n\n    vec2 min_depth_data = depth_data;\n    float min_depth = 9999999.9;\n\n\n    vec3 normal = texture(NORMAL_TEXTURE, SCREEN_UV).rgb * 2.0 - 1.0; // \u200b\u5c06\u200b\u6cd5\u7ebf\u200b\u5411\u91cf\u200b\u7684\u200b\u8303\u56f4\u200b\u6269\u5c55\u200b\u5230\u200b -1 \u200b\u5230\u200b 1\n\n    for (float x = -shadow_thickness; x &lt;= shadow_thickness;x += 1.0){\n        for (float y = -shadow_thickness; y &lt;= shadow_thickness; y += 1.0){\n            // \u200b\u539f\u70b9\u200b \u200b\u548c\u200b  \u200b\u8ddd\u79bb\u200b\u5927\u4e8e\u200b\u9634\u5f71\u200b\u539a\u5ea6\u200b\u7684\u200b\u50cf\u7d20\u200b \u200b\u65e0\u9700\u200b\u5904\u7406\u200b\n            if ((x == 0.0 &amp;&amp; y == 0.0) || (shadow_thickness*shadow_thickness &lt; (x*x + y*y))){\n                continue;\n            }\n\n            // \u200b\u6cbf\u7740\u200b x \u200b\u548c\u200b y \u200b\u65b9\u5411\u200b\u5206\u522b\u200b\u504f\u79fb\u200b\u4e00\u4e2a\u200b\u50cf\u7d20\u200b\u7684\u200b\u8ddd\u79bb\u200b\n            vec2 du_data = getDepth(SCREEN_UV+1.0*vec2(x, y)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);\n            // \u200b\u6cbf\u7740\u200b x \u200b\u548c\u200b y \u200b\u65b9\u5411\u200b\u5206\u522b\u200b\u504f\u79fb\u200b\u534a\u4e2a\u200b\u50cf\u7d20\u200b\u7684\u200b\u8ddd\u79bb\u200b\n            vec2 dd_data = getDepth(SCREEN_UV+0.5*vec2(x, y)*e, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);\n\n            float du = du_data.x;\n            float dd = dd_data.x;\n\n            // \u200b\u6df1\u5ea6\u200b\u7684\u200b\u5dee\u5f02\u200b\u503c\u200b\n            float dd_diff = clamp(abs((depth - dd) - (dd - du)), 0.0, 1.0);\n            // \u200b\u5f97\u5230\u200b\u9634\u5f71\u200b\u5f3a\u5ea6\u200b\n            float val = clamp(abs(depth - du), 0., 1.)/(x*x + y*y)*dd_diff*dd_diff*5000.0;\n\n            val = clamp(val, 0.0, 1.0);\n\n            //\u200b\u5c06\u200b\u591a\u4e2a\u200b\u50cf\u7d20\u200b\u7684\u200b\u9634\u5f71\u200b\u6548\u679c\u200b\u7d2f\u79ef\u200b\u8d77\u6765\u200b\uff0c\u200b\u4ece\u800c\u200b\u5b9e\u73b0\u200b\u9634\u5f71\u200b\u6e10\u53d8\u200b\u6548\u679c\u200b\n            depth_diff += val;\n\n            if (du &lt; min_depth){\n                min_depth = du;  // \u200b\u4fdd\u5b58\u200b\u6700\u5c0f\u200b\u6df1\u5ea6\u200b\u503c\u200b\n                min_depth_data = du_data;\n                c = texture(SCREEN_TEXTURE, SCREEN_UV+vec2(x, y)*e).rgb;\n\n                //\u200b\u5c06\u200b\u8272\u5f69\u200b\u9650\u5236\u200b\u5728\u200b 0-1 \u200b\u8303\u56f4\u200b\u5185\u200b\n                c *= clamp(0.5+ 0.5*dot(normalize(vec2(x, y)), (vec2(0.0, 1.0))), 0.0, 1.0);\n\n            }\n\n            vec3 nu = texture(NORMAL_TEXTURE, SCREEN_UV+vec2(x, y)*e).rgb * 2.0 - 1.0;\n\n            depth_diff += (1.0-abs(dot(nu, normal)))/max(min(dd, depth), 2.0);\n        }\n    }\n\n\n    depth_diff = smoothstep(0.2, 0.3, depth_diff);\n\n    vec3 final = c*shadow_color;\n    ALBEDO = final;\n\n    float alpha_mask = depth_diff;\n    DEPTH = min_depth_data.y*alpha_mask + depth_data.y*(1.0-alpha_mask);\n    ALPHA = clamp((alpha_mask) * 5., 0., 1.);\n\n}\n</code></pre>"},{"location":"Godot/2-EndlessTerrian/","title":"Endless Terrian","text":""},{"location":"Godot/3-GridOnPlane/","title":"\u5728\u200b\u8868\u9762\u200b\u7ed8\u5236\u200b\u4e8c\u7ef4\u200b\u7f51\u683c","text":"<p>\u200b\u6700\u8fd1\u200b\u60f3\u200b\u505a\u200b\u4e00\u4e9b\u200b\u4e1c\u897f\u200b\uff0c\u200b\u4f46\u662f\u200b\u5f97\u200b\u5229\u7528\u200b\u6e38\u620f\u200b\u5f15\u64ce\u200b\u6765\u200b\u5b8c\u6210\u200b\u3002\u200b\u4e4b\u524d\u200b\u8ddf\u200b\u4e86\u200b\u4e00\u4e2a\u200bunity\u200b\u5b9e\u73b0\u200b\u7f51\u683c\u200b\u7cfb\u7edf\u200b\u7684\u200b\u6559\u7a0b\u200b\uff0c\u200b\u4f46\u662f\u200b\u6211\u200b\u60f3\u200b\u5728\u200bgodot\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u6548\u679c\u200b\u3002\u200b\u4f46\u662f\u200bgodot\u200b\u6559\u7a0b\u200b\u4e0d\u200b\u591a\u200b\uff0c\u200b\u90a3\u200b\u53ea\u80fd\u200b\u6211\u200b\u81ea\u5df1\u200b\u6162\u6162\u200b\u6478\u7d22\u200b\u4e86\u200b\u3002</p>"},{"location":"Godot/3-GridOnPlane/#_2","title":"\u6548\u679c","text":""},{"location":"Godot/3-GridOnPlane/#_3","title":"\u4ee3\u7801","text":"<pre><code>shader_type spatial;\n\nuniform vec2 object_scale = vec2(1,1);\nuniform vec2 default_value = vec2(10,10);\nuniform vec2 size = vec2(1,1);\nuniform vec2 offset = vec2(0,0);\nuniform vec4 grid_color = vec4(1,1,1,1);\nuniform float thickness: hint_range(0.001, 0.05, 0.01) = 0.05;\n\nvec2 tilling_and_offset(vec2 uv, vec2 tilling, vec2 offset_value){\n    vec2 result = uv * tilling;\n    result += offset_value;\n    return result;\n}\n\nvec2 saturate(vec2 value) {\n    return vec2(clamp(value.x, 0.0, 1.0), clamp(value.y, 0.0, 1.0));\n}\n\n\nfloat rectangle(vec2 uv, float width,float height){\n    vec2 d = abs(uv * 2.0 -vec2(1,1)) - vec2(width, height);\n    d = vec2(1,1)-d / fwidth(d);\n    d = saturate(d);\n    return min(d.x,d.y);\n}\n\nvoid fragment() {\n    vec2 default_grid_count = vec2(default_value.x * object_scale.x,default_value.y * object_scale.y); // \u200b\u9ed8\u8ba4\u200b\u683c\u5b50\u200b\u6570\u91cf\u200b\u662f\u200b10x10\n    default_grid_count  *= size; // \u200b\u4e58\u4ee5\u200bsize \u200b\u53ef\u4ee5\u200b\u589e\u52a0\u200b\u6216\u200b\u51cf\u5c11\u200b\u683c\u5b50\u200b\u6570\u91cf\u200b\n    float grid_size = 1.0 - thickness; //\u200b\u5355\u4e2a\u200b\u683c\u5b50\u200b\u7684\u200b\u5927\u5c0f\u200b\n    vec2 resize_uv =  tilling_and_offset(UV,default_grid_count,offset);\n    resize_uv = fract(resize_uv);\n    float value = rectangle(resize_uv,grid_size,grid_size);\n    if(!isinf(value)){\n        vec4 color = vec4(value,value,value,1);\n        color = vec4(1,1,1,1) - color;\n        color = grid_color * color;\n        ALBEDO = vec3(color.r,color.g,color.b);\n        ALPHA = 0.4;\n    }\n}\n</code></pre>"},{"location":"Godot/4-MoveScript/","title":"xz\u200b\u5e73\u9762\u200b\u65b9\u5411\u200b\u79fb\u52a8","text":"<p>GDscript \u200b\u4ee3\u7801\u200b,  <pre><code>extend CharacterBody3D\n\nvar input_dir := Input.get_vector(\"move_left\",\"move_right\",\"move_forward\",\"move_down\");\nvar direction := (transform.basis * Vector3(input_dir.x,0,input_dir.y)).normalized()\nif direction:\n    velocity.x = direction.x * speed\n    velocity.z = direction.z * speed\nelse:\n    velocity.x = move_toward(velocity.x,0,speed)\n    velocity.z = move_toward(velocity.z,0,speed)\nmove_and_slide()\n</code></pre></p>"},{"location":"Godot/5-VmdParse/","title":"Vmd \u200b\u6587\u4ef6\u200b\u89e3\u6790","text":"<p>MikuMikuDance vmd \u200b\u6587\u4ef6\u200b\u89e3\u6790\u200b\u4ee3\u7801\u200b\uff0c\u200b\u7528\u200bGDScript \u200b\u7f16\u5199\u200b</p>"},{"location":"Godot/5-VmdParse/#_1","title":"\u4ee3\u7801","text":"<pre><code>class_name VMD\nvar version:int\nvar model_name\n\nvar bones:Array\nvar morphs:Array\nvar cameras:Array \n\nfunc parse_file(path):\n    var pos:int = 0\n    var value = FileAccess.file_exists(path)\n    var file = FileAccess.get_file_as_bytes(path)\n    var head_string = file.slice(0,30).get_string_from_ascii()\n    pos += 30\n    if head_string == \"Vocaloid Motion Data file\":\n        version = 1\n        model_name = file.slice(pos,10).get_string_from_utf8()\n        pos += 10\n    elif  head_string  == \"Vocaloid Motion Data 0002\":\n        version = 2\n        model_name = file.slice(pos,20).get_string_from_utf8()\n        pos += 20\n\n    pos = parse_bone(file, pos)\n    pos = parse_morph(file, pos)\n    pos = parse_camera(file,pos)\n\n    print(\"version: \", version)\n    print(\"model_name \", model_name)\n\n\n# every bone has 111 bytes\nfunc parse_bone(file,pos):\n    var bone_record = file.decode_u32(pos)\n    pos += 4\n    for index in range(bone_record):\n\n        var bone_name = file.slice(pos,15).get_string_from_utf8()\n\n        print(\"bone name: \", bone_name)\n        pos += 15\n        var frame_time:int = file.decode_32(pos)\n        pos += 4\n\n        var tx: float = file.decode_float(pos)\n        pos += 4\n        var ty: float = file.decode_float(pos)\n        pos += 4\n        var tz: float = file.decode_float(pos)\n        pos += 4\n\n        var rx: float = file.decode_float(pos)\n        pos += 4\n        var ry: float = file.decode_float(pos)\n        pos += 4\n        var rz: float = file.decode_float(pos)\n        pos += 4\n        var rw: float = file.decode_float(pos)\n        pos += 4\n\n        var txc1: int = file.decode_32(pos)\n        pos += 4\n        var txc2: int = file.decode_32(pos)\n        pos += 4\n        var txc3: int = file.decode_32(pos)\n        pos += 4\n        var txc4: int = file.decode_32(pos)\n        pos += 4\n\n        var tyc1: int = file.decode_32(pos)\n        pos += 4\n        var tyc2: int = file.decode_32(pos)\n        pos += 4\n        var tyc3: int = file.decode_32(pos)\n        pos += 4\n        var tyc4: int = file.decode_32(pos)\n        pos += 4\n\n        var tzc1: int = file.decode_32(pos)\n        pos += 4\n        var tzc2: int = file.decode_32(pos)\n        pos += 4\n        var tzc3: int = file.decode_32(pos)\n        pos += 4\n        var tzc4: int = file.decode_32(pos)\n        pos += 4\n\n        var rc1: int = file.decode_32(pos)\n        pos += 4\n        var rc2: int = file.decode_32(pos)\n        pos += 4\n        var rc3: int = file.decode_32(pos)\n        pos += 4\n        var rc4: int = file.decode_32(pos)\n        pos += 4\n\n        var bone_data = [bone_name,frame_time,tx,ty,tz,rx,ry,rz,rw,txc1,txc2,txc3,txc4,tyc1,tyc2,tyc3,tyc4,tzc1,tzc2,tzc3,tzc4,rc1,rc2,rc3,rc4]\n        bones.append_array(bone_data)\n\n    return pos\n\n# morph has 23 bytes    \nfunc parse_morph(file, pos):\n    var number:int = file.decode_u32(pos)\n    print(\"morph number: \", number)\n    pos += 4\n    for index in range(number):\n        var name = file.slice(pos, 15).get_string_from_utf8()\n        pos += 15\n        var frame_time:int = file.decode_32(pos)\n        pos += 4\n        var weight: float = file.decode_float(pos +1)\n        pos += 4\n        var morph_array = [name, frame_time, weight]\n        morphs.append_array(morph_array)\n    return pos\n\n# camera has 61 bytes   \nfunc parse_camera(file, pos):\n    var number: int = file.decode_u32(pos)\n    print(\"camera number: \", number)\n    pos += 4\n\n    for index in range(number):\n        var frame_time:int = file.decode_s32(pos)\n        pos += 4\n\n        var distance:float = file.decode_float(pos)\n        pos += 4\n\n        var px: float = file.decode_float(pos)\n        pos += 4\n        var py: float = file.decode_float(pos)\n        pos += 4\n        var pz: float = file.decode_float(pos)\n        pos += 4\n\n        var rx: float = file.decode_float(pos)\n        pos += 4\n        var ry: float = file.decode_float(pos)\n        pos += 4\n        var rz: float = file.decode_float(pos)\n        pos += 4\n\n        var txc1: int = file.decode_s8(pos)\n        pos += 1\n        var txc2: int = file.decode_s8(pos)\n        pos += 1\n        var txc3: int = file.decode_s8(pos)\n        pos += 1\n        var txc4: int = file.decode_s8(pos)\n        pos += 1\n\n        var tyc1: int = file.decode_s8(pos)\n        pos += 1\n        var tyc2: int = file.decode_s8(pos)\n        pos += 1\n        var tyc3: int = file.decode_s8(pos)\n        pos += 1\n        var tyc4: int = file.decode_s8(pos)\n        pos += 1\n\n        var tzc1: int = file.decode_s8(pos)\n        pos += 1\n        var tzc2: int = file.decode_s8(pos)\n        pos += 1\n        var tzc3: int = file.decode_s8(pos)\n        pos += 1\n        var tzc4: int = file.decode_s8(pos)\n        pos += 1\n\n        var qc1: int = file.decode_s8(pos)\n        pos += 1\n        var qc2: int = file.decode_s8(pos)\n        pos += 1\n        var qc3: int = file.decode_s8(pos)\n        pos += 1\n        var qc4: int = file.decode_s8(pos)\n        pos += 1\n\n        var dc1: int = file.decode_s8(pos)\n        pos += 1\n        var dc2: int = file.decode_s8(pos)\n        pos += 1\n        var dc3: int = file.decode_s8(pos)\n        pos += 1\n        var dc4: int = file.decode_s8(pos)\n        pos += 1\n\n        var vc1: int = file.decode_s8(pos)\n        pos += 1\n        var vc2: int = file.decode_s8(pos)\n        pos += 1\n        var vc3: int = file.decode_s8(pos)\n        pos += 1\n        var vc4: int = file.decode_s8(pos)\n        pos += 1\n\n        var view__angle = file.decode_float(pos)\n        pos += 4\n\n        var orthgraphic = file.decode_s8(pos)\n        pos += 1\n\n        var camera_data = [frame_time, distance,px,py,pz,rx,ry,rz,txc1,txc2,txc3,txc4,tyc1,tyc2,tyc3,tyc4,tzc1,tzc2,tzc3,tzc4,qc1,qc2,qc3,qc4,dc1,dc2,dc3,dc4,vc1,vc2,vc3,vc4]\n        cameras.append_array(camera_data)\n    return pos\n</code></pre>"},{"location":"Godot-Source/","title":"\u76ee\u5f55","text":""},{"location":"Godot-Source/#_2","title":"\u6e32\u67d3\u200b\u6d41\u7a0b","text":"<ul> <li>1.1\u200b\u6e32\u67d3\u200b\u7cfb\u7edf\u200b\u7684\u200b\u914d\u7f6e\u200b</li> <li>1.2vulkan\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316\u200b</li> <li>1.3Vulkan Render Device \u200b\u7684\u200b\u521b\u5efa\u200b</li> </ul>"},{"location":"Godot-Source/#_3","title":"\u7c7b\u200b\u89e3\u6790","text":"<ul> <li>RenderDevice</li> </ul>"},{"location":"Godot-Source/01render_create/","title":"Godot\u200b\u6e32\u67d3\u200b\u6d41\u7a0b","text":""},{"location":"Godot-Source/01render_create/#1","title":"1. \u200b\u6e32\u67d3\u200b\u7cfb\u7edf\u200b\u7684\u200b\u6784\u5efa","text":"<p>\u200b\u8fd9\u6b21\u200b\u5206\u6790\u200b\u7684\u200b\u6e90\u7801\u200b\u662f\u200b\u57fa\u4e8e\u200bGodot 4.3 \u200b\u7248\u672c\u200b\u3002 CommitId\u200b\u662f\u200b\uff1a 179dfdc</p> <p>\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u7684\u200b\u5185\u5bb9\u200b\u4e3b\u8981\u200b\u662f\u200b\u65ad\u70b9\u200b\u8c03\u8bd5\u200b\u8ddf\u8fdb\u200bGodot\u200b\u6e32\u67d3\u200b\u7cfb\u7edf\u200b\u662f\u200b\u600e\u4e48\u200b\u521b\u5efa\u200b\u56fe\u5f62\u200b\u6e32\u67d3\u200b\u8bbe\u5907\u200b\uff0c\u200b\u8c03\u7528\u200b\u56fe\u5f62\u200bAPI\u200b\u63a5\u53e3\u200b\uff0c\u200b\u7ed8\u5236\u200b\u56fe\u50cf\u200b\u6570\u636e\u200b\u3002\u200b\u5206\u6790\u200b\u7684\u200b\u4e3b\u8981\u200b\u662f\u200b\u4e0e\u200bVulkan\u200b\u76f8\u5173\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0copengl3\u200b\u7684\u200b\u7c7b\u4f3c\u200b\u5c31\u200b\u4e0d\u200b\u591a\u200b\u8d58\u8ff0\u200b\u4e86\u200b\uff0c\u200b\u800c\u4e14\u200b\u4e0e\u200b\u56fe\u5f62\u200b\u4e0d\u200b\u76f8\u5173\u200b\u7684\u200b\u5185\u5bb9\u200b\u6211\u4f1a\u200b\u76f4\u63a5\u200b\u8df3\u8fc7\u200b\u3002</p>"},{"location":"Godot-Source/01render_create/#11","title":"1.1 \u200b\u6e32\u67d3\u200b\u7cfb\u7edf\u200b\u7684\u200b\u914d\u7f6e","text":"<p>\u200b\u901a\u8fc7\u200b\u65ad\u70b9\u200b\u8fdb\u5165\u200b\u5230\u200b Main::setup \u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u4e2d\u95f4\u200b\u6709\u200b\u5f88\u957f\u200b\u7684\u200b\u4e00\u6bb5\u200b\u53c2\u6570\u200b\u89e3\u6790\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5e95\u5c42\u200b\u7684\u200b\u56fe\u5f62\u200b\u63a5\u53e3\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u547d\u4ee4\u884c\u200b\u6307\u5b9a\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u6307\u5b9a\u200b\u5404\u4e2a\u200b\u5e73\u53f0\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u56fe\u5f62\u200b\u9a71\u52a8\u200b\u4ee3\u7801\u200b\uff0c\u200b\u901a\u8fc7\u200b VULKAN_ENABLED \u200b\u5b8f\u6765\u200b\u6307\u5b9a\u200b\u56fe\u5f62\u200b\u5e95\u5c42\u200b\u4e3a\u200bvulkan\uff0c\u200b\u800c\u200b VULKAN_ENABLED \u200b\u5b8f\u200b\u7684\u200b\u6307\u5b9a\u200b\u662f\u200b\u5b9a\u4e49\u200b\u5728\u200bdetect.py\u200b\u4e2d\u200b <pre><code>    {\n        String driver_hints = \"\";\n        String driver_hints_with_d3d12 = \"\";\n\n        {\n            Vector&lt;String&gt; driver_hints_arr;\n#ifdef VULKAN_ENABLED\n            driver_hints_arr.push_back(\"vulkan\");\n#endif\n            driver_hints = String(\",\").join(driver_hints_arr);\n\n#ifdef D3D12_ENABLED\n            driver_hints_arr.push_back(\"d3d12\");\n#endif\n            driver_hints_with_d3d12 = String(\",\").join(driver_hints_arr);\n        }\n\n        String default_driver = driver_hints.get_slice(\",\", 0);\n        String default_driver_with_d3d12 = driver_hints_with_d3d12.get_slice(\",\", 0);\n\n        // For now everything defaults to vulkan when available. This can change in future updates.\n        GLOBAL_DEF_RST_NOVAL(\"rendering/rendering_device/driver\", default_driver);\n        GLOBAL_DEF_RST_NOVAL(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.windows\", PROPERTY_HINT_ENUM, driver_hints_with_d3d12), default_driver_with_d3d12);\n        GLOBAL_DEF_RST(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.linuxbsd\", PROPERTY_HINT_ENUM, driver_hints), default_driver);\n        GLOBAL_DEF_RST(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.android\", PROPERTY_HINT_ENUM, driver_hints), default_driver);\n        GLOBAL_DEF_RST(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.ios\", PROPERTY_HINT_ENUM, driver_hints), default_driver);\n        GLOBAL_DEF_RST(PropertyInfo(Variant::STRING, \"rendering/rendering_device/driver.macos\", PROPERTY_HINT_ENUM, driver_hints), default_driver);\n    }\n</code></pre></p> <p>\u200b\u4e0b\u9762\u200b\u4ee3\u7801\u200b\u6307\u5b9a\u200b\u4e86\u200b\u4e3b\u673a\u200b\u3001\u200b\u624b\u673a\u200b\u7b49\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u6e32\u67d3\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4e3b\u673a\u200b\u7aef\u200b\u9ed8\u8ba4\u200b\u662f\u200bforward+\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u79fb\u52a8\u200b\u7aef\u200b\u662f\u200b mobile,\u200b\u800c\u200bweb\u200b\u7aef\u5219\u200b\u662f\u200b gl_compatibility\uff1a opengl\u200b\u517c\u5bb9\u200b\u6a21\u5f0f\u200b <pre><code>default_renderer = renderer_hints.get_slice(\",\", 0);\nGLOBAL_DEF_RST_BASIC(PropertyInfo(Variant::STRING, \"rendering/renderer/rendering_method\", PROPERTY_HINT_ENUM, renderer_hints), default_renderer);\nGLOBAL_DEF_RST_BASIC(\"rendering/renderer/rendering_method.mobile\", default_renderer_mobile);\nGLOBAL_DEF_RST_BASIC(\"rendering/renderer/rendering_method.web\", \"gl_compatibility\"); // This is a bit of a hack until we have WebGPU support.\n</code></pre> \u200b\u4e0b\u9762\u200b\u5c31\u200b\u5230\u200b\u4e86\u200b\u91cd\u8981\u200b\u7684\u200b DisplayServer \u200b\u521b\u5efa\u200b\u3002DisplayServer \u200b\u662f\u4ece\u200b OS \u200b\u5206\u79bb\u51fa\u6765\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\uff0c\u200b\u7528\u4e8e\u200b\u7ba1\u7406\u200b\u6240\u6709\u200b\u4e0e\u200b\u7a97\u4f53\u200b\u76f8\u5173\u200b\u7684\u200b\u529f\u80fd\u200b\u3002\u200b\u81f3\u4e8e\u200b\u5206\u79bb\u200b\u7684\u200b\u539f\u56e0\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7cfb\u7edf\u200b\u53ef\u4ee5\u200b\u6709\u200b\u591a\u4e2a\u200b\u7a97\u4f53\u200b\u3002 <pre><code>// rendering_driver now held in static global String in main and initialized in setup()\nError err;\ndisplay_server = DisplayServer::create(display_driver_idx, rendering_driver, window_mode, window_vsync_mode, window_flags, window_position, window_size, init_screen, err);\nif (err != OK || display_server == nullptr) {\n    // We can't use this display server, try other ones as fallback.\n    // Skip headless (always last registered) because that's not what users\n    // would expect if they didn't request it explicitly.\n    for (int i = 0; i &lt; DisplayServer::get_create_function_count() - 1; i++) {\n        if (i == display_driver_idx) {\n            continue; // Don't try the same twice.\n        }\n        display_server = DisplayServer::create(i, rendering_driver, window_mode, window_vsync_mode, window_flags, window_position, window_size, init_screen, err);\n        if (err == OK &amp;&amp; display_server != nullptr) {\n            break;\n        }\n    }\n}\n</code></pre> DisplayServer\u200b\u7684\u200b\u521b\u5efa\u200b\u662f\u200b\u901a\u8fc7\u200b\u4f20\u5165\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u8c03\u7528\u200b\u5185\u90e8\u200b\u7684\u200bcreate\u200b\u9759\u6001\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b\u3002\u200b\u5f53\u672a\u200b\u521b\u5efa\u200b\u6210\u529f\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u8f6e\u8be2\u200bDisplayerServer\u200b\u5185\u90e8\u200b\u5b58\u50a8\u200b\u7684\u200bcreate function\u3002\u200b\u8fd9\u91cc\u200b\u5176\u5b9e\u200b\u53ef\u4ee5\u200b\u731c\u200b\u5230\u200bDisplayServer\u200b\u5185\u90e8\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5b58\u50a8\u200b\u51fd\u6570\u6307\u9488\u200b\u7684\u200b\u6570\u7ec4\u200b\uff0c\u200b\u81f3\u4e8e\u200b\u51fd\u6570\u6307\u9488\u200b\u662f\u200b\u600e\u4e48\u200b\u6ce8\u518c\u200b\u5230\u200bDisplayeServer\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u987a\u7740\u200b\u4ee3\u7801\u200b\u5f80\u4e0b\u200b\u770b\u200b\u3002\u200b\u5148\u770b\u200b\u4e0b\u200b DisplayServer::create \u200b\u51fd\u6570\u200b\u5185\u90e8\u200b\u662f\u200b\u600e\u4e48\u200b\u5b9e\u73b0\u200b\u7684\u200b\u3002 <pre><code>DisplayServer *DisplayServer::create(int p_index, const String &amp;p_rendering_driver, WindowMode p_mode, VSyncMode p_vsync_mode, uint32_t p_flags, const Vector2i *p_position, const Vector2i &amp;p_resolution, int p_screen, Error &amp;r_error) {\n    ERR_FAIL_INDEX_V(p_index, server_create_count, nullptr);\n    return server_create_functions[p_index].create_function(p_rendering_driver, p_mode, p_vsync_mode, p_flags, p_position, p_resolution, p_screen, r_error);\n}\n</code></pre> \u200b\u5185\u90e8\u200b\u679c\u7136\u200b\u662f\u200b\u5dee\u4e0d\u591a\u200b\u7684\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f46\u662f\u200b\u901a\u8fc7\u200b\u4e0b\u6807\u200b\u5f97\u5230\u200b\u5bf9\u8c61\u200b\u540e\u200b\u53c8\u200b\u53ef\u4ee5\u200b\u8c03\u200b\u5176\u4ed6\u200b\u51fd\u6570\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6570\u7ec4\u200b\u5185\u90e8\u200b\u5b58\u50a8\u200b\u7684\u200b\u5c31\u200b\u4e0d\u662f\u200b\u666e\u901a\u200b\u7684\u200b\u51fd\u6570\u6307\u9488\u200b\u4e86\u200b\u3002 \u200b\u73b0\u5728\u200b\u6709\u200b\u4e24\u6761\u8def\u200b\u53ef\u4ee5\u200b\u53bb\u200b\u8ffd\u8e2a\u200b\u4ee3\u7801\u200b\uff1a - \u200b\u627e\u5230\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\u662f\u200b\u600e\u4e48\u200b\u4fdd\u5b58\u200b\u5230\u200b server_create_functions \u200b\u8fd9\u4e2a\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b - \u200b\u76f4\u63a5\u200b\u65ad\u70b9\u200b\u8fdb\u5165\u200b create_function \u200b\u4e2d\u200b</p> <p>\u200b\u867d\u7136\u200b\u7b2c\u4e8c\u79cd\u200b\u65b9\u5f0f\u200b\u66f4\u52a0\u200b\u76f4\u63a5\u200b\uff0c\u200b\u4f46\u662f\u200b\u600e\u4e48\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\u662f\u200b\u600e\u4e48\u200b\u6ce8\u518c\u200b\u8fd8\u662f\u200b\u4e0d\u200b\u61c2\u200b\uff0c\u200b\u6240\u4ee5\u200b\u9009\u62e9\u200b\u7b2c\u4e00\u79cd\u200b\uff0c\u200b\u627e\u5230\u200b\u6ce8\u518c\u200b\u7684\u200b\u8def\u5f84\u200b\u5728\u200b\u54ea\u91cc\u200b\u3002\u200b\u5148\u200b\u627e\u5230\u200b server_create_functions \u200b\u662f\u200b\u600e\u4e48\u200b\u5b9a\u4e49\u200b\u7684\u200b <pre><code>    typedef DisplayServer *(*CreateFunction)(const String &amp;, WindowMode, VSyncMode, uint32_t, const Point2i *, const Size2i &amp;, int p_screen, Error &amp;r_error);\n    typedef Vector&lt;String&gt; (*GetRenderingDriversFunction)();\n    enum {\n        MAX_SERVERS = 64\n    };\n\n    struct DisplayServerCreate {\n        const char *name;\n        CreateFunction create_function;\n        GetRenderingDriversFunction get_rendering_drivers_function;\n    };\n\n    static DisplayServerCreate server_create_functions[MAX_SERVERS];\n</code></pre> DisplayServerCreate \u200b\u5bf9\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u6307\u9488\u200b\u7684\u200b\u5c01\u88c5\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u771f\u6b63\u200b\u7684\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u662f\u200b\u83b7\u53d6\u200b\u5b57\u7b26\u4e32\u200b\u6570\u7ec4\u200b\u7684\u200b\u65e0\u53c2\u200b\u51fd\u6570\u6307\u9488\u200b\u3002 \u200b\u901a\u8fc7\u200b\u65ad\u70b9\u200b\u5b9a\u4f4d\u200b\u6ce8\u518c\u200b\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u5806\u6808\u200b\u4fe1\u606f\u200b\u3002\u200b\u53d1\u73b0\u200b\u8c03\u7528\u200b\u7684\u200b\u5165\u53e3\u200b\u5728\u200bOS_Windows\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b <pre><code>OS_Windows::OS_Windows(HINSTANCE _hInstance) {\n    hInstance = _hInstance;\n\n    CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);\n\n#ifdef WASAPI_ENABLED\n    AudioDriverManager::add_driver(&amp;driver_wasapi);\n#endif\n#ifdef XAUDIO2_ENABLED\n    AudioDriverManager::add_driver(&amp;driver_xaudio2);\n#endif\n\n    DisplayServerWindows::register_windows_driver();\n    .\n    .\n    .\n}\n</code></pre> DisplayServerWindows \u200b\u662f\u200b DisplayServer \u200b\u7684\u200b\u5b50\u7c7b\u200b\uff0cregister_windows_driver \u200b\u662f\u200b\u9759\u6001\u200b\u51fd\u6570\u200b\uff0c\u200b\u8c03\u7528\u200b\u7236\u7c7b\u200b\u7684\u200b\u9759\u6001\u200b\u51fd\u6570\u200b register_windows_driver \u200b\u5c06\u200bDisplayServerWindows \u200b\u7684\u200b\u6210\u5458\u200b\u51fd\u6570\u200b \u200b\u4ee5\u200b\u51fd\u6570\u6307\u9488\u200b\u7684\u200b\u5f62\u5f0f\u200b\u8fdb\u884c\u200b\u4f20\u9012\u200b\u3002server_create_count - 1 \u200b\u7684\u200b\u8d4b\u503c\u200b\u64cd\u4f5c\u200b \u200b\u662f\u200b\u4e3a\u4e86\u200b\u4fdd\u8bc1\u200b \u200b\u9884\u5148\u200b\u521b\u5efa\u200b headless \u200b\u7a97\u4f53\u200b\u53c2\u6570\u200b\u603b\u662f\u200b\u5904\u5728\u200b\u6700\u540e\u200b\u3002 <pre><code>DisplayServer *DisplayServerWindows::create_func(const String &amp;p_rendering_driver, WindowMode p_mode, VSyncMode p_vsync_mode, uint32_t p_flags, const Vector2i *p_position, const Vector2i &amp;p_resolution, int p_screen, Error &amp;r_error) {\n    DisplayServer *ds = memnew(DisplayServerWindows(p_rendering_driver, p_mode, p_vsync_mode, p_flags, p_position, p_resolution, p_screen, r_error));\n    if (r_error != OK) {\n        if (p_rendering_driver == \"vulkan\") {\n            String executable_name = OS::get_singleton()-&gt;get_executable_path().get_file();\n            OS::get_singleton()-&gt;alert(\n                    vformat(\"Your video card drivers seem not to support the required Vulkan version.\\n\\n\"\n                            \"If possible, consider updating your video card drivers or using the OpenGL 3 driver.\\n\\n\"\n                            \"You can enable the OpenGL 3 driver by starting the engine from the\\n\"\n                            \"command line with the command:\\n\\n    \\\"%s\\\" --rendering-driver opengl3\\n\\n\"\n                            \"If you have recently updated your video card drivers, try rebooting.\",\n                            executable_name),\n                    \"Unable to initialize Vulkan video driver\");\n        } else {\n            OS::get_singleton()-&gt;alert(\n                    \"Your video card drivers seem not to support the required OpenGL 3.3 version.\\n\\n\"\n                    \"If possible, consider updating your video card drivers.\\n\\n\"\n                    \"If you have recently updated your video card drivers, try rebooting.\",\n                    \"Unable to initialize OpenGL video driver\");\n        }\n    }\n    return ds;\n}\n\nVector&lt;String&gt; DisplayServerWindows::get_rendering_drivers_func() {\n    Vector&lt;String&gt; drivers;\n\n#ifdef VULKAN_ENABLED\n    drivers.push_back(\"vulkan\");\n#endif\n#ifdef GLES3_ENABLED\n    drivers.push_back(\"opengl3\");\n    drivers.push_back(\"opengl3_angle\");\n#endif\n\n    return drivers;\n}\n\nvoid DisplayServerWindows::register_windows_driver() {\n    register_create_function(\"windows\", create_func, get_rendering_drivers_func);\n}\nvoid DisplayServer::register_create_function(const char *p_name, CreateFunction p_function, GetRenderingDriversFunction p_get_drivers) {\n    ERR_FAIL_COND(server_create_count == MAX_SERVERS);\n    // Headless display server is always last\n    server_create_functions[server_create_count] = server_create_functions[server_create_count - 1];\n    server_create_functions[server_create_count - 1].name = p_name;\n    server_create_functions[server_create_count - 1].create_function = p_function;\n    server_create_functions[server_create_count - 1].get_rendering_drivers_function = p_get_drivers;\n    server_create_count++;\n}\n</code></pre></p> <p>\u200b\u5df2\u7ecf\u200b\u627e\u5230\u200b DisplayServer \u200b\u4e2d\u200b\u7684\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\u662f\u200b\u5982\u4f55\u200b\u6ce8\u518c\u200b\u7684\u200b\uff0c\u200b\u603b\u4f53\u200b\u4e0a\u200b\u5c31\u662f\u200b\u5b50\u7c7b\u200b DisplayServerWindows \u200b\u901a\u8fc7\u200b\u9759\u6001\u200b\u51fd\u6570\u200b \u200b\u5411\u200b\u7236\u7c7b\u200b DisplayServer \u200b\u6ce8\u518c\u200b\u81ea\u5df1\u200b\u7684\u200b\u521b\u5efa\u200b\u51fd\u6570\u200b\uff0c\u200b\u7a0b\u5e8f\u200b\u5411\u4e0b\u200b\u6267\u884c\u200b\u5c31\u200b\u5230\u200b\u4e86\u200b DisplayServerWindows::create_func \u200b\u51fd\u6570\u200b\u4e2d\u200b\u4e86\u200b\u3002\u200b\u51fd\u6570\u200b\u521b\u5efa\u200b\u4e86\u200b DisplayServerWindows \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u60f3\u200b\u4e86\u89e3\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u7684\u200b\u5177\u4f53\u200b\u529f\u80fd\u200b\u53ef\u4ee5\u200b\u53bb\u200b\u770b\u200b\u5185\u90e8\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u91cc\u9762\u200b\u6d89\u53ca\u200b\u5230\u200b\u56fe\u5f62\u200b\u7684\u200b\u5185\u5bb9\u200b\u662f\u200b\u521b\u5efa\u200b\u4e86\u200b VulkanContextWindows \u200b\u5b9e\u4f8b\u200b\u3002 <pre><code>DisplayServerWindows::DisplayServerWindows(const String &amp;p_rendering_driver, WindowMode p_mode, VSyncMode p_vsync_mode, uint32_t p_flags, const Vector2i *p_position, const Vector2i &amp;p_resolution, int p_screen, Error &amp;r_error) {\n    .\n    .\n#if defined(VULKAN_ENABLED)\n    if (rendering_driver == \"vulkan\") {\n        context_vulkan = memnew(VulkanContextWindows);\n        if (context_vulkan-&gt;initialize() != OK) {\n            memdelete(context_vulkan);\n            context_vulkan = nullptr;\n            r_error = ERR_UNAVAILABLE;\n            return;\n        }\n    }\n#endif\n    .\n    .\n}\n</code></pre></p> <p>\u200b\u7ecf\u8fc7\u200b\u4e86\u200b\u5f2f\u5f2f\u7ed5\u200b\u7ed5\u200b\uff0c\u200b\u7ec8\u4e8e\u200b\u5feb\u200b\u89e6\u53ca\u200b\u5230\u200b vulkan \u200b\u771f\u6b63\u200b\u7684\u200b\u5185\u5bb9\u200b\u4e86\u200b\uff0cGodot\u200b\u5728\u200b\u542f\u52a8\u200b\u671f\u95f4\u200b\u5404\u79cd\u200b\u914d\u7f6e\u200b\u3001\u200b\u6ce8\u518c\u200b\u3001\u200b\u6821\u9a8c\u200b\u3002\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u6211\u200b\u53ea\u200b\u4fdd\u7559\u200b\u4e86\u200bGodot\u200b\u4e2d\u200b\u6700\u200b\u6838\u5fc3\u200b\u7684\u200b\u90e8\u5206\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u6837\u200b\u624d\u200b\u53ef\u4ee5\u200b\u6293\u4f4f\u200b\u6700\u200b\u4e3b\u8981\u200b\u7684\u200b\u903b\u8f91\u200b\u94fe\u8def\u200b\u3002\u200b\u6211\u200b\u60f3\u200b\u628a\u200b\u6d89\u53ca\u200b Vulkan \u200b\u7684\u200b\u5185\u5bb9\u200b\u6574\u5408\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u6240\u4ee5\u200b vulkan \u200b\u7684\u200b\u521d\u59cb\u5316\u200b \u200b\u4ee5\u53ca\u200b win32 surface \u200b\u7684\u200b\u4f20\u9012\u200b \u200b\u6211\u4f1a\u200b\u5199\u200b\u5728\u200b\u4e0b\u200b\u4e00\u7ae0\u200b\u3002</p>"},{"location":"Godot-Source/02vulkan_init/","title":"Godot\u200b\u6e32\u67d3\u200b\u6d41\u7a0b","text":""},{"location":"Godot-Source/02vulkan_init/#12-vulkan","title":"1.2 vulkan \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5316","text":"<p>\u200b\u5728\u200b DisplayServerWindows \u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b VulkanContextWindows \u200b\u88ab\u200b\u521b\u5efa\u200b\uff0c\u200b\u7136\u540e\u200b\u8c03\u7528\u200b initialize \u200b\u51fd\u6570\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\u3002 <pre><code>#if defined(VULKAN_ENABLED)\n    if (rendering_driver == \"vulkan\") {\n        context_vulkan = memnew(VulkanContextWindows);\n        if (context_vulkan-&gt;initialize() != OK) {\n            memdelete(context_vulkan);\n            context_vulkan = nullptr;\n            r_error = ERR_UNAVAILABLE;\n            return;\n        }\n    }\n#endif\n</code></pre> \u200b\u4e00\u6b65\u200b\u4e00\u6b65\u200b\u6765\u200b\uff0c\u200b\u5148\u770b\u200b VulkanContextWindows \u200b\u662f\u200b\u600e\u4e48\u200b\u5b9a\u4e49\u200b\u7684\u200b\uff1a <pre><code>class VulkanContextWindows : public VulkanContext {\n    virtual const char *_get_platform_surface_extension() const;\n\npublic:\n    Error window_create(DisplayServer::WindowID p_window_id, DisplayServer::VSyncMode p_vsync_mode, HWND p_window, HINSTANCE p_instance, int p_width, int p_height);\n\n    VulkanContextWindows();\n    ~VulkanContextWindows();\n};\n</code></pre> VulkanContextWindows \u200b\u662f\u200b VulkanContext \u200b\u7684\u200b\u5b50\u7c7b\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u770b\u51fa\u200b\u5927\u90e8\u5206\u200b\u7684\u200b\u529f\u80fd\u200b\u662f\u200b\u6709\u200b\u7236\u7c7b\u200b\u5b9e\u73b0\u200b\u3002\u200b\u76f4\u63a5\u200b\u9605\u8bfb\u200bVulkanContext \u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4ee3\u7801\u200b\u3001 <pre><code>VulkanContext::VulkanContext() {\n    command_buffer_queue.resize(1); // First one is always the setup command.\n    command_buffer_queue.write[0] = nullptr;\n}\n</code></pre> VulkanContext \u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b \u200b\u5c06\u200b \u200b\u547d\u4ee4\u200b\u7f13\u51b2\u200b\u961f\u5217\u200b\u5927\u5c0f\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b1\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u547d\u4ee4\u200b\u603b\u662f\u200b\u8bbe\u7f6e\u200b\u547d\u4ee4\u200b\u3002VulkanContext \u200b\u770b\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u5b83\u200b\u5176\u5b9e\u200b\u662f\u200b\u6574\u5408\u200b\u4e86\u200b VkInstance\u3001VKPhyscalDevice\u3001VkDevice\u3001VkQueue\u200b\u7b49\u200b\uff0c\u200b\u57fa\u672c\u4e0a\u200b\u5b8c\u6210\u200b\u4e86\u200b\u5927\u90e8\u5206\u200bvulkan\u200b\u8bbe\u5907\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u3002\u200b\u91cc\u9762\u200b\u7ec6\u8282\u200b\u611f\u5174\u8da3\u200b\u53ef\u4ee5\u200b\u81ea\u884c\u200b\u9605\u8bfb\u200b\u4ee3\u7801\u200b\u3002\u200b\u7a0b\u5e8f\u200b\u4e0b\u200b\u4e00\u6b65\u200b\u6267\u884c\u200b\u8c03\u7528\u200b\u4e86\u200b initialize \u200b\u51fd\u6570\u200b\u3002 <pre><code>Error VulkanContext::initialize() {\n#ifdef USE_VOLK\n    if (volkInitialize() != VK_SUCCESS) {\n        return FAILED;\n    }\n#endif\n\n    Error err = _create_instance();\n    if (err != OK) {\n        return err;\n    }\n\n    return OK;\n}\n</code></pre> \u200b\u4f7f\u7528\u200b volk \u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b \u200b\u83b7\u53d6\u200b Vulkan \u200b\u7684\u200b\u51fd\u6570\u200b\uff0c \u200b\u518d\u200b\u901a\u8fc7\u200b _create_instance \u200b\u51fd\u6570\u200b\u521b\u5efa\u200b VkInstance, \u200b\u51fd\u6570\u200b\u524d\u9762\u200b\u52a0\u200b\u4e0b\u5212\u7ebf\u200b\u4f30\u8ba1\u200b\u662f\u200b\u4e3a\u4e86\u200b\u533a\u5206\u200b\u662f\u5426\u662f\u200b\u7528\u4e8e\u200b\u5e95\u5c42\u200b\u7684\u200b\u5185\u90e8\u200bAPI\uff0c\u200b\u8ddf\u200b Ogre3D \u200b\u7c7b\u4f3c\u200b\u3002 <pre><code>Error VulkanContext::_create_instance() {\n    // Obtain Vulkan version.\n    _obtain_vulkan_version(); // \u200b\u83b7\u53d6\u200b vulkan \u200b\u7248\u672c\u200b \u200b\u9ed8\u8ba4\u200b\u7248\u672c\u200b\u4e3a\u200b 1.0\n\n    // Initialize extensions.\n    {\n        Error err = _initialize_instance_extensions(); // \u200b\u8fd9\u4e2a\u200b\u4f1a\u200b vulkan \u200b\u7684\u200b\u5f88\u200b\u597d\u200b\u7406\u89e3\u200b\uff0c\u200b\u5c31\u662f\u200b\u67e5\u8be2\u200b instance \u200b\u7684\u200b\u6269\u5c55\u200b\u662f\u5426\u200b\u90fd\u200b\u88ab\u200b\u6ee1\u8db3\u200b\n        if (err != OK) {\n            return err;\n        }\n    }\n    // \u200b\u83b7\u53d6\u200b\u53ef\u200b\u652f\u6301\u200b\u7684\u200b\u6269\u5c55\u200b\n    int enabled_extension_count = 0;\n    const char *enabled_extension_names[MAX_EXTENSIONS];\n    ERR_FAIL_COND_V(enabled_instance_extension_names.size() &gt; MAX_EXTENSIONS, ERR_CANT_CREATE);\n    for (const CharString &amp;extension_name : enabled_instance_extension_names) {\n        enabled_extension_names[enabled_extension_count++] = extension_name.ptr();\n    }\n\n    // We'll set application version to the Vulkan version we're developing against, even if our instance is based on\n    // an older Vulkan version, devices can still support newer versions of Vulkan.\n    // The exception is when we're on Vulkan 1.0, we should not set this to anything but 1.0.\n    // Note that this value is only used by validation layers to warn us about version issues.\n    uint32_t application_api_version = instance_api_version == VK_API_VERSION_1_0 ? VK_API_VERSION_1_0 : VK_API_VERSION_1_2;\n\n    CharString cs = GLOBAL_GET(\"application/config/name\").operator String().utf8();\n    const VkApplicationInfo app = {\n        /*sType*/ VK_STRUCTURE_TYPE_APPLICATION_INFO,\n        /*pNext*/ nullptr,\n        /*pApplicationName*/ cs.get_data(),\n        /*applicationVersion*/ 0, // It would be really nice if we store a version number in project settings, say \"application/config/version\"\n        /*pEngineName*/ VERSION_NAME,\n        /*engineVersion*/ VK_MAKE_VERSION(VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH),\n        /*apiVersion*/ application_api_version\n    };\n    VkInstanceCreateInfo inst_info{};\n    inst_info.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;\n    inst_info.pApplicationInfo = &amp;app;\n    inst_info.enabledExtensionCount = enabled_extension_count;\n    inst_info.ppEnabledExtensionNames = (const char *const *)enabled_extension_names;\n    if (_use_validation_layers()) { // \u200b\u83b7\u53d6\u200b validation layers\n        _get_preferred_validation_layers(&amp;inst_info.enabledLayerCount, &amp;inst_info.ppEnabledLayerNames);\n    }\n\n    /*\n     * This is info for a temp callback to use during CreateInstance.\n     * After the instance is created, we use the instance-based\n     * function to register the final callback.\n     */\n    VkDebugUtilsMessengerCreateInfoEXT dbg_messenger_create_info = {};\n    VkDebugReportCallbackCreateInfoEXT dbg_report_callback_create_info = {};\n    if (is_instance_extension_enabled(VK_EXT_DEBUG_UTILS_EXTENSION_NAME)) {\n        // VK_EXT_debug_utils style.\n        dbg_messenger_create_info.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;\n        dbg_messenger_create_info.pNext = nullptr;\n        dbg_messenger_create_info.flags = 0;\n        dbg_messenger_create_info.messageSeverity =\n                VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;\n        dbg_messenger_create_info.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT |\n                VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT |\n                VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;\n        dbg_messenger_create_info.pfnUserCallback = _debug_messenger_callback;\n        dbg_messenger_create_info.pUserData = this;\n        inst_info.pNext = &amp;dbg_messenger_create_info;\n    } else if (is_instance_extension_enabled(VK_EXT_DEBUG_REPORT_EXTENSION_NAME)) {\n        dbg_report_callback_create_info.sType = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;\n        dbg_report_callback_create_info.flags = VK_DEBUG_REPORT_INFORMATION_BIT_EXT |\n                VK_DEBUG_REPORT_WARNING_BIT_EXT |\n                VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT |\n                VK_DEBUG_REPORT_ERROR_BIT_EXT |\n                VK_DEBUG_REPORT_DEBUG_BIT_EXT;\n        dbg_report_callback_create_info.pfnCallback = _debug_report_callback;\n        dbg_report_callback_create_info.pUserData = this;\n        inst_info.pNext = &amp;dbg_report_callback_create_info;\n    }\n\n    VkResult err;\n\n    if (vulkan_hooks) { // \u200b\u8fd9\u91cc\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b \u200b\u83b7\u53d6\u200b vulkan \u200b\u5b9e\u4f8b\u200b\u7684\u200b\u94a9\u5b50\u200b \n        if (!vulkan_hooks-&gt;create_vulkan_instance(&amp;inst_info, &amp;inst)) {\n            return ERR_CANT_CREATE;\n        }\n    } else {\n        err = vkCreateInstance(&amp;inst_info, nullptr, &amp;inst);\n        ERR_FAIL_COND_V_MSG(err == VK_ERROR_INCOMPATIBLE_DRIVER, ERR_CANT_CREATE,\n                \"Cannot find a compatible Vulkan installable client driver (ICD).\\n\\n\"\n                \"vkCreateInstance Failure\");\n        ERR_FAIL_COND_V_MSG(err == VK_ERROR_EXTENSION_NOT_PRESENT, ERR_CANT_CREATE,\n                \"Cannot find a specified extension library.\\n\"\n                \"Make sure your layers path is set appropriately.\\n\"\n                \"vkCreateInstance Failure\");\n        ERR_FAIL_COND_V_MSG(err, ERR_CANT_CREATE,\n                \"vkCreateInstance failed.\\n\\n\"\n                \"Do you have a compatible Vulkan installable client driver (ICD) installed?\\n\"\n                \"Please look at the Getting Started guide for additional information.\\n\"\n                \"vkCreateInstance Failure\");\n    }\n\n    inst_initialized = true;  // \u200b\u8bbe\u7f6e\u200b vkinstance \u200b\u5b9e\u4f8b\u200b\u5316\u200b\u6210\u529f\u200b\u7684\u200b\u6807\u5fd7\u200b\n\n#ifdef USE_VOLK\n    volkLoadInstance(inst); // \u200b\u52a0\u8f7d\u200b volk\n#endif\n\n    if (is_instance_extension_enabled(VK_EXT_DEBUG_UTILS_EXTENSION_NAME)) { // \u200b\u83b7\u53d6\u200b\u8c03\u8bd5\u200b\u51fd\u6570\u200b\u7684\u200b\u51fd\u6570\u6307\u9488\u200b\n        // Setup VK_EXT_debug_utils function pointers always (we use them for debug labels and names).\n        CreateDebugUtilsMessengerEXT =\n                (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(inst, \"vkCreateDebugUtilsMessengerEXT\");\n        DestroyDebugUtilsMessengerEXT =\n                (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(inst, \"vkDestroyDebugUtilsMessengerEXT\");\n        SubmitDebugUtilsMessageEXT =\n                (PFN_vkSubmitDebugUtilsMessageEXT)vkGetInstanceProcAddr(inst, \"vkSubmitDebugUtilsMessageEXT\");\n        CmdBeginDebugUtilsLabelEXT =\n                (PFN_vkCmdBeginDebugUtilsLabelEXT)vkGetInstanceProcAddr(inst, \"vkCmdBeginDebugUtilsLabelEXT\");\n        CmdEndDebugUtilsLabelEXT =\n                (PFN_vkCmdEndDebugUtilsLabelEXT)vkGetInstanceProcAddr(inst, \"vkCmdEndDebugUtilsLabelEXT\");\n        CmdInsertDebugUtilsLabelEXT =\n                (PFN_vkCmdInsertDebugUtilsLabelEXT)vkGetInstanceProcAddr(inst, \"vkCmdInsertDebugUtilsLabelEXT\");\n        SetDebugUtilsObjectNameEXT =\n                (PFN_vkSetDebugUtilsObjectNameEXT)vkGetInstanceProcAddr(inst, \"vkSetDebugUtilsObjectNameEXT\");\n        if (nullptr == CreateDebugUtilsMessengerEXT || nullptr == DestroyDebugUtilsMessengerEXT ||\n                nullptr == SubmitDebugUtilsMessageEXT || nullptr == CmdBeginDebugUtilsLabelEXT ||\n                nullptr == CmdEndDebugUtilsLabelEXT || nullptr == CmdInsertDebugUtilsLabelEXT ||\n                nullptr == SetDebugUtilsObjectNameEXT) {\n            ERR_FAIL_V_MSG(ERR_CANT_CREATE,\n                    \"GetProcAddr: Failed to init VK_EXT_debug_utils\\n\"\n                    \"GetProcAddr: Failure\");\n        }\n\n        err = CreateDebugUtilsMessengerEXT(inst, &amp;dbg_messenger_create_info, nullptr, &amp;dbg_messenger);\n        switch (err) {\n            case VK_SUCCESS:\n                break;\n            case VK_ERROR_OUT_OF_HOST_MEMORY:\n                ERR_FAIL_V_MSG(ERR_CANT_CREATE,\n                        \"CreateDebugUtilsMessengerEXT: out of host memory\\n\"\n                        \"CreateDebugUtilsMessengerEXT Failure\");\n                break;\n            default:\n                ERR_FAIL_V_MSG(ERR_CANT_CREATE,\n                        \"CreateDebugUtilsMessengerEXT: unknown failure\\n\"\n                        \"CreateDebugUtilsMessengerEXT Failure\");\n                ERR_FAIL_V(ERR_CANT_CREATE);\n                break;\n        }\n    } else if (is_instance_extension_enabled(VK_EXT_DEBUG_REPORT_EXTENSION_NAME)) {\n        CreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT)vkGetInstanceProcAddr(inst, \"vkCreateDebugReportCallbackEXT\");\n        DebugReportMessageEXT = (PFN_vkDebugReportMessageEXT)vkGetInstanceProcAddr(inst, \"vkDebugReportMessageEXT\");\n        DestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT)vkGetInstanceProcAddr(inst, \"vkDestroyDebugReportCallbackEXT\");\n\n        if (nullptr == CreateDebugReportCallbackEXT || nullptr == DebugReportMessageEXT || nullptr == DestroyDebugReportCallbackEXT) {\n            ERR_FAIL_V_MSG(ERR_CANT_CREATE,\n                    \"GetProcAddr: Failed to init VK_EXT_debug_report\\n\"\n                    \"GetProcAddr: Failure\");\n        }\n\n        err = CreateDebugReportCallbackEXT(inst, &amp;dbg_report_callback_create_info, nullptr, &amp;dbg_debug_report);\n        switch (err) {\n            case VK_SUCCESS:\n                break;\n            case VK_ERROR_OUT_OF_HOST_MEMORY:\n                ERR_FAIL_V_MSG(ERR_CANT_CREATE,\n                        \"CreateDebugReportCallbackEXT: out of host memory\\n\"\n                        \"CreateDebugReportCallbackEXT Failure\");\n                break;\n            default:\n                ERR_FAIL_V_MSG(ERR_CANT_CREATE,\n                        \"CreateDebugReportCallbackEXT: unknown failure\\n\"\n                        \"CreateDebugReportCallbackEXT Failure\");\n                ERR_FAIL_V(ERR_CANT_CREATE);\n                break;\n        }\n    }\n\n    return OK;\n}\n</code></pre> \u200b\u5982\u679c\u200b\u6709\u200b vulkan \u200b\u57fa\u7840\u200b\uff0c create_instance \u200b\u51fd\u6570\u200b\u5e94\u8be5\u200b\u90fd\u200b\u80fd\u770b\u61c2\u200b\uff0c\u200b\u5168\u662f\u200b\u914d\u7f6e\u200b vulkan\uff0c\u200b\u76f8\u4fe1\u200b\u5728\u200b\u5199\u200b vulkan demo \u200b\u7684\u200b\u65f6\u5019\u200b\u4e5f\u200b\u5199\u200b\u4e86\u200b\u4e0d\u5c11\u200b\u4e86\u200b\u3002\u200b\u4e0a\u9762\u200b\u4ee3\u7801\u6267\u884c\u200b\u5b8c\u200b\u4e86\u200b\u4ee5\u540e\u200b\u53c8\u200b\u56de\u5230\u200b\u4e86\u200b DisplayServerWindows \u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\u7ee7\u7eed\u6267\u884c\u200b\u3002 \u200b\u6267\u884c\u200b DisplayServerWindows::_create_window \u200b\u51fd\u6570\u200b\uff0c\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u4e2d\u6709\u200b\u4e00\u6bb5\u200b vulkan \u200b\u4ee3\u7801\u200b\u3002 <pre><code>#ifdef VULKAN_ENABLED\n        if (context_vulkan) {\n            if (context_vulkan-&gt;window_create(id, p_vsync_mode, wd.hWnd, hInstance, WindowRect.right - WindowRect.left, WindowRect.bottom - WindowRect.top) != OK) {\n                memdelete(context_vulkan);\n                context_vulkan = nullptr;\n                windows.erase(id);\n                ERR_FAIL_V_MSG(INVALID_WINDOW_ID, \"Failed to create Vulkan Window.\");\n            }\n            wd.context_created = true;\n        }\n#endif\n\nError VulkanContextWindows::window_create(DisplayServer::WindowID p_window_id, DisplayServer::VSyncMode p_vsync_mode, HWND p_window, HINSTANCE p_instance, int p_width, int p_height) {\n    VkWin32SurfaceCreateInfoKHR createInfo;\n    createInfo.sType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;\n    createInfo.pNext = nullptr;\n    createInfo.flags = 0;\n    createInfo.hinstance = p_instance;\n    createInfo.hwnd = p_window;\n    VkSurfaceKHR surface;\n    VkResult err = vkCreateWin32SurfaceKHR(get_instance(), &amp;createInfo, nullptr, &amp;surface);\n    ERR_FAIL_COND_V(err, ERR_CANT_CREATE);\n    return _window_create(p_window_id, p_vsync_mode, surface, p_width, p_height);\n}\n</code></pre> \u200b\u901a\u8fc7\u200b context_vulkan \u200b\u5bf9\u8c61\u200b\u8c03\u7528\u200b window_create \u200b\u51fd\u6570\u200b\uff0c\u200b\u5b9e\u53c2\u200b\u6709\u200b\u7a97\u4f53\u200b\u7684\u200b id\uff0c\u200b\u5782\u76f4\u200b\u540c\u6b65\u200b\u6a21\u5f0f\u200b\uff0cwindows \u200b\u7a97\u4f53\u200b\u76f8\u5173\u200b\u7684\u200b\u53e5\u67c4\u200b\uff0c\u200b\u7a97\u53e3\u200b\u7684\u200b\u5bbd\u200b\u9ad8\u200b\uff0c\u200b\u5982\u679c\u200b\u6ca1\u200b\u521b\u5efa\u200b\u6210\u529f\u200b\u5c31\u200b\u5220\u9664\u200b id \u200b\u548c\u200b context vulkan\uff0c\u200b\u6bd4\u8f83\u200b\u5e38\u89c1\u200b\u7684\u200b\u5931\u8d25\u200b\u5904\u7406\u200b\u65b9\u5f0f\u200b\u3002</p> <p>context_vulkan \u200b\u662f\u200b VulkanContextWindows \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u8c03\u7528\u200b\u7684\u200b\u662f\u200b\u81ea\u8eab\u200b\u7684\u200b window_create \u200b\u51fd\u6570\u200b\u3002 \u200b\u5728\u200b\u51fd\u6570\u200b\u4e2d\u200b \u200b\u521b\u5efa\u200b\u4e86\u200b vulkan \u200b\u5fc5\u8981\u200b\u7684\u200b win32surface\uff0c\u200b\u8fd9\u4e2a\u200b\u662f\u200b\u521b\u5efa\u200b\u4ea4\u6362\u200b\u94fe\u200b\u7684\u200b\u5fc5\u8981\u200b\u6570\u636e\u200b\u3002\u200b\u968f\u540e\u200b\u5728\u200b \u200b\u8fd4\u56de\u200b\u8bed\u53e5\u200b\u4e2d\u200b\u8c03\u7528\u200b\u4e86\u200b \u200b\u7236\u7c7b\u200b\u7684\u200b _window_create \u200b\u5185\u90e8\u200b\u51fd\u6570\u200b\u3002 <pre><code>Error VulkanContext::_window_create(DisplayServer::WindowID p_window_id, DisplayServer::VSyncMode p_vsync_mode, VkSurfaceKHR p_surface, int p_width, int p_height) {\n    ERR_FAIL_COND_V(windows.has(p_window_id), ERR_INVALID_PARAMETER);\n\n    if (!device_initialized) {\n        Error err = _create_physical_device(p_surface); // \u200b\u521b\u5efa\u200b \u200b\u7269\u7406\u200b\u8bbe\u5907\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u8ddf\u200b GPU \u200b\u662f\u200b\u4e00\u4e00\u5bf9\u5e94\u200b\u7684\u200b\u5173\u7cfb\u200b\uff0c\u200b\u6709\u200b\u591a\u5c11\u200b\u5f20\u200b\u663e\u5361\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u76f8\u5e94\u200b\u6570\u91cf\u200b\u7684\u200b\u7269\u7406\u200b\u8bbe\u5907\u200b\n        ERR_FAIL_COND_V(err != OK, ERR_CANT_CREATE);\n    }\n\n    if (!queues_initialized) {\n        // We use a single GPU, but we need a surface to initialize the\n        // queues, so this process must be deferred until a surface\n        // is created.\n        Error err = _initialize_queues(p_surface); // \u200b\u521b\u5efa\u200b\u903b\u8f91\u8bbe\u5907\u200b\uff0c\u200b\u83b7\u53d6\u200b\u961f\u5217\u200b\uff0c\u200b\u5982\u679c\u200b\u6709\u4e2a\u200b\u961f\u5217\u200b\u53ca\u200b\u652f\u6301\u200b graphics \u200b\u53c8\u200b\u652f\u6301\u200b present\uff0c\u200b\u90a3\u4e48\u200b\u5b83\u200b\u5c06\u200b\u4f18\u5148\u200b\u88ab\u200b\u9009\u4e2d\u200b \n        ERR_FAIL_COND_V(err != OK, ERR_CANT_CREATE);\n    }\n\n    Window window;\n    window.surface = p_surface;\n    window.width = p_width;\n    window.height = p_height;\n    window.vsync_mode = p_vsync_mode;\n    Error err = _update_swap_chain(&amp;window); // \u200b\u66f4\u65b0\u200b\u4ea4\u6362\u200b\u94fe\u200b\n    ERR_FAIL_COND_V(err != OK, ERR_CANT_CREATE);\n\n    windows[p_window_id] = window;\n    return OK;\n}\n</code></pre> \u200b\u5176\u4e2d\u200b _update_swap_chain \u200b\u521b\u5efa\u200b\u4e86\u200b swapchain, renderPass\u3002\u200b\u518d\u200b\u901a\u8fc7\u200b renderPass \u200b\u548c\u200b imageview \u200b\u521b\u5efa\u200b frameBuffer\uff0c\u200b\u8fd8\u662f\u200b vulkan \u200b\u7684\u200b\u9ed8\u8ba4\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u53ea\u4e0d\u8fc7\u200b\u8fd9\u91cc\u200b\u7528\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u4e34\u65f6\u200b\u7684\u200b rende pass\u3002 <pre><code>#if defined(VULKAN_ENABLED)\n\n    if (rendering_driver == \"vulkan\") {\n        rendering_device_vulkan = memnew(RenderingDeviceVulkan);\n        rendering_device_vulkan-&gt;initialize(context_vulkan);\n\n        RendererCompositorRD::make_current();\n    }\n#endif\n</code></pre> \u200b\u6211\u200b\u89c9\u5f97\u200b\u8fd9\u90e8\u5206\u200b\u4e3b\u8981\u200b\u662f\u200b\u5728\u200b\u521d\u59cb\u5316\u200b vulkan,\u200b\u4f46\u662f\u200b\u771f\u6b63\u200b\u7684\u200b\u6e32\u67d3\u200b\u64cd\u4f5c\u200b\u5374\u200b\u8fd8\u200b\u6ca1\u200b\u6267\u884c\u200b\u3002</p>"},{"location":"Godot-Source/03render_device_vulkan/","title":"Godot\u200b\u6e32\u67d3\u200b\u6d41\u7a0b","text":""},{"location":"Godot-Source/03render_device_vulkan/#13-vulkan-render-device","title":"1.3 Vulkan Render Device \u200b\u7684\u200b\u521b\u5efa","text":"<p>RenderingDeviceVulkan \u200b\u7ee7\u627f\u200b\u4e8e\u200b RenderingDevice\uff0c\u200b\u800c\u200b RenderDevcice \u200b\u5219\u200b\u62bd\u8c61\u200b\u4e86\u200b\u6e32\u67d3\u200b\u4e86\u200b\u5927\u90e8\u5206\u200b\u7684\u200b\u529f\u80fd\u200b\u3002\u200b\u6211\u200b\u5728\u200b\u7ffb\u8bd1\u200b The future of Render in Godot \u200b\u89c6\u9891\u200b\u7684\u200b\u65f6\u5019\u200b, \u200b\u770b\u5230\u200b\u8d1f\u8d23\u4eba\u200b\u6709\u200b\u4ecb\u7ecd\u200b\u4e0b\u4e00\u4ee3\u200b\u7684\u200b RD \u200b\u6e32\u67d3\u5668\u200b\u5c06\u4f1a\u200b\u6709\u200b\u66f4\u200b\u9ad8\u7ea7\u200b\u522b\u7684\u200b\u62bd\u8c61\u200b\uff0cMetal \u200b\u548c\u200b DX12 \u200b\u90fd\u200b\u4f1a\u200b\u57fa\u4e8e\u200bRD \u200b\u6e32\u67d3\u5668\u200b\u3002\u200b\u4f46\u662f\u200b\u7c97\u7565\u200b\u7684\u200b\u67e5\u770b\u200b\u4ee3\u7801\u200b\u4e4b\u540e\u200b\uff0cRenderingDevice \u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u5176\u5b9e\u200b\u8fd8\u662f\u200b\u6ca1\u6709\u200b\u62bd\u8c61\u200b\u5f97\u200b\u5f88\u200b\u5e72\u51c0\u200b\u3002</p> <p>RenderDevice \u200b\u8d1f\u8d23\u200b\u7684\u200b\u5185\u5bb9\u200b\u5f88\u591a\u200b\uff0c\u200b\u5b83\u200b\u5177\u6709\u200b\u5e95\u5c42\u200b\u6e32\u67d3\u200b\u7684\u200b\u7248\u672c\u4fe1\u606f\u200b\uff0c\u200b\u662f\u200bCPU\uff0c\u200b\u8fd8\u662f\u200bGPU\u3002\u200b\u662f\u200b Vulkan \u200b\u8fd8\u662f\u200b OpenGL. Texture\u3001FrameBuffer\u3001Buffer \u200b\u548c\u200b DrawList\u200b\u7b49\u200b\u7684\u200b\u6784\u5efa\u200b\u3002\u200b\u6211\u200b\u89c9\u5f97\u200b\u8fd8\u662f\u200b\u6709\u200b\u5fc5\u8981\u200b\u8be6\u7ec6\u200b\u7684\u200b\u89e3\u91ca\u200b RenderDevice\u200b\u7684\u200b\u4ee3\u7801\u200b</p>"},{"location":"Godot-Source/03render_device_vulkan/#131-renderdevice","title":"1.3.1 RenderDevice","text":"<p>\u200b\u6211\u200b\u628a\u200b\u5b83\u200b\u5355\u72ec\u200b\u5199\u6210\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u540e\u9762\u200b\u7684\u200b\u5f15\u7528\u200b\uff0c\u200b\u8be6\u7ec6\u200b\u5185\u5bb9\u200b\u53ef\u4ee5\u200b\u70b9\u51fb\u200b\u94fe\u63a5\u200b\u8fdb\u5165\u200b RenderDevice\u200b\u7c7b\u200b\u4ecb\u7ecd\u200b</p>"},{"location":"Godot-Source/03render_device_vulkan/#132-vulkan-render-device","title":"1.3.2 Vulkan Render Device","text":"<p><pre><code>rendering_device_vulkan-&gt;initialize(context_vulkan);\nRendererCompositorRD::make_current();\n</code></pre> \u200b\u5148\u770b\u200b\u4e0b\u200b initialize \u200b\u51fd\u6570\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff1a <pre><code>void RenderingDeviceVulkan::initialize(VulkanContext *p_context, bool p_local_device) {\n    // Get our device capabilities.\n    {\n        device_capabilities.version_major = p_context-&gt;get_vulkan_major();\n        device_capabilities.version_minor = p_context-&gt;get_vulkan_minor();\n    }\n\n    context = p_context;\n    device = p_context-&gt;get_device();\n    if (p_local_device) {\n        frame_count = 1;\n        local_device = p_context-&gt;local_device_create();\n        device = p_context-&gt;local_device_get_vk_device(local_device);\n    } else {\n        frame_count = p_context-&gt;get_swapchain_image_count() + 1; // Always need one extra to ensure it's unused at any time, without having to use a fence for this.\n    }\n    limits = p_context-&gt;get_device_limits();\n    max_timestamp_query_elements = 256;\n\n    { // \u200b\u521b\u5efa\u200b vma \u200b\u5185\u5b58\u200b\u5206\u914d\u5668\u200b\n\n        VmaAllocatorCreateInfo allocatorInfo;\n        memset(&amp;allocatorInfo, 0, sizeof(VmaAllocatorCreateInfo));\n        allocatorInfo.physicalDevice = p_context-&gt;get_physical_device();\n        allocatorInfo.device = device;\n        allocatorInfo.instance = p_context-&gt;get_instance();\n        vmaCreateAllocator(&amp;allocatorInfo, &amp;allocator);\n    }\n    // \u200b\u5e27\u200b\u7f13\u51b2\u200b\u7684\u200b\u7684\u200b\u6570\u91cf\u200b\u6bd4\u200b \u200b\u4ea4\u6362\u200b\u94fe\u200b\u7684\u200b\u56fe\u7247\u200b\u6570\u91cf\u200b\u591a\u200b1\n    frames.resize(frame_count);\n    frame = 0;\n    // \u200b\u4e3a\u200b frame \u200b\u521b\u5efa\u200b setup command buffer\u3001 draw command buffer\u3001query pool\n    for (int i = 0; i &lt; frame_count; i++) {\n        frames[i].index = 0;\n\n        { // Create command pool, one per frame is recommended.\n            VkCommandPoolCreateInfo cmd_pool_info;\n            cmd_pool_info.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;\n            cmd_pool_info.pNext = nullptr;\n            cmd_pool_info.queueFamilyIndex = p_context-&gt;get_graphics_queue_family_index();\n            cmd_pool_info.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;\n\n            VkResult res = vkCreateCommandPool(device, &amp;cmd_pool_info, nullptr, &amp;frames[i].command_pool);\n            ERR_FAIL_COND_MSG(res, \"vkCreateCommandPool failed with error \" + itos(res) + \".\");\n        }\n\n        { // Create command buffers.\n\n            VkCommandBufferAllocateInfo cmdbuf;\n            // No command buffer exists, create it.\n            cmdbuf.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;\n            cmdbuf.pNext = nullptr;\n            cmdbuf.commandPool = frames[i].command_pool;\n            cmdbuf.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;\n            cmdbuf.commandBufferCount = 1;\n            // \u200b\u521b\u5efa\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u547d\u4ee4\u200b\u7f13\u51b2\u533a\u200b\n            VkResult err = vkAllocateCommandBuffers(device, &amp;cmdbuf, &amp;frames[i].setup_command_buffer);\n            ERR_CONTINUE_MSG(err, \"vkAllocateCommandBuffers failed with error \" + itos(err) + \".\");\n            // \u200b\u521b\u5efa\u200b\u7ed8\u5236\u200b\u7684\u200b\u547d\u4ee4\u200b\u7f13\u51b2\u533a\u200b\n            err = vkAllocateCommandBuffers(device, &amp;cmdbuf, &amp;frames[i].draw_command_buffer);\n            ERR_CONTINUE_MSG(err, \"vkAllocateCommandBuffers failed with error \" + itos(err) + \".\");\n        }\n\n        {\n            // Create query pool.\n            VkQueryPoolCreateInfo query_pool_create_info;\n            query_pool_create_info.sType = VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;\n            query_pool_create_info.flags = 0;\n            query_pool_create_info.pNext = nullptr;\n            query_pool_create_info.queryType = VK_QUERY_TYPE_TIMESTAMP;\n            query_pool_create_info.queryCount = max_timestamp_query_elements;\n            query_pool_create_info.pipelineStatistics = 0;\n\n            vkCreateQueryPool(device, &amp;query_pool_create_info, nullptr, &amp;frames[i].timestamp_pool);\n\n            frames[i].timestamp_names.resize(max_timestamp_query_elements);\n            frames[i].timestamp_cpu_values.resize(max_timestamp_query_elements);\n            frames[i].timestamp_count = 0;\n            frames[i].timestamp_result_names.resize(max_timestamp_query_elements);\n            frames[i].timestamp_cpu_result_values.resize(max_timestamp_query_elements);\n            frames[i].timestamp_result_values.resize(max_timestamp_query_elements);\n            frames[i].timestamp_result_count = 0;\n        }\n    }\n\n    {\n        // Begin the first command buffer for the first frame, so\n        // setting up things can be done in the meantime until swap_buffers(), which is called before advance.\n        VkCommandBufferBeginInfo cmdbuf_begin;\n        cmdbuf_begin.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;\n        cmdbuf_begin.pNext = nullptr;\n        cmdbuf_begin.flags = VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;\n        cmdbuf_begin.pInheritanceInfo = nullptr;\n\n        VkResult err = vkBeginCommandBuffer(frames[0].setup_command_buffer, &amp;cmdbuf_begin);\n        ERR_FAIL_COND_MSG(err, \"vkBeginCommandBuffer failed with error \" + itos(err) + \".\");\n\n        err = vkBeginCommandBuffer(frames[0].draw_command_buffer, &amp;cmdbuf_begin);\n        ERR_FAIL_COND_MSG(err, \"vkBeginCommandBuffer failed with error \" + itos(err) + \".\");\n        if (local_device.is_null()) {\n            context-&gt;set_setup_buffer(frames[0].setup_command_buffer); // Append now so it's added before everything else.\n            context-&gt;append_command_buffer(frames[0].draw_command_buffer);\n        }\n    }\n\n    for (int i = 0; i &lt; frame_count; i++) {\n        //Reset all queries in a query pool before doing any operations with them.\n        vkCmdResetQueryPool(frames[0].setup_command_buffer, frames[i].timestamp_pool, 0, max_timestamp_query_elements);\n    }\n    // \u200b\u8bbe\u7f6e\u200b\u6682\u5b58\u200b\u7f13\u51b2\u533a\u200b\u7684\u200b\u5927\u5c0f\u200b\n    staging_buffer_block_size = GLOBAL_GET(\"rendering/rendering_device/staging_buffer/block_size_kb\");\n    staging_buffer_block_size = MAX(4u, staging_buffer_block_size);\n    staging_buffer_block_size *= 1024; // Kb -&gt; bytes.\n    staging_buffer_max_size = GLOBAL_GET(\"rendering/rendering_device/staging_buffer/max_size_mb\");\n    staging_buffer_max_size = MAX(1u, staging_buffer_max_size);\n    staging_buffer_max_size *= 1024 * 1024;\n\n    if (staging_buffer_max_size &lt; staging_buffer_block_size * 4) {\n        // Validate enough blocks.\n        staging_buffer_max_size = staging_buffer_block_size * 4;\n    }\n    texture_upload_region_size_px = GLOBAL_GET(\"rendering/rendering_device/staging_buffer/texture_upload_region_size_px\");\n    texture_upload_region_size_px = nearest_power_of_2_templated(texture_upload_region_size_px);\n\n    frames_drawn = frame_count; // Start from frame count, so everything else is immediately old.\n\n    // Ensure current staging block is valid and at least one per frame exists.\n    staging_buffer_current = 0;\n    staging_buffer_used = false;\n\n    for (int i = 0; i &lt; frame_count; i++) {\n        // Staging was never used, create a block.\n        Error err = _insert_staging_block();\n        ERR_CONTINUE(err != OK);\n    }\n    // \u200b\u6700\u5927\u200b\u63cf\u8ff0\u7b26\u200b\u7684\u200b\u6570\u91cf\u200b\n    max_descriptors_per_pool = GLOBAL_GET(\"rendering/rendering_device/vulkan/max_descriptors_per_pool\");\n\n    // Check to make sure DescriptorPoolKey is good.\n    static_assert(sizeof(uint64_t) * 3 &gt;= UNIFORM_TYPE_MAX * sizeof(uint16_t));\n\n    draw_list = nullptr;\n    draw_list_count = 0;\n    draw_list_split = false;\n\n    compute_list = nullptr;\n\n    // \u200b\u8bbe\u7f6e\u200b\u6e32\u67d3\u200b\u7ba1\u7ebf\u200b\u7684\u200b\u7f13\u5b58\u200b\u8def\u5f84\u200b user://vulkan/pipelines.xxxxx.cache\n    pipelines_cache.file_path = \"user://vulkan/pipelines\";\n    pipelines_cache.file_path += \".\" + context-&gt;get_device_name().validate_filename().replace(\" \", \"_\").to_lower();\n    if (Engine::get_singleton()-&gt;is_editor_hint()) {\n        pipelines_cache.file_path += \".editor\";\n    }\n    pipelines_cache.file_path += \".cache\";\n\n    // Prepare most fields now.\n    VkPhysicalDeviceProperties props;\n    vkGetPhysicalDeviceProperties(context-&gt;get_physical_device(), &amp;props);\n    pipelines_cache.header.magic = 868 + VK_PIPELINE_CACHE_HEADER_VERSION_ONE;\n    pipelines_cache.header.device_id = props.deviceID;\n    pipelines_cache.header.vendor_id = props.vendorID;\n    pipelines_cache.header.driver_version = props.driverVersion;\n    memcpy(pipelines_cache.header.uuid, props.pipelineCacheUUID, VK_UUID_SIZE);\n    pipelines_cache.header.driver_abi = sizeof(void *);\n\n    _load_pipeline_cache();\n    print_verbose(vformat(\"Startup PSO cache (%.1f MiB)\", pipelines_cache.buffer.size() / (1024.0f * 1024.0f)));\n    VkPipelineCacheCreateInfo cache_info = {};\n    cache_info.sType = VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;\n    cache_info.pNext = nullptr;\n    if (context-&gt;get_pipeline_cache_control_support()) {\n        cache_info.flags = VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT;\n    }\n    cache_info.initialDataSize = pipelines_cache.buffer.size();\n    cache_info.pInitialData = pipelines_cache.buffer.ptr();\n    VkResult err = vkCreatePipelineCache(device, &amp;cache_info, nullptr, &amp;pipelines_cache.cache_object);\n\n    if (err != VK_SUCCESS) {\n        WARN_PRINT(\"vkCreatePipelinecache failed with error \" + itos(err) + \".\");\n    }\n}\n</code></pre></p>"},{"location":"Godot-Source/03render_device_vulkan/#14-renderserver","title":"1.4 RenderServer","text":"<p><pre><code>rendering_server = memnew(RenderingServerDefault(OS::get_singleton()-&gt;get_render_thread_mode() == OS::RENDER_SEPARATE_THREAD));\n\nrendering_server-&gt;init();\n//rendering_server-&gt;call_set_use_vsync(OS::get_singleton()-&gt;_use_vsync);\nrendering_server-&gt;set_render_loop_enabled(!disable_render_loop);\n\nif (profile_gpu || (!editor &amp;&amp; bool(GLOBAL_GET(\"debug/settings/stdout/print_gpu_profile\")))) {\n    rendering_server-&gt;set_print_gpu_profile(true);\n}\n</code></pre> \u200b\u770b\u200b\u4ee3\u7801\u200b\u4e2d\u6709\u200b\u4e2a\u200b\u6e32\u67d3\u200b\u7ebf\u7a0b\u200b\u6a21\u5f0f\u200b\u7684\u200b\u53c2\u6570\u200b\uff0cRenderServer\u200b\u4e2d\u200b\u6e32\u67d3\u200b\u7ebf\u7a0b\u200b\u7c7b\u578b\u200b\u7531\u200b\u8fd9\u4e2a\u200b\u53c2\u6570\u200b\u51b3\u5b9a\u200b\u3002\u200b\u7ffb\u200b\u5230\u200b\u4e4b\u524d\u200b\u7684\u200b\u4ee3\u7801\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u7a0b\u5e8f\u200b\u542f\u52a8\u200b\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200b\u6e32\u67d3\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u6a21\u5f0f\u200b\uff1a <pre><code>} else if (I-&gt;get() == \"--render-thread\") { // render thread mode\n\n    if (I-&gt;next()) {\n        if (I-&gt;next()-&gt;get() == \"safe\") {\n            rtm = OS::RENDER_THREAD_SAFE;\n        } else if (I-&gt;next()-&gt;get() == \"unsafe\") {\n            rtm = OS::RENDER_THREAD_UNSAFE;\n        } else if (I-&gt;next()-&gt;get() == \"separate\") {\n            rtm = OS::RENDER_SEPARATE_THREAD;\n        } else {\n            OS::get_singleton()-&gt;print(\"Unknown render thread mode, aborting.\\nValid options are 'unsafe', 'safe' and 'separate'.\\n\");\n            goto error;\n        }\n\n        N = I-&gt;next()-&gt;next();\n    } else {\n        OS::get_singleton()-&gt;print(\"Missing render thread mode argument, aborting.\\n\");\n        goto error;\n    }\n</code></pre> Godot \u200b\u4e2d\u200b\u6e32\u67d3\u200b\u7ebf\u7a0b\u200b\u6709\u200b\u4e09\u79cd\u200b\u7c7b\u578b\u200b\uff1a - \u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b - \u200b\u975e\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b - \u200b\u5206\u79bb\u200b\u7ebf\u7a0b\u200b</p> <p>\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u5728\u200b\u542f\u52a8\u200b\u521d\u671f\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200b\u540e\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u914d\u7f6e\u200b <pre><code>    if (rtm == -1) {\n        rtm = GLOBAL_DEF(\"rendering/driver/threads/thread_model\", OS::RENDER_THREAD_SAFE);\n    }\n\n    if (rtm &gt;= 0 &amp;&amp; rtm &lt; 3) {\n        if (editor || project_manager) {\n            // Editor and project manager cannot run with rendering in a separate thread (they will crash on startup).\n            rtm = OS::RENDER_THREAD_SAFE;\n        }\n        OS::get_singleton()-&gt;_render_thread_mode = OS::RenderThreadMode(rtm);\n    }\n</code></pre> \u200b\u9ed8\u8ba4\u200b\u5c31\u662f\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b\u7684\u200b\u6a21\u5f0f\u200b\u3002\u200b\u7f16\u8f91\u5668\u200b\u548c\u200b\u9879\u76ee\u200b\u7ba1\u7406\u5668\u200b\u4e5f\u200b\u662f\u200b\u4e5f\u200b\u4ee5\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b\u7684\u200b\u6a21\u5f0f\u200b\u8fd0\u884c\u200b\u3002  </p> <p>RenderingServerDefault \u200b\u7c7b\u200b\u96c6\u6210\u200b RenderingServer\uff0cRenderingServer\u200b\u662f\u200b\u4e00\u4e2a\u200b\u62bd\u8c61\u7c7b\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5b9e\u73b0\u200b\u6e32\u67d3\u200b\u670d\u52a1\u200b\u7684\u200b\u6240\u6709\u200b\u63a5\u53e3\u200b\uff0c\u200b\u6211\u200b\u6bd4\u8f83\u200b\u5728\u610f\u200b\u7684\u200b\u662f\u200b RenderingServerDefault \u200b\u7684\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b command_queue <pre><code>RenderingServerDefault::RenderingServerDefault(bool p_create_thread) :\n        command_queue(p_create_thread) {\n    RenderingServer::init();\n\n    create_thread = p_create_thread;\n\n    if (!p_create_thread) {\n        server_thread = Thread::get_caller_id();\n    } else {\n        server_thread = 0;\n    }\n\n    RSG::threaded = p_create_thread;\n    RSG::canvas = memnew(RendererCanvasCull);\n    RSG::viewport = memnew(RendererViewport);\n    RendererSceneCull *sr = memnew(RendererSceneCull);\n    RSG::camera_attributes = memnew(RendererCameraAttributes);\n    RSG::scene = sr;\n    RSG::rasterizer = RendererCompositor::create();\n    RSG::utilities = RSG::rasterizer-&gt;get_utilities();\n    RSG::light_storage = RSG::rasterizer-&gt;get_light_storage();\n    RSG::material_storage = RSG::rasterizer-&gt;get_material_storage();\n    RSG::mesh_storage = RSG::rasterizer-&gt;get_mesh_storage();\n    RSG::particles_storage = RSG::rasterizer-&gt;get_particles_storage();\n    RSG::texture_storage = RSG::rasterizer-&gt;get_texture_storage();\n    RSG::gi = RSG::rasterizer-&gt;get_gi();\n    RSG::fog = RSG::rasterizer-&gt;get_fog();\n    RSG::canvas_render = RSG::rasterizer-&gt;get_canvas();\n    sr-&gt;set_scene_render(RSG::rasterizer-&gt;get_scene());\n\n    frame_profile_frame = 0;\n}\n</code></pre> \u200b\u901a\u8fc7\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u770b\u51fa\u200b\uff0ccommand_queue \u200b\u5e94\u8be5\u200b\u662f\u200b\u50a8\u5b58\u200b\u7ed8\u5236\u200b\u547d\u4ee4\u200b\u7684\u200b\u961f\u5217\u200b\uff0c\u200b\u81f3\u4e8e\u200b\u5b83\u200b\u7684\u200b\u7c7b\u578b\u200b\u89e3\u6790\u200b\u6211\u200b\u653e\u5230\u200b\u4e86\u200b\uff08CommandQueueMT\u200b\u89e3\u6790\u200b\uff09\u200b\u4e2d\u200b\u3002init\u200b\u51fd\u6570\u200b\u5219\u200b\u662f\u200b\u6e32\u67d3\u5668\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u6e32\u67d3\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e9b\u200b\u53c2\u6570\u200b\uff0c\u200b\u540e\u9762\u200b\u521b\u5efa\u200b\u4e86\u200b\u753b\u5e03\u200b\u88c1\u526a\u200b\u3001\u200b\u573a\u666f\u200b\u88c1\u526a\u200b\u7b49\u7b49\u200b\uff0c\u200b\u5149\u7167\u200b\u548c\u200b\u6750\u8d28\u200b\u7b49\u200b\u4fe1\u606f\u200b\u662f\u200b\u4f5c\u4e3a\u200b storage \u200b\u8fdb\u884c\u200b\u5b58\u50a8\u200b\u3002 \u200b\u81f3\u4e8e\u200b RSG \u200b\u5176\u5b9e\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5168\u5c40\u200b\u7684\u200b RenderServer\u200b\u522b\u540d\u200b\u3002 <pre><code>class RenderingServerGlobals {\npublic:\n    static bool threaded;\n\n    static RendererUtilities *utilities;\n    static RendererLightStorage *light_storage;\n    static RendererMaterialStorage *material_storage;\n    static RendererMeshStorage *mesh_storage;\n    static RendererParticlesStorage *particles_storage;\n    static RendererTextureStorage *texture_storage;\n    static RendererGI *gi;\n    static RendererFog *fog;\n    static RendererCameraAttributes *camera_attributes;\n    static RendererCanvasRender *canvas_render;\n    static RendererCompositor *rasterizer;\n\n    static RendererCanvasCull *canvas;\n    static RendererViewport *viewport;\n    static RenderingMethod *scene;\n};\n\n#define RSG RenderingServerGlobals\n</code></pre> \u200b\u4e5f\u200b\u5c31\u662f\u200b\u5728\u200b RenderServerDefault \u200b\u4e2d\u200b\u521b\u5efa\u200b\u7684\u200b\u4e00\u5217\u200b\u7c7b\u200b\u6e32\u67d3\u200b\u76f8\u5173\u200b\u7684\u200b\u5bf9\u8c61\u200b \u200b\u90fd\u200b\u88ab\u200b\u8d4b\u200b\u7ed9\u200b\u4e86\u200b RSG \u200b\u4e2d\u200b\u7684\u200b\u9759\u6001\u200b\u6210\u5458\u200b\u6307\u9488\u200b\uff0c\u200b\u6240\u4ee5\u200b RSG \u200b\u4e5f\u200b\u662f\u200b\u5355\u4f8b\u200b\u6a21\u5f0f\u200b\u7684\u200b\u4e00\u79cd\u200b\u8fd0\u7528\u200b\u3002</p> <p>\u200b\u521b\u5efa\u200b\u5b8c\u200b RenderServerDefault \u200b\u8c03\u7528\u200b\u5b83\u200b\u7684\u200b init \u200b\u51fd\u6570\u200b\u3002 <pre><code>void RenderingServerDefault::init() {\n    if (create_thread) {\n        print_verbose(\"RenderingServerWrapMT: Creating render thread\");\n        DisplayServer::get_singleton()-&gt;release_rendering_thread();\n        if (create_thread) {\n            thread.start(_thread_callback, this);\n            print_verbose(\"RenderingServerWrapMT: Starting render thread\");\n        }\n        while (!draw_thread_up.is_set()) {\n            OS::get_singleton()-&gt;delay_usec(1000);\n        }\n        print_verbose(\"RenderingServerWrapMT: Finished render thread\");\n    } else {\n        _init();\n    }\n}\nvoid RenderingServerDefault::_init() {\n    RSG::rasterizer-&gt;initialize();\n}\n</code></pre> init \u200b\u51fd\u6570\u200b\u4e2d\u200b\u5176\u5b9e\u200b\u662f\u200b rasterizer \u200b\u8c03\u7528\u200b\u5176\u200b initialize \u200b\u51fd\u6570\u200b\uff0crasterizer\u200b\u5728\u200b RenderingServerDefault \u200b\u7684\u200b\u6784\u9020\u200b\u97e9\u5f0f\u200b\u4e2d\u200b\u5176\u5b9e\u200b\u662f\u200b RendererCompositor\u3002</p>"},{"location":"Godot-Source/04render_device/","title":"Render Device \u200b\u7c7b\u200b\u4ecb\u7ecd","text":"<p>\u200b\u5728\u200b\u8fd9\u200b\u4e00\u200b\u7ae0\u8282\u200b\uff0c\u200b\u6211\u200b\u7684\u200b\u60f3\u6cd5\u200b\u662f\u200b\u6309\u7167\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u7684\u200b\u529f\u80fd\u200b\u6765\u200b\u5212\u5206\u200b\uff0c\u200b\u5982\u679c\u200b\u7167\u7740\u200b\u4ee3\u7801\u200b\u4e00\u884c\u200b\u4e00\u884c\u200b\u89e3\u91ca\u200b\u4f1a\u200b\u663e\u5f97\u200b\u975e\u5e38\u200b\u7684\u200b\u5197\u957f\u200b\uff0c\u200b\u4e0d\u200b\u9002\u5408\u200b\u9605\u8bfb\u200b\u3002</p> <p>RenderDevice \u200b\u662f\u200b Object \u200b\u7684\u200b\u5b50\u7c7b\u200b\uff0c\u200b\u5176\u200b\u6700\u200b\u4e3b\u8981\u200b\u7684\u200b\u4f5c\u7528\u200b\u662f\u200b\u5b9a\u4e49\u200b\u7c7b\u200b\u7684\u200b\u63a5\u53e3\u200b\u3002Object \u200b\u7c7b\u200b \u200b\u7684\u200b\u4f5c\u7528\u200b\u6211\u200b\u4e0d\u200b\u7ee7\u7eed\u200b\u5199\u200b\u4e86\u200b\uff0c\u200b\u4eca\u540e\u200b\u4e5f\u200b\u4f1a\u200b\u5199\u200b Object \u200b\u7c7b\u200b\u7684\u200b\u6587\u7ae0\u200b\uff0c\u200b\u5c31\u200b\u4e0d\u200b\u8d58\u8ff0\u200b\u4e86\u200b\u3002 \u200b\u7c7b\u200b\u5b9a\u4e49\u200b\u7684\u200b\u4e0b\u200b\u4e00\u884c\u200b\u662f\u200b\u5982\u4e0b\u200b\u4ee3\u7801\u200b\uff0c <pre><code>    GDCLASS(RenderingDevice, Object)\n</code></pre> \u200b\u5b83\u200b\u7684\u200b\u4f5c\u7528\u200b\u662f\u200b\u5b9e\u73b0\u200b\u53cd\u5c04\u200b\uff0c\u200b\u81f3\u4e8e\u200b\u600e\u4e48\u200b\u5b9e\u73b0\u200b\u7684\u200b\u53ef\u4ee5\u200b\u53bb\u200b\u770b\u200b Godot \u200b\u53cd\u5c04\u200b\u5b9e\u73b0\u200b\u7684\u200b\u6587\u7ae0\u200b.</p>"},{"location":"Godot-Source/04render_device/#1","title":"1\u3001\u200b\u8bbe\u5907\u200b\u4fe1\u606f","text":"<p>\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u8bbe\u200b\u522b\u7684\u200b\u57fa\u672c\u200b\u578b\u53f7\u200b\uff0c\u200b\u662f\u200b\u4ec0\u4e48\u200b\u7c7b\u578b\u200b\u7684\u200b\u3002\u200b\u76ee\u524d\u200b\u9884\u7559\u200b\u4e86\u200b DirectX\uff0c\u200b\u4e4b\u524d\u200b\u770b\u200b\u4e86\u200b The future of Render in Godot \u200b\u7684\u200b\u6f14\u8bb2\u200b\uff0c\u200b\u540e\u9762\u200b\u5e94\u8be5\u200b\u8fd8\u4f1a\u200b\u6709\u200b metal \u200b\u7b49\u200b\u5173\u952e\u5b57\u200b\u3002 <pre><code>enum DeviceFamily {\n        DEVICE_UNKNOWN,\n        DEVICE_OPENGL,\n        DEVICE_VULKAN,\n        DEVICE_DIRECTX\n    };  \nstruct Capabilities {\n    // main device info\n    DeviceFamily device_family = DEVICE_UNKNOWN;\n    uint32_t version_major = 1.0;\n    uint32_t version_minor = 0.0;\n};\n\nCapabilities device_capabilities;\n</code></pre></p>"},{"location":"Godot-Source/04render_device/#2texture","title":"2\u3001Texture\u200b\u7684\u200b\u521b\u5efa","text":"<p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u7c7b\u4e2d\u200b\u5176\u5b9e\u200b\u4e4b\u200b\u5b9a\u4e49\u200b\u4e86\u200b Texture \u200b\u7684\u200b\u5c5e\u6027\u200b\u683c\u5f0f\u200b\u548c\u200b\u521b\u5efa\u200b\u7684\u200b\u76f8\u5173\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5177\u4f53\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u200b\u5728\u200b\u5b50\u7c7b\u200b\u4e2d\u200b\u3002 <pre><code>struct TextureFormat {\n    DataFormat format;\n    uint32_t width;\n    uint32_t height;\n    uint32_t depth;\n    uint32_t array_layers;\n    uint32_t mipmaps;\n    TextureType texture_type;\n    TextureSamples samples;\n    uint32_t usage_bits;\n    Vector&lt;DataFormat&gt; shareable_formats;\n    bool is_resolve_buffer = false;\n\n    bool operator==(const TextureFormat &amp;b) const {\n        if (format != b.format) {\n            return false;\n        } else if (width != b.width) {\n            return false;\n        } else if (height != b.height) {\n            return false;\n        } else if (depth != b.depth) {\n            return false;\n        } else if (array_layers != b.array_layers) {\n            return false;\n        } else if (mipmaps != b.mipmaps) {\n            return false;\n        } else if (texture_type != b.texture_type) {\n            return false;\n        } else if (samples != b.samples) {\n            return false;\n        } else if (usage_bits != b.usage_bits) {\n            return false;\n        } else if (shareable_formats != b.shareable_formats) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    TextureFormat() {\n        format = DATA_FORMAT_R8_UNORM;\n        width = 1;\n        height = 1;\n        depth = 1;\n        array_layers = 1;\n        mipmaps = 1;\n        texture_type = TEXTURE_TYPE_2D;\n        samples = TEXTURE_SAMPLES_1;\n        usage_bits = 0;\n    }\n};\n</code></pre> \u200b\u8ddf\u200b Texture \u200b\u76f8\u5173\u200b\u7684\u200b\u63a5\u53e3\u200b\uff1a <pre><code>    virtual RID texture_create(const TextureFormat &amp;p_format, const TextureView &amp;p_view, const Vector&lt;Vector&lt;uint8_t&gt;&gt; &amp;p_data = Vector&lt;Vector&lt;uint8_t&gt;&gt;()) = 0;\n    virtual RID texture_create_shared(const TextureView &amp;p_view, RID p_with_texture) = 0;\n    virtual RID texture_create_from_extension(TextureType p_type, DataFormat p_format, TextureSamples p_samples, BitField&lt;RenderingDevice::TextureUsageBits&gt; p_flags, uint64_t p_image, uint64_t p_width, uint64_t p_height, uint64_t p_depth, uint64_t p_layers) = 0;\n\n    virtual RID texture_create_shared_from_slice(const TextureView &amp;p_view, RID p_with_texture, uint32_t p_layer, uint32_t p_mipmap, uint32_t p_mipmaps = 1, TextureSliceType p_slice_type = TEXTURE_SLICE_2D, uint32_t p_layers = 0) = 0;\n\n    virtual Error texture_update(RID p_texture, uint32_t p_layer, const Vector&lt;uint8_t&gt; &amp;p_data, BitField&lt;BarrierMask&gt; p_post_barrier = BARRIER_MASK_ALL_BARRIERS) = 0;\n    virtual Vector&lt;uint8_t&gt; texture_get_data(RID p_texture, uint32_t p_layer) = 0; // CPU textures will return immediately, while GPU textures will most likely force a flush\n\n    virtual bool texture_is_format_supported_for_usage(DataFormat p_format, BitField&lt;RenderingDevice::TextureUsageBits&gt; p_usage) const = 0;\n    virtual bool texture_is_shared(RID p_texture) = 0;\n    virtual bool texture_is_valid(RID p_texture) = 0;\n    virtual TextureFormat texture_get_format(RID p_texture) = 0;\n    virtual Size2i texture_size(RID p_texture) = 0;\n    virtual uint64_t texture_get_native_handle(RID p_texture) = 0;\n\n    virtual Error texture_copy(RID p_from_texture, RID p_to_texture, const Vector3 &amp;p_from, const Vector3 &amp;p_to, const Vector3 &amp;p_size, uint32_t p_src_mipmap, uint32_t p_dst_mipmap, uint32_t p_src_layer, uint32_t p_dst_layer, BitField&lt;BarrierMask&gt; p_post_barrier = BARRIER_MASK_ALL_BARRIERS) = 0;\n    virtual Error texture_clear(RID p_texture, const Color &amp;p_color, uint32_t p_base_mipmap, uint32_t p_mipmaps, uint32_t p_base_layer, uint32_t p_layers, BitField&lt;BarrierMask&gt; p_post_barrier = BARRIER_MASK_ALL_BARRIERS) = 0;\n    virtual Error texture_resolve_multisample(RID p_from_texture, RID p_to_texture, BitField&lt;BarrierMask&gt; p_post_barrier = BARRIER_MASK_ALL_BARRIERS) = 0;\n</code></pre></p>"},{"location":"Godot-Source/04render_device/#3framebuffer","title":"3\u3001FrameBuffer","text":"<p>FrameBuffer\u200b\u7684\u200b\u521b\u5efa\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u7684\u200b\u57fa\u672c\u4e0a\u200b\u90fd\u200b\u662f\u200b\u63a5\u53e3\u200b\u3002 <pre><code>    struct AttachmentFormat {\n        enum { UNUSED_ATTACHMENT = 0xFFFFFFFF };\n        DataFormat format;\n        TextureSamples samples;\n        uint32_t usage_flags;\n        AttachmentFormat() {\n            format = DATA_FORMAT_R8G8B8A8_UNORM;\n            samples = TEXTURE_SAMPLES_1;\n            usage_flags = 0;\n        }\n    };\n\n    typedef int64_t FramebufferFormatID;\n\n    // This ID is warranted to be unique for the same formats, does not need to be freed\n    virtual FramebufferFormatID framebuffer_format_create(const Vector&lt;AttachmentFormat&gt; &amp;p_format, uint32_t p_view_count = 1) = 0;\n    struct FramebufferPass {\n        enum {\n            ATTACHMENT_UNUSED = -1\n        };\n        Vector&lt;int32_t&gt; color_attachments;\n        Vector&lt;int32_t&gt; input_attachments;\n        Vector&lt;int32_t&gt; resolve_attachments;\n        Vector&lt;int32_t&gt; preserve_attachments;\n        int32_t depth_attachment = ATTACHMENT_UNUSED;\n        int32_t vrs_attachment = ATTACHMENT_UNUSED; // density map for VRS, only used if supported\n    };\n\n    virtual FramebufferFormatID framebuffer_format_create_multipass(const Vector&lt;AttachmentFormat&gt; &amp;p_attachments, const Vector&lt;FramebufferPass&gt; &amp;p_passes, uint32_t p_view_count = 1) = 0;\n    virtual FramebufferFormatID framebuffer_format_create_empty(TextureSamples p_samples = TEXTURE_SAMPLES_1) = 0;\n    virtual TextureSamples framebuffer_format_get_texture_samples(FramebufferFormatID p_format, uint32_t p_pass = 0) = 0;\n\n    virtual RID framebuffer_create(const Vector&lt;RID&gt; &amp;p_texture_attachments, FramebufferFormatID p_format_check = INVALID_ID, uint32_t p_view_count = 1) = 0;\n    virtual RID framebuffer_create_multipass(const Vector&lt;RID&gt; &amp;p_texture_attachments, const Vector&lt;FramebufferPass&gt; &amp;p_passes, FramebufferFormatID p_format_check = INVALID_ID, uint32_t p_view_count = 1) = 0;\n    virtual RID framebuffer_create_empty(const Size2i &amp;p_size, TextureSamples p_samples = TEXTURE_SAMPLES_1, FramebufferFormatID p_format_check = INVALID_ID) = 0;\n    virtual bool framebuffer_is_valid(RID p_framebuffer) const = 0;\n    virtual void framebuffer_set_invalidation_callback(RID p_framebuffer, InvalidationCallback p_callback, void *p_userdata) = 0;\n\n    virtual FramebufferFormatID framebuffer_get_format(RID p_framebuffer) = 0;\n</code></pre></p>"},{"location":"Godot-Source/04render_device/#4sampler","title":"4\u3001Sampler","text":"<p>\u200b\u62bd\u8c61\u200b\u4e86\u200b VkSample \u200b\u7684\u200b\u91cd\u8981\u200b\u5c5e\u6027\u200b <pre><code>struct SamplerState {\n    SamplerFilter mag_filter;\n    SamplerFilter min_filter;\n    SamplerFilter mip_filter;\n    SamplerRepeatMode repeat_u;\n    SamplerRepeatMode repeat_v;\n    SamplerRepeatMode repeat_w;\n    float lod_bias;\n    bool use_anisotropy;\n    float anisotropy_max;\n    bool enable_compare;\n    CompareOperator compare_op;\n    float min_lod;\n    float max_lod;\n    SamplerBorderColor border_color;\n    bool unnormalized_uvw;\n\n    SamplerState() {\n        mag_filter = SAMPLER_FILTER_NEAREST;\n        min_filter = SAMPLER_FILTER_NEAREST;\n        mip_filter = SAMPLER_FILTER_NEAREST;\n        repeat_u = SAMPLER_REPEAT_MODE_CLAMP_TO_EDGE;\n        repeat_v = SAMPLER_REPEAT_MODE_CLAMP_TO_EDGE;\n        repeat_w = SAMPLER_REPEAT_MODE_CLAMP_TO_EDGE;\n        lod_bias = 0;\n        use_anisotropy = false;\n        anisotropy_max = 1.0;\n        enable_compare = false;\n        compare_op = COMPARE_OP_ALWAYS;\n        min_lod = 0;\n        max_lod = 1e20; //something very large should do\n        border_color = SAMPLER_BORDER_COLOR_FLOAT_OPAQUE_BLACK;\n        unnormalized_uvw = false;\n    }\n};\n\nvirtual RID sampler_create(const SamplerState &amp;p_state) = 0;\nvirtual bool sampler_is_format_supported_for_filter(DataFormat p_format, SamplerFilter p_sampler_filter) const = 0;\n</code></pre></p>"},{"location":"Godot-Source/04render_device/#5vertex-index-buffer","title":"5\u3001Vertex \u200b\u548c\u200b Index Buffer","text":"<pre><code>struct VertexAttribute {\n    uint32_t location; //shader location\n    uint32_t offset;\n    DataFormat format;\n    uint32_t stride;\n    VertexFrequency frequency;\n    VertexAttribute() {\n        location = 0;\n        offset = 0;\n        stride = 0;\n        format = DATA_FORMAT_MAX;\n        frequency = VERTEX_FREQUENCY_VERTEX;\n    }\n};\nvirtual RID vertex_buffer_create(uint32_t p_size_bytes, const Vector&lt;uint8_t&gt; &amp;p_data = Vector&lt;uint8_t&gt;(), bool p_use_as_storage = false) = 0;\n\ntypedef int64_t VertexFormatID;\n\n// This ID is warranted to be unique for the same formats, does not need to be freed\nvirtual VertexFormatID vertex_format_create(const Vector&lt;VertexAttribute&gt; &amp;p_vertex_formats) = 0;\nvirtual RID vertex_array_create(uint32_t p_vertex_count, VertexFormatID p_vertex_format, const Vector&lt;RID&gt; &amp;p_src_buffers, const Vector&lt;uint64_t&gt; &amp;p_offsets = Vector&lt;uint64_t&gt;()) = 0;\n\nenum IndexBufferFormat {\n    INDEX_BUFFER_FORMAT_UINT16,\n    INDEX_BUFFER_FORMAT_UINT32,\n};\n\nvirtual RID index_buffer_create(uint32_t p_size_indices, IndexBufferFormat p_format, const Vector&lt;uint8_t&gt; &amp;p_data = Vector&lt;uint8_t&gt;(), bool p_use_restart_indices = false) = 0;\nvirtual RID index_array_create(RID p_index_buffer, uint32_t p_index_offset, uint32_t p_index_count) = 0;\n</code></pre>"},{"location":"Godot-Source/04render_device/#6uniform-buffer","title":"6\u3001Uniform Buffer","text":"<pre><code>virtual RID uniform_buffer_create(uint32_t p_size_bytes, const Vector&lt;uint8_t&gt; &amp;p_data = Vector&lt;uint8_t&gt;()) = 0;\nvirtual RID storage_buffer_create(uint32_t p_size, const Vector&lt;uint8_t&gt; &amp;p_data = Vector&lt;uint8_t&gt;(), BitField&lt;StorageBufferUsage&gt; p_usage = 0) = 0;\nvirtual RID texture_buffer_create(uint32_t p_size_elements, DataFormat p_format, const Vector&lt;uint8_t&gt; &amp;p_data = Vector&lt;uint8_t&gt;()) = 0;\n\nstruct Uniform {\n    UniformType uniform_type;\n    int binding; // Binding index as specified in shader.\n\nprivate:\n    // In most cases only one ID is provided per binding, so avoid allocating memory unnecessarily for performance.\n    RID id; // If only one is provided, this is used.\n    Vector&lt;RID&gt; ids; // If multiple ones are provided, this is used instead.\n\npublic:\n    _FORCE_INLINE_ uint32_t get_id_count() const {\n        return (id.is_valid() ? 1 : ids.size());\n    }\n\n    _FORCE_INLINE_ RID get_id(uint32_t p_idx) const {\n        if (id.is_valid()) {\n            ERR_FAIL_COND_V(p_idx != 0, RID());\n            return id;\n        } else {\n            return ids[p_idx];\n        }\n    }\n    _FORCE_INLINE_ void set_id(uint32_t p_idx, RID p_id) {\n        if (id.is_valid()) {\n            ERR_FAIL_COND(p_idx != 0);\n            id = p_id;\n        } else {\n            ids.write[p_idx] = p_id;\n        }\n    }\n\n    _FORCE_INLINE_ void append_id(RID p_id) {\n        if (ids.is_empty()) {\n            if (id == RID()) {\n                id = p_id;\n            } else {\n                ids.push_back(id);\n                ids.push_back(p_id);\n                id = RID();\n            }\n        } else {\n            ids.push_back(p_id);\n        }\n    }\n\n    _FORCE_INLINE_ void clear_ids() {\n        id = RID();\n        ids.clear();\n    }\n\n    _FORCE_INLINE_ Uniform(UniformType p_type, int p_binding, RID p_id) {\n        uniform_type = p_type;\n        binding = p_binding;\n        id = p_id;\n    }\n    _FORCE_INLINE_ Uniform(UniformType p_type, int p_binding, const Vector&lt;RID&gt; &amp;p_ids) {\n        uniform_type = p_type;\n        binding = p_binding;\n        ids = p_ids;\n    }\n    _FORCE_INLINE_ Uniform() {\n        uniform_type = UNIFORM_TYPE_IMAGE;\n        binding = 0;\n    }\n};\n\nvirtual RID uniform_set_create(const Vector&lt;Uniform&gt; &amp;p_uniforms, RID p_shader, uint32_t p_shader_set) = 0;\nvirtual bool uniform_set_is_valid(RID p_uniform_set) = 0;\nvirtual void uniform_set_set_invalidation_callback(RID p_uniform_set, InvalidationCallback p_callback, void *p_userdata) = 0;\n\nvirtual Error buffer_copy(RID p_src_buffer, RID p_dst_buffer, uint32_t p_src_offset, uint32_t p_dst_offset, uint32_t p_size, BitField&lt;BarrierMask&gt; p_post_barrier = BARRIER_MASK_ALL_BARRIERS) = 0;\nvirtual Error buffer_update(RID p_buffer, uint32_t p_offset, uint32_t p_size, const void *p_data, BitField&lt;BarrierMask&gt; p_post_barrier = BARRIER_MASK_ALL_BARRIERS) = 0;\nvirtual Error buffer_clear(RID p_buffer, uint32_t p_offset, uint32_t p_size, BitField&lt;BarrierMask&gt; p_post_barrier = BARRIER_MASK_ALL_BARRIERS) = 0;\nvirtual Vector&lt;uint8_t&gt; buffer_get_data(RID p_buffer, uint32_t p_offset = 0, uint32_t p_size = 0) = 0; // This causes stall, only use to retrieve large buffers for saving.\n</code></pre>"},{"location":"Godot-Source/04render_device/#7shader","title":"7\u3001Shader","text":"<pre><code>const Capabilities *get_device_capabilities() const { return &amp;device_capabilities; };\n\nenum Features {\n    SUPPORTS_MULTIVIEW,\n    SUPPORTS_FSR_HALF_FLOAT,\n    SUPPORTS_ATTACHMENT_VRS,\n    // If not supported, a fragment shader with only side effets (i.e., writes  to buffers, but doesn't output to attachments), may be optimized down to no-op by the GPU driver.\n    SUPPORTS_FRAGMENT_SHADER_WITH_ONLY_SIDE_EFFECTS,\n};\nvirtual bool has_feature(const Features p_feature) const = 0;\n\nvirtual Vector&lt;uint8_t&gt; shader_compile_spirv_from_source(ShaderStage p_stage, const String &amp;p_source_code, ShaderLanguage p_language = SHADER_LANGUAGE_GLSL, String *r_error = nullptr, bool p_allow_cache = true);\nvirtual String shader_get_spirv_cache_key() const;\n\nstatic void shader_set_compile_to_spirv_function(ShaderCompileToSPIRVFunction p_function);\nstatic void shader_set_spirv_cache_function(ShaderCacheFunction p_function);\nstatic void shader_set_get_cache_key_function(ShaderSPIRVGetCacheKeyFunction p_function);\n\nstruct ShaderStageSPIRVData {\n    ShaderStage shader_stage;\n    Vector&lt;uint8_t&gt; spir_v;\n\n    ShaderStageSPIRVData() {\n        shader_stage = SHADER_STAGE_VERTEX;\n    }\n};\n\nvirtual String shader_get_binary_cache_key() const = 0;\nvirtual Vector&lt;uint8_t&gt; shader_compile_binary_from_spirv(const Vector&lt;ShaderStageSPIRVData&gt; &amp;p_spirv, const String &amp;p_shader_name = \"\") = 0;\n\nvirtual RID shader_create_from_spirv(const Vector&lt;ShaderStageSPIRVData&gt; &amp;p_spirv, const String &amp;p_shader_name = \"\");\nvirtual RID shader_create_from_bytecode(const Vector&lt;uint8_t&gt; &amp;p_shader_binary, RID p_placeholder = RID()) = 0;\nvirtual RID shader_create_placeholder() = 0;\n\nvirtual uint64_t shader_get_vertex_input_attribute_mask(RID p_shader) = 0;\n</code></pre>"},{"location":"Godot-Source/04render_device/#8pipeline-constant","title":"8\u3001Pipeline Constant","text":"<pre><code>struct PipelineSpecializationConstant {\n    PipelineSpecializationConstantType type;\n    uint32_t constant_id;\n    union {\n        uint32_t int_value;\n        float float_value;\n        bool bool_value;\n    };\n\n    PipelineSpecializationConstant() {\n        type = PIPELINE_SPECIALIZATION_CONSTANT_TYPE_BOOL;\n        constant_id = 0;\n        int_value = 0;\n    }\n};\n</code></pre>"},{"location":"Godot-Source/04render_device/#9pipeline","title":"9\u3001Pipeline","text":"<pre><code>    virtual bool render_pipeline_is_valid(RID p_pipeline) = 0;\n    virtual RID render_pipeline_create(RID p_shader, FramebufferFormatID p_framebuffer_format, VertexFormatID p_vertex_format, RenderPrimitive p_render_primitive, const PipelineRasterizationState &amp;p_rasterization_state, const PipelineMultisampleState &amp;p_multisample_state, const PipelineDepthStencilState &amp;p_depth_stencil_state, const PipelineColorBlendState &amp;p_blend_state, BitField&lt;PipelineDynamicStateFlags&gt; p_dynamic_state_flags = 0, uint32_t p_for_render_pass = 0, const Vector&lt;PipelineSpecializationConstant&gt; &amp;p_specialization_constants = Vector&lt;PipelineSpecializationConstant&gt;()) = 0;\n\n    /**************************/\n    /**** COMPUTE PIPELINE ****/\n    /**************************/\n\n    virtual RID compute_pipeline_create(RID p_shader, const Vector&lt;PipelineSpecializationConstant&gt; &amp;p_specialization_constants = Vector&lt;PipelineSpecializationConstant&gt;()) = 0;\n    virtual bool compute_pipeline_is_valid(RID p_pipeline) = 0;\n</code></pre>"},{"location":"Godot-Source/04render_device/#10drawlist","title":"10\u3001DrawList","text":"<pre><code>virtual DrawListID draw_list_begin_for_screen(DisplayServer::WindowID p_screen = 0, const Color &amp;p_clear_color = Color()) = 0;\nvirtual DrawListID draw_list_begin(RID p_framebuffer, InitialAction p_initial_color_action, FinalAction p_final_color_action, InitialAction p_initial_depth_action, FinalAction p_final_depth_action, const Vector&lt;Color&gt; &amp;p_clear_color_values = Vector&lt;Color&gt;(), float p_clear_depth = 1.0, uint32_t p_clear_stencil = 0, const Rect2 &amp;p_region = Rect2(), const Vector&lt;RID&gt; &amp;p_storage_textures = Vector&lt;RID&gt;()) = 0;\nvirtual Error draw_list_begin_split(RID p_framebuffer, uint32_t p_splits, DrawListID *r_split_ids, InitialAction p_initial_color_action, FinalAction p_final_color_action, InitialAction p_initial_depth_action, FinalAction p_final_depth_action, const Vector&lt;Color&gt; &amp;p_clear_color_values = Vector&lt;Color&gt;(), float p_clear_depth = 1.0, uint32_t p_clear_stencil = 0, const Rect2 &amp;p_region = Rect2(), const Vector&lt;RID&gt; &amp;p_storage_textures = Vector&lt;RID&gt;()) = 0;\n\nvirtual void draw_list_set_blend_constants(DrawListID p_list, const Color &amp;p_color) = 0;\nvirtual void draw_list_bind_render_pipeline(DrawListID p_list, RID p_render_pipeline) = 0;\nvirtual void draw_list_bind_uniform_set(DrawListID p_list, RID p_uniform_set, uint32_t p_index) = 0;\nvirtual void draw_list_bind_vertex_array(DrawListID p_list, RID p_vertex_array) = 0;\nvirtual void draw_list_bind_index_array(DrawListID p_list, RID p_index_array) = 0;\nvirtual void draw_list_set_line_width(DrawListID p_list, float p_width) = 0;\nvirtual void draw_list_set_push_constant(DrawListID p_list, const void *p_data, uint32_t p_data_size) = 0;\n\nvirtual void draw_list_draw(DrawListID p_list, bool p_use_indices, uint32_t p_instances = 1, uint32_t p_procedural_vertices = 0) = 0;\n\nvirtual void draw_list_enable_scissor(DrawListID p_list, const Rect2 &amp;p_rect) = 0;\nvirtual void draw_list_disable_scissor(DrawListID p_list) = 0;\n\nvirtual uint32_t draw_list_get_current_pass() = 0;\nvirtual DrawListID draw_list_switch_to_next_pass() = 0;\nvirtual Error draw_list_switch_to_next_pass_split(uint32_t p_splits, DrawListID *r_split_ids) = 0;\n\nvirtual void draw_list_end(BitField&lt;BarrierMask&gt; p_post_barrier = BARRIER_MASK_ALL_BARRIERS) = 0;\n\n/***********************/\n/**** COMPUTE LISTS ****/\n/***********************/\n\nvirtual ComputeListID compute_list_begin(bool p_allow_draw_overlap = false) = 0;\nvirtual void compute_list_bind_compute_pipeline(ComputeListID p_list, RID p_compute_pipeline) = 0;\nvirtual void compute_list_bind_uniform_set(ComputeListID p_list, RID p_uniform_set, uint32_t p_index) = 0;\nvirtual void compute_list_set_push_constant(ComputeListID p_list, const void *p_data, uint32_t p_data_size) = 0;\nvirtual void compute_list_dispatch(ComputeListID p_list, uint32_t p_x_groups, uint32_t p_y_groups, uint32_t p_z_groups) = 0;\nvirtual void compute_list_dispatch_threads(ComputeListID p_list, uint32_t p_x_threads, uint32_t p_y_threads, uint32_t p_z_threads) = 0;\nvirtual void compute_list_dispatch_indirect(ComputeListID p_list, RID p_buffer, uint32_t p_offset) = 0;\nvirtual void compute_list_add_barrier(ComputeListID p_list) = 0;\n\nvirtual void compute_list_end(BitField&lt;BarrierMask&gt; p_post_barrier = BARRIER_MASK_ALL_BARRIERS) = 0;\n\nvirtual void barrier(BitField&lt;BarrierMask&gt; p_from = BARRIER_MASK_ALL_BARRIERS, BitField&lt;BarrierMask&gt; p_to = BARRIER_MASK_ALL_BARRIERS) = 0;\nvirtual void full_barrier() = 0;\n</code></pre>"},{"location":"Godot-Source/05CommandQueueMT/","title":"CommandQueueMT \u200b\u89e3\u6790","text":""},{"location":"Godot-Source/05CommandQueueMT/#_1","title":"\u5b8f\u200b\u5b9a\u4e49","text":""},{"location":"Godot-Source/05CommandQueueMT/#comma","title":"COMMA","text":"<p>COMMA(N)\uff1a\u200b\u6839\u636e\u200b\u4f20\u5165\u200b\u7684\u200b\u6574\u6570\u200bN\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u9017\u53f7\u200b\u3002\u200b\u5982\u679c\u200bN\u200b\u4e3a\u200b0\uff0c\u200b\u5219\u200b\u4e0d\u200b\u8fd4\u56de\u200b\u4efb\u4f55\u200b\u5185\u5bb9\u200b\u3002 <pre><code>#define COMMA(N) _COMMA_##N\n#define _COMMA_0\n#define _COMMA_1 ,\n#define _COMMA_2 ,\n#define _COMMA_3 ,\n#define _COMMA_4 ,\n#define _COMMA_5 ,\n#define _COMMA_6 ,\n#define _COMMA_7 ,\n#define _COMMA_8 ,\n#define _COMMA_9 ,\n#define _COMMA_10 ,\n#define _COMMA_11 ,\n#define _COMMA_12 ,\n#define _COMMA_13 ,\n#define _COMMA_14 ,\n#define _COMMA_15 ,\n</code></pre></p>"},{"location":"Godot-Source/05CommandQueueMT/#comma_sep_list","title":"COMMA_SEP_LIST","text":"<p>COMMA_SEP_LIST(ITEM, LENGTH)\uff1a\u200b\u6839\u636e\u200b\u4f20\u5165\u200b\u7684\u200b\u6574\u6570\u200bLENGTH\u200b\u548c\u200b\u53c2\u6570\u200bITEM\uff0c\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u4ee5\u200b\u9017\u53f7\u200b\u5206\u9694\u200b\u7684\u200bITEM\u200b\u5217\u8868\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5f53\u200bITEM\u200b\u4e3a\u200bX\uff0cLENGTH\u200b\u4e3a\u200b5\u200b\u65f6\u200b\uff0c\u200b\u8f93\u51fa\u200b\u4e3a\u200bX(1), X(2), X(3), X(4), X(5) <pre><code>// 1-based comma separated list of ITEMs\n#define COMMA_SEP_LIST(ITEM, LENGTH) _COMMA_SEP_LIST_##LENGTH(ITEM)\n#define _COMMA_SEP_LIST_15(ITEM) \\\n    _COMMA_SEP_LIST_14(ITEM)     \\\n    , ITEM(15)\n#define _COMMA_SEP_LIST_14(ITEM) \\\n    _COMMA_SEP_LIST_13(ITEM)     \\\n    , ITEM(14)\n#define _COMMA_SEP_LIST_13(ITEM) \\\n    _COMMA_SEP_LIST_12(ITEM)     \\\n    , ITEM(13)\n#define _COMMA_SEP_LIST_12(ITEM) \\\n    _COMMA_SEP_LIST_11(ITEM)     \\\n    , ITEM(12)\n#define _COMMA_SEP_LIST_11(ITEM) \\\n    _COMMA_SEP_LIST_10(ITEM)     \\\n    , ITEM(11)\n#define _COMMA_SEP_LIST_10(ITEM) \\\n    _COMMA_SEP_LIST_9(ITEM)      \\\n    , ITEM(10)\n#define _COMMA_SEP_LIST_9(ITEM) \\\n    _COMMA_SEP_LIST_8(ITEM)     \\\n    , ITEM(9)\n#define _COMMA_SEP_LIST_8(ITEM) \\\n    _COMMA_SEP_LIST_7(ITEM)     \\\n    , ITEM(8)\n#define _COMMA_SEP_LIST_7(ITEM) \\\n    _COMMA_SEP_LIST_6(ITEM)     \\\n    , ITEM(7)\n#define _COMMA_SEP_LIST_6(ITEM) \\\n    _COMMA_SEP_LIST_5(ITEM)     \\\n    , ITEM(6)\n#define _COMMA_SEP_LIST_5(ITEM) \\\n    _COMMA_SEP_LIST_4(ITEM)     \\\n    , ITEM(5)\n#define _COMMA_SEP_LIST_4(ITEM) \\\n    _COMMA_SEP_LIST_3(ITEM)     \\\n    , ITEM(4)\n#define _COMMA_SEP_LIST_3(ITEM) \\\n    _COMMA_SEP_LIST_2(ITEM)     \\\n    , ITEM(3)\n#define _COMMA_SEP_LIST_2(ITEM) \\\n    _COMMA_SEP_LIST_1(ITEM)     \\\n    , ITEM(2)\n#define _COMMA_SEP_LIST_1(ITEM) \\\n    _COMMA_SEP_LIST_0(ITEM)     \\\n    ITEM(1)\n#define _COMMA_SEP_LIST_0(ITEM)\n</code></pre></p>"},{"location":"Godot-Source/05CommandQueueMT/#semic_sep_list","title":"SEMIC_SEP_LIST","text":"<p>SEMIC_SEP_LIST(ITEM, LENGTH)\uff1a\u200b\u7c7b\u4f3c\u200b\u5730\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5b8f\u200b\u6839\u636e\u200b\u4f20\u5165\u200b\u7684\u200b\u6574\u6570\u200bLENGTH\u200b\u548c\u200b\u53c2\u6570\u200bITEM\uff0c\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u4ee5\u5206\u200b\u53f7\u200b\u5206\u9694\u200b\u7684\u200bITEM\u200b\u5217\u8868\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5f53\u200bITEM\u200b\u4e3a\u200bY\uff0cLENGTH\u200b\u4e3a\u200b5\u200b\u65f6\u200b\uff0c\u200b\u8f93\u51fa\u200b\u4e3a\u200bY(1); Y(2); Y(3); Y(4); Y(5) <pre><code>// 1-based semicolon separated list of ITEMs\n#define SEMIC_SEP_LIST(ITEM, LENGTH) _SEMIC_SEP_LIST_##LENGTH(ITEM)\n#define _SEMIC_SEP_LIST_15(ITEM) \\\n    _SEMIC_SEP_LIST_14(ITEM);    \\\n    ITEM(15)\n#define _SEMIC_SEP_LIST_14(ITEM) \\\n    _SEMIC_SEP_LIST_13(ITEM);    \\\n    ITEM(14)\n#define _SEMIC_SEP_LIST_13(ITEM) \\\n    _SEMIC_SEP_LIST_12(ITEM);    \\\n    ITEM(13)\n#define _SEMIC_SEP_LIST_12(ITEM) \\\n    _SEMIC_SEP_LIST_11(ITEM);    \\\n    ITEM(12)\n#define _SEMIC_SEP_LIST_11(ITEM) \\\n    _SEMIC_SEP_LIST_10(ITEM);    \\\n    ITEM(11)\n#define _SEMIC_SEP_LIST_10(ITEM) \\\n    _SEMIC_SEP_LIST_9(ITEM);     \\\n    ITEM(10)\n#define _SEMIC_SEP_LIST_9(ITEM) \\\n    _SEMIC_SEP_LIST_8(ITEM);    \\\n    ITEM(9)\n#define _SEMIC_SEP_LIST_8(ITEM) \\\n    _SEMIC_SEP_LIST_7(ITEM);    \\\n    ITEM(8)\n#define _SEMIC_SEP_LIST_7(ITEM) \\\n    _SEMIC_SEP_LIST_6(ITEM);    \\\n    ITEM(7)\n#define _SEMIC_SEP_LIST_6(ITEM) \\\n    _SEMIC_SEP_LIST_5(ITEM);    \\\n    ITEM(6)\n#define _SEMIC_SEP_LIST_5(ITEM) \\\n    _SEMIC_SEP_LIST_4(ITEM);    \\\n    ITEM(5)\n#define _SEMIC_SEP_LIST_4(ITEM) \\\n    _SEMIC_SEP_LIST_3(ITEM);    \\\n    ITEM(4)\n#define _SEMIC_SEP_LIST_3(ITEM) \\\n    _SEMIC_SEP_LIST_2(ITEM);    \\\n    ITEM(3)\n#define _SEMIC_SEP_LIST_2(ITEM) \\\n    _SEMIC_SEP_LIST_1(ITEM);    \\\n    ITEM(2)\n#define _SEMIC_SEP_LIST_1(ITEM) \\\n    _SEMIC_SEP_LIST_0(ITEM)     \\\n    ITEM(1)\n#define _SEMIC_SEP_LIST_0(ITEM)\n</code></pre></p>"},{"location":"Godot-Source/05CommandQueueMT/#space_sep_list","title":"SPACE_SEP_LIST","text":"<p>SPACE_SEP_LIST(ITEM, LENGTH)\uff1a\u200b\u540c\u6837\u200b\u5730\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5b8f\u200b\u6839\u636e\u200b\u4f20\u5165\u200b\u7684\u200b\u6574\u6570\u200bLENGTH\u200b\u548c\u200b\u53c2\u6570\u200bITEM\uff0c\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u4ee5\u200b\u7a7a\u683c\u200b\u5206\u9694\u200b\u7684\u200bITEM\u200b\u5217\u8868\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5f53\u200bITEM\u200b\u4e3a\u200bZ\uff0cLENGTH\u200b\u4e3a\u200b5\u200b\u65f6\u200b\uff0c\u200b\u8f93\u51fa\u200b\u4e3a\u200bZ(1) Z(2) Z(3) Z(4) Z(5) <pre><code>// 1-based space separated list of ITEMs\n#define SPACE_SEP_LIST(ITEM, LENGTH) _SPACE_SEP_LIST_##LENGTH(ITEM)\n#define _SPACE_SEP_LIST_15(ITEM) \\\n    _SPACE_SEP_LIST_14(ITEM)     \\\n    ITEM(15)\n#define _SPACE_SEP_LIST_14(ITEM) \\\n    _SPACE_SEP_LIST_13(ITEM)     \\\n    ITEM(14)\n#define _SPACE_SEP_LIST_13(ITEM) \\\n    _SPACE_SEP_LIST_12(ITEM)     \\\n    ITEM(13)\n#define _SPACE_SEP_LIST_12(ITEM) \\\n    _SPACE_SEP_LIST_11(ITEM)     \\\n    ITEM(12)\n#define _SPACE_SEP_LIST_11(ITEM) \\\n    _SPACE_SEP_LIST_10(ITEM)     \\\n    ITEM(11)\n#define _SPACE_SEP_LIST_10(ITEM) \\\n    _SPACE_SEP_LIST_9(ITEM)      \\\n    ITEM(10)\n#define _SPACE_SEP_LIST_9(ITEM) \\\n    _SPACE_SEP_LIST_8(ITEM)     \\\n    ITEM(9)\n#define _SPACE_SEP_LIST_8(ITEM) \\\n    _SPACE_SEP_LIST_7(ITEM)     \\\n    ITEM(8)\n#define _SPACE_SEP_LIST_7(ITEM) \\\n    _SPACE_SEP_LIST_6(ITEM)     \\\n    ITEM(7)\n#define _SPACE_SEP_LIST_6(ITEM) \\\n    _SPACE_SEP_LIST_5(ITEM)     \\\n    ITEM(6)\n#define _SPACE_SEP_LIST_5(ITEM) \\\n    _SPACE_SEP_LIST_4(ITEM)     \\\n    ITEM(5)\n#define _SPACE_SEP_LIST_4(ITEM) \\\n    _SPACE_SEP_LIST_3(ITEM)     \\\n    ITEM(4)\n#define _SPACE_SEP_LIST_3(ITEM) \\\n    _SPACE_SEP_LIST_2(ITEM)     \\\n    ITEM(3)\n#define _SPACE_SEP_LIST_2(ITEM) \\\n    _SPACE_SEP_LIST_1(ITEM)     \\\n    ITEM(2)\n#define _SPACE_SEP_LIST_1(ITEM) \\\n    _SPACE_SEP_LIST_0(ITEM)     \\\n    ITEM(1)\n#define _SPACE_SEP_LIST_0(ITEM)\n</code></pre></p>"},{"location":"Godot-Source/05CommandQueueMT/#_2","title":"\u53c2\u6570\u200b\u5b8f","text":""},{"location":"Godot-Source/05CommandQueueMT/#define-argn-pnnp","title":"define ARG(N) p##N\uff1a\u200b\u8fd9\u4e2a\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u5c06\u200b\u4f20\u5165\u200b\u7684\u200b\u53c2\u6570\u200bN\u200b\u4e0e\u200b\u5b57\u7b26\u200bp\u200b\u62fc\u63a5\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u5f62\u6210\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6807\u8bc6\u7b26\u200b\u3002","text":"<p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5f53\u200bN\u200b\u4e3a\u200b2\u200b\u65f6\u200b\uff0cARG(2)\u200b\u4f1a\u200b\u88ab\u200b\u66ff\u6362\u200b\u4e3a\u200bp2 <pre><code>#define ARG(N) p##N\n</code></pre></p>"},{"location":"Godot-Source/05CommandQueueMT/#define-paramn-pn-pnnpp","title":"define PARAM(N) P##N p##N\uff1a\u200b\u8fd9\u4e2a\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u5c06\u200b\u4f20\u5165\u200b\u7684\u200b\u53c2\u6570\u200bN\u200b\u4e0e\u200b\u5b57\u7b26\u200bP\u200b\u548c\u200bp\u200b\u5206\u522b\u200b\u62fc\u63a5\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u5f62\u6210\u200b\u4e24\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6807\u8bc6\u7b26\u200b\u3002","text":"<p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5f53\u200bN\u200b\u4e3a\u200b3\u200b\u65f6\u200b\uff0cPARAM(3)\u200b\u4f1a\u200b\u88ab\u200b\u66ff\u6362\u200b\u4e3a\u200bP3 p3\u3002</p> <pre><code>#define PARAM(N) P##N p##N\n</code></pre>"},{"location":"Godot-Source/05CommandQueueMT/#define-type_paramn-class-pnnclassp","title":"define TYPE_PARAM(N) class P##N\uff1a\u200b\u8fd9\u4e2a\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u5c06\u200b\u4f20\u5165\u200b\u7684\u200b\u53c2\u6570\u200bN\u200b\u4e0e\u200b\u5173\u952e\u5b57\u200bclass\u200b\u548c\u200b\u5b57\u7b26\u200bP\u200b\u62fc\u63a5\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u5f62\u6210\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u7c7b\u578b\u200b\u53c2\u6570\u200b\u58f0\u660e\u200b\u3002","text":"<p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5f53\u200bN\u200b\u4e3a\u200b4\u200b\u65f6\u200b\uff0cTYPE_PARAM(4)\u200b\u4f1a\u200b\u88ab\u200b\u66ff\u6362\u200b\u4e3a\u200bclass P4\u3002</p> <pre><code>#define TYPE_PARAM(N) class P##N\n</code></pre> <pre><code>#define PARAM_DECL(N) typename GetSimpleTypeT&lt;P##N&gt;::type_t p##N\n</code></pre>"},{"location":"LeetCode/","title":"\u529b\u6263\u200b\u9898\u76ee","text":"<p>\u200b\u5237\u9898\u200b\u8bb0\u5f55\u200b</p>"},{"location":"LeetCode/#_2","title":"\u6570\u7ec4","text":"<ul> <li>1.\u200b\u4e24\u6570\u200b\u4e4b\u200b\u548c\u200b</li> <li>26.\u200b\u5220\u9664\u200b\u6709\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b\u91cd\u590d\u200b\u9879\u200b</li> <li>27.\u200b\u79fb\u9664\u200b\u5143\u7d20\u200b</li> <li>35.\u200b\u641c\u7d22\u200b\u63d2\u5165\u200b\u4f4d\u7f6e\u200b</li> <li>66.\u200b\u52a0\u4e00\u200b</li> <li>88.\u200b\u5408\u5e76\u200b\u4e24\u4e2a\u200b\u6709\u5e8f\u200b\u6570\u7ec4\u200b</li> <li>108.\u200b\u5c06\u200b\u6709\u5e8f\u200b\u6570\u7ec4\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u4e8c\u53c9\u200b\u641c\u7d22\u200b\u6811\u200b</li> <li>118.\u200b\u6768\u8f89\u4e09\u89d2\u200b</li> <li>119.\u200b\u6768\u8f89\u4e09\u89d2\u200b II</li> <li>121.\u200b\u4e70\u5356\u200b\u80a1\u7968\u200b\u7684\u200b\u6700\u4f73\u65f6\u673a\u200b</li> <li>136.\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b\u7684\u200b\u6570\u5b57\u200b</li> <li>169.\u200b\u591a\u6570\u200b\u5143\u7d20\u200b</li> <li>217.\u200b\u5b58\u5728\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b</li> <li>219.\u200b\u5b58\u5728\u200b\u91cd\u590d\u200b\u5143\u7d20\u200bII</li> <li>228.\u200b\u6c47\u603b\u200b\u533a\u95f4\u200b</li> <li>268.\u200b\u4e22\u5931\u200b\u7684\u200b\u6570\u5b57\u200b</li> <li>283.\u200b\u79fb\u52a8\u200b\u96f6\u200b</li> <li>303.\u200b\u533a\u57df\u200b\u548c\u200b\u68c0\u7d22\u200b-\u200b\u6570\u7ec4\u200b\u4e0d\u53ef\u200b\u53d8\u200b</li> <li>349.\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\u7684\u200b\u4ea4\u96c6\u200b</li> <li>350.\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\u7684\u200b\u4ea4\u96c6\u200bII</li> <li>414.\u200b\u7b2c\u4e09\u200b\u5927\u200b\u7684\u200b\u6570\u200b</li> <li>448.\u200b\u627e\u5230\u200b\u6240\u6709\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u6d88\u5931\u200b\u7684\u200b\u6570\u5b57\u200b</li> <li>455.\u200b\u5206\u53d1\u200b\u997c\u5e72\u200b</li> </ul>"},{"location":"LeetCode/1-twoSum/","title":"1.\u200b\u4e24\u6570\u200b\u4e4b\u200b\u548c","text":""},{"location":"LeetCode/1-twoSum/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums \u200b\u548c\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u76ee\u6807\u503c\u200b target\uff0c\u200b\u8bf7\u200b\u4f60\u200b\u5728\u200b\u8be5\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u627e\u51fa\u200b \u200b\u548c\u200b\u4e3a\u200b\u76ee\u6807\u503c\u200b target  \u200b\u7684\u200b\u90a3\u200b \u200b\u4e24\u4e2a\u200b \u200b\u6574\u6570\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u5b83\u4eec\u200b\u7684\u200b\u6570\u7ec4\u200b\u4e0b\u6807\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5047\u8bbe\u200b\u6bcf\u79cd\u200b\u8f93\u5165\u200b\u53ea\u4f1a\u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200b\u7b54\u6848\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u540c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u5728\u200b\u7b54\u6848\u200b\u91cc\u200b\u4e0d\u80fd\u200b\u91cd\u590d\u200b\u51fa\u73b0\u200b\u3002 \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6309\u200b\u4efb\u610f\u200b\u987a\u5e8f\u200b\u8fd4\u56de\u200b\u7b54\u6848\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n    \u200b\u8f93\u5165\u200b\uff1anums = [2,7,11,15], target = 9\n    \u200b\u8f93\u51fa\u200b\uff1a[0,1]\n    \u200b\u89e3\u91ca\u200b\uff1a\u200b\u56e0\u4e3a\u200b nums[0] + nums[1] == 9 \uff0c\u200b\u8fd4\u56de\u200b [0, 1] \u3002\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n    \u200b\u8f93\u5165\u200b\uff1anums = [3,2,4], target = 6\n    \u200b\u8f93\u51fa\u200b\uff1a[1,2]\n\n\u200b\u793a\u4f8b\u200b 3\uff1a\n    \u200b\u8f93\u5165\u200b\uff1anums = [3,3], target = 6\n    \u200b\u8f93\u51fa\u200b\uff1a[0,1]\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a</p> <p>2 &lt;= nums.length &lt;= 104 -109 &lt;= nums[i] &lt;= 109 -109 &lt;= target &lt;= 109 \u200b\u53ea\u4f1a\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u6709\u6548\u200b\u7b54\u6848\u200b</p> <p>\u200b\u8fdb\u9636\u200b\uff1a\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u60f3\u200b\u51fa\u200b\u4e00\u4e2a\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u5c0f\u4e8e\u200b O(n2) \u200b\u7684\u200b\u7b97\u6cd5\u200b\u5417\u200b\uff1f</p>"},{"location":"LeetCode/1-twoSum/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(N) <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;int&gt; result = {0,0};\n        std::unordered_map&lt;int,int&gt; data;\n        for(int index = 0; index &lt; nums.size(); index++){\n            int value = target - nums[index];\n            if(data.find(value) != data.end()){\n                result[0] = index;\n                result[1] = data[value];\n                break;\n            }else{\n                data[nums[index]] = index;\n            }\n        }\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/108-ConvertSortedArrayToBinarySearchTree/","title":"108.\u200b\u5c06\u200b\u6709\u5e8f\u200b\u6570\u7ec4\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u4e8c\u53c9\u200b\u641c\u7d22\u200b\u6811","text":""},{"location":"LeetCode/108-ConvertSortedArrayToBinarySearchTree/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums \uff0c\u200b\u5176\u4e2d\u200b\u5143\u7d20\u200b\u5df2\u7ecf\u200b\u6309\u200b \u200b\u5347\u5e8f\u200b \u200b\u6392\u5217\u200b\uff0c\u200b\u8bf7\u200b\u4f60\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u4e00\u68f5\u200b \u200b\u9ad8\u5ea6\u200b\u5e73\u8861\u200b \u200b\u4e8c\u53c9\u200b\u641c\u7d22\u200b\u6811\u200b\u3002</p> <p>\u200b\u9ad8\u5ea6\u200b\u5e73\u8861\u200b \u200b\u4e8c\u53c9\u6811\u200b\u662f\u200b\u4e00\u68f5\u200b\u6ee1\u8db3\u200b\u300c\u200b\u6bcf\u4e2a\u200b\u8282\u70b9\u200b\u7684\u200b\u5de6\u53f3\u4e24\u4e2a\u200b\u5b50\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u5dee\u200b\u7684\u200b\u7edd\u5bf9\u503c\u200b\u4e0d\u200b\u8d85\u8fc7\u200b 1 \u300d\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u3002</p> <p></p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [-10,-3,0,5,9]\n\u200b\u8f93\u51fa\u200b\uff1a[0,-3,9,-10,null,5]\n\u200b\u89e3\u91ca\u200b\uff1a[0,-10,5,null,-3,null,9] \u200b\u4e5f\u200b\u5c06\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u6b63\u786e\u200b\u7b54\u6848\u200b\uff1a\n</code></pre> <p></p> <pre><code>\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [1,3]\n\u200b\u8f93\u51fa\u200b\uff1a[3,1]\n\u200b\u89e3\u91ca\u200b\uff1a[1,null,3] \u200b\u548c\u200b [3,1] \u200b\u90fd\u200b\u662f\u200b\u9ad8\u5ea6\u200b\u5e73\u8861\u200b\u4e8c\u53c9\u200b\u641c\u7d22\u200b\u6811\u200b\u3002\n</code></pre> <p></p> <p>\u200b\u63d0\u793a\u200b\uff1a - 1 &lt;= nums.length &lt;= 104 - -104 &lt;= nums[i] &lt;= 104 - nums \u200b\u6309\u200b \u200b\u4e25\u683c\u200b\u9012\u589e\u200b \u200b\u987a\u5e8f\u6392\u5217\u200b</p>"},{"location":"LeetCode/108-ConvertSortedArrayToBinarySearchTree/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(N)</p> <p>\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(logn) <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\n        return buildTree(nums,0,nums.size() -1 );\n    }\n    TreeNode* buildTree(const vector&lt;int&gt; &amp;nums, int left, int right){\n        if(left &gt; right) return nullptr;\n        int mid = left + (right - left + 1) / 2; // \u200b\u662f\u5426\u200b\u52a0\u4e00\u200b\uff0c \u200b\u53d6\u51b3\u4e8e\u200b\u60f3\u200b\u4f18\u5148\u200b\u7528\u200b\u5de6\u8fb9\u200b\u8fd8\u662f\u200b\u53f3\u8fb9\u200b\u7684\u200b\u6570\u200b\n        TreeNode *root = new TreeNode(nums[mid]);\n        root-&gt;left = buildTree(nums,left, mid -1 );\n        root-&gt;right = buildTree(nums, mid + 1, right);\n        return root;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/118-Pascal%27sTriangle/","title":"118.\u200b\u6768\u8f89\u4e09\u89d2","text":""},{"location":"LeetCode/118-Pascal%27sTriangle/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u975e\u8d1f\u200b\u6574\u6570\u200b numRows\uff0c\u200b\u751f\u6210\u200b\u300c\u200b\u6768\u8f89\u4e09\u89d2\u200b\u300d\u200b\u7684\u200b\u524d\u200b numRows \u200b\u884c\u200b\u3002</p> <p>\u200b\u5728\u200b\u300c\u200b\u6768\u8f89\u4e09\u89d2\u200b\u300d\u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u6570\u662f\u200b\u5b83\u200b\u5de6\u4e0a\u65b9\u200b\u548c\u200b\u53f3\u4e0a\u65b9\u200b\u7684\u200b\u6570\u200b\u7684\u200b\u548c\u200b\u3002</p> <p></p> <pre><code>\u200b\u793a\u4f8b\u200b 1:\n\u200b\u8f93\u5165\u200b: numRows = 5\n\u200b\u8f93\u51fa\u200b: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n\n\u200b\u793a\u4f8b\u200b 2:\n\u200b\u8f93\u5165\u200b: numRows = 1\n\u200b\u8f93\u51fa\u200b: [[1]]\n</code></pre> <p>\u200b\u63d0\u793a\u200b: - 1 &lt;= numRows &lt;= 30</p>"},{"location":"LeetCode/118-Pascal%27sTriangle/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(n^2) <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generate(int numRows) {\n        vector&lt;vector&lt;int&gt;&gt; result;\n        for(int i= 0; i &lt; numRows; i++){\n            vector&lt;int&gt; tmp;\n            for(int j = 0; j &lt; i + 1; j++){\n                if(j == 0) {\n                    tmp.push_back(1);\n                }else if(j == i &amp;&amp; i !=0){\n                    tmp.push_back(1);\n                }else{\n                    tmp.push_back(result[i-1][j-1] + result[i-1][j]);\n                }\n            }\n            result.push_back(tmp);\n        }\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/119-Pascal%27sTriangleII/","title":"119.\u200b\u6768\u8f89\u4e09\u89d2\u200b II","text":""},{"location":"LeetCode/119-Pascal%27sTriangleII/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u975e\u8d1f\u200b\u7d22\u5f15\u200b rowIndex\uff0c\u200b\u8fd4\u56de\u200b\u300c\u200b\u6768\u8f89\u4e09\u89d2\u200b\u300d\u200b\u7684\u200b\u7b2c\u200b rowIndex \u200b\u884c\u200b\u3002</p> <p>\u200b\u5728\u200b\u300c\u200b\u6768\u8f89\u4e09\u89d2\u200b\u300d\u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u6570\u662f\u200b\u5b83\u200b\u5de6\u4e0a\u65b9\u200b\u548c\u200b\u53f3\u4e0a\u65b9\u200b\u7684\u200b\u6570\u200b\u7684\u200b\u548c\u200b\u3002 </p> <pre><code>\u200b\u793a\u4f8b\u200b 1:\n\u200b\u8f93\u5165\u200b: rowIndex = 3  \n\u200b\u8f93\u51fa\u200b: [1,3,3,1]\n\n\u200b\u793a\u4f8b\u200b 2:\n\u200b\u8f93\u5165\u200b: rowIndex = 0\n\u200b\u8f93\u51fa\u200b: [1]\n\n\u200b\u793a\u4f8b\u200b 3:\n\u200b\u8f93\u5165\u200b: rowIndex = 1\n\u200b\u8f93\u51fa\u200b: [1,1]\n</code></pre> <p>\u200b\u63d0\u793a\u200b: - 0 &lt;= rowIndex &lt;= 33</p> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f18\u5316\u200b\u4f60\u200b\u7684\u200b\u7b97\u6cd5\u200b\u5230\u200b O(rowIndex) \u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\u5417\u200b\uff1f</p>"},{"location":"LeetCode/119-Pascal%27sTriangleII/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(n^2) <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; getRow(int rowIndex) {\n        vector&lt;vector&lt;int&gt;&gt; result(rowIndex + 1);\n        for(int index = 0; index &lt;= rowIndex; index++){\n           result[index].resize(index + 1);\n           result[index][0] = result[index][index] = 1;\n           for(int j=1 ; j &lt; index;j++){\n                result[index][j] = result[index-1][j-1] + result[index-1][j]; \n           }\n        }\n        return result[rowIndex];\n    }\n};\n</code></pre> \u200b\u8fdb\u9636\u200b\u5199\u6cd5\u200b\uff1a <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; getRow(int rowIndex) {\n        vector&lt;int&gt; result(rowIndex + 1,1);\n\n        for(int index = 0; index &lt;= rowIndex; index++){\n            int pre = result[0];\n           for(int j=1 ; j &lt; index;j++){\n               int tmp = result[j];\n                result[j] = pre + result[j];\n                pre = tmp; \n           }\n        }\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/121-BestTimeToBuyAndSellStock/","title":"121.\u200b\u4e70\u5356\u200b\u80a1\u7968\u200b\u7684\u200b\u6700\u4f73\u65f6\u673a","text":""},{"location":"LeetCode/121-BestTimeToBuyAndSellStock/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b prices \uff0c\u200b\u5b83\u200b\u7684\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u5143\u7d20\u200b prices[i] \u200b\u8868\u793a\u200b\u4e00\u652f\u200b\u7ed9\u5b9a\u200b\u80a1\u7968\u200b\u7b2c\u200b i \u200b\u5929\u200b\u7684\u200b\u4ef7\u683c\u200b\u3002</p> <p>\u200b\u4f60\u200b\u53ea\u80fd\u200b\u9009\u62e9\u200b \u200b\u67d0\u200b\u4e00\u5929\u200b \u200b\u4e70\u5165\u200b\u8fd9\u200b\u53ea\u200b\u80a1\u7968\u200b\uff0c\u200b\u5e76\u200b\u9009\u62e9\u200b\u5728\u200b \u200b\u672a\u6765\u200b\u7684\u200b\u67d0\u200b\u4e00\u4e2a\u200b\u4e0d\u540c\u200b\u7684\u200b\u65e5\u5b50\u200b \u200b\u5356\u51fa\u200b\u8be5\u200b\u80a1\u7968\u200b\u3002\u200b\u8bbe\u8ba1\u200b\u4e00\u4e2a\u200b\u7b97\u6cd5\u200b\u6765\u200b\u8ba1\u7b97\u200b\u4f60\u200b\u6240\u80fd\u200b\u83b7\u53d6\u200b\u7684\u200b\u6700\u5927\u200b\u5229\u6da6\u200b\u3002</p> <p>\u200b\u8fd4\u56de\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u8fd9\u7b14\u200b\u4ea4\u6613\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u7684\u200b\u6700\u5927\u200b\u5229\u6da6\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u4e0d\u80fd\u200b\u83b7\u53d6\u200b\u4efb\u4f55\u200b\u5229\u6da6\u200b\uff0c\u200b\u8fd4\u56de\u200b 0 \u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1a[7,1,5,3,6,4]\n\u200b\u8f93\u51fa\u200b\uff1a5\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u5728\u200b\u7b2c\u200b 2 \u200b\u5929\u200b\uff08\u200b\u80a1\u7968\u4ef7\u683c\u200b = 1\uff09\u200b\u7684\u200b\u65f6\u5019\u200b\u4e70\u5165\u200b\uff0c\u200b\u5728\u200b\u7b2c\u200b 5 \u200b\u5929\u200b\uff08\u200b\u80a1\u7968\u4ef7\u683c\u200b = 6\uff09\u200b\u7684\u200b\u65f6\u5019\u200b\u5356\u51fa\u200b\uff0c\u200b\u6700\u5927\u200b\u5229\u6da6\u200b = 6-1 = 5 \u3002\n \u200b\u6ce8\u610f\u200b\u5229\u6da6\u200b\u4e0d\u80fd\u200b\u662f\u200b 7-1 = 6, \u200b\u56e0\u4e3a\u200b\u5356\u51fa\u200b\u4ef7\u683c\u200b\u9700\u8981\u200b\u5927\u4e8e\u200b\u4e70\u5165\u200b\u4ef7\u683c\u200b\uff1b\u200b\u540c\u65f6\u200b\uff0c\u200b\u4f60\u200b\u4e0d\u80fd\u200b\u5728\u200b\u4e70\u5165\u200b\u524d\u200b\u5356\u51fa\u200b\u80a1\u7968\u200b\u3002\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1aprices = [7,6,4,3,1]\n\u200b\u8f93\u51fa\u200b\uff1a0\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b, \u200b\u6ca1\u6709\u200b\u4ea4\u6613\u200b\u5b8c\u6210\u200b, \u200b\u6240\u4ee5\u200b\u6700\u5927\u200b\u5229\u6da6\u200b\u4e3a\u200b 0\u3002\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - 1 &lt;= prices.length &lt;= 105 - 0 &lt;= prices[i] &lt;= 104</p>"},{"location":"LeetCode/121-BestTimeToBuyAndSellStock/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N) <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int result = 0;\n        int minPrice = std::numeric_limits&lt;int&gt;::max();\n        for(int i=0; i&lt; prices.size(); i++){\n            if(prices[i] &lt; minPrice){\n                minPrice = prices[i];\n            }else if( prices[i] - minPrice &gt; result){\n                result = prices[i] - minPrice;\n            }\n        }\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/136-SingleNumber/","title":"136.\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b\u7684\u200b\u6570\u5b57","text":""},{"location":"LeetCode/136-SingleNumber/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b \u200b\u975e\u7a7a\u200b \u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums \uff0c\u200b\u9664\u4e86\u200b\u67d0\u4e2a\u200b\u5143\u7d20\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b\u4ee5\u5916\u200b\uff0c\u200b\u5176\u4f59\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u5747\u200b\u51fa\u73b0\u200b\u4e24\u6b21\u200b\u3002\u200b\u627e\u51fa\u200b\u90a3\u4e2a\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e86\u200b\u4e00\u6b21\u200b\u7684\u200b\u5143\u7d20\u200b\u3002</p> <p>\u200b\u4f60\u200b\u5fc5\u987b\u200b\u8bbe\u8ba1\u200b\u5e76\u200b\u5b9e\u73b0\u200b\u7ebf\u6027\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u7684\u200b\u7b97\u6cd5\u200b\u6765\u200b\u89e3\u51b3\u200b\u6b64\u200b\u95ee\u9898\u200b\uff0c\u200b\u4e14\u200b\u8be5\u200b\u7b97\u6cd5\u200b\u53ea\u200b\u4f7f\u7528\u200b\u5e38\u91cf\u200b\u989d\u5916\u200b\u7a7a\u95f4\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1 \uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [2,2,1]\n\u200b\u8f93\u51fa\u200b\uff1a1\n\n\u200b\u793a\u4f8b\u200b 2 \uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [4,1,2,1,2]\n\u200b\u8f93\u51fa\u200b\uff1a4\n\n\u200b\u793a\u4f8b\u200b 3 \uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [1]\n\u200b\u8f93\u51fa\u200b\uff1a1\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - 1 &lt;= nums.length &lt;= 3 * 104 - -3 * 104 &lt;= nums[i] &lt;= 3 * 104</p> <p>\u200b\u9664\u4e86\u200b\u67d0\u4e2a\u200b\u5143\u7d20\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b\u4ee5\u5916\u200b\uff0c\u200b\u5176\u4f59\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u5747\u200b\u51fa\u73b0\u200b\u4e24\u6b21\u200b\u3002</p>"},{"location":"LeetCode/136-SingleNumber/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N) <pre><code>class Solution {\npublic:\n    int singleNumber(vector&lt;int&gt;&amp; nums) {\n        int result = 0;\n        for(auto value : nums){\n            result ^= value;\n        }\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/169-MajorityElement/","title":"169.\u200b\u591a\u6570\u200b\u5143\u7d20","text":""},{"location":"LeetCode/169-MajorityElement/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u5927\u5c0f\u200b\u4e3a\u200b n \u200b\u7684\u200b\u6570\u7ec4\u200b nums \uff0c\u200b\u8fd4\u56de\u200b\u5176\u4e2d\u200b\u7684\u200b\u591a\u6570\u200b\u5143\u7d20\u200b\u3002\u200b\u591a\u6570\u200b\u5143\u7d20\u200b\u662f\u200b\u6307\u200b\u5728\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b \u200b\u5927\u4e8e\u200b \u230a n/2 \u230b \u200b\u7684\u200b\u5143\u7d20\u200b\u3002</p> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5047\u8bbe\u200b\u6570\u7ec4\u200b\u662f\u975e\u200b\u7a7a\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u6570\u7ec4\u200b\u603b\u662f\u200b\u5b58\u5728\u200b\u591a\u6570\u200b\u5143\u7d20\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [3,2,3]\n\u200b\u8f93\u51fa\u200b\uff1a3\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [2,2,1,1,1,2,2]\n\u200b\u8f93\u51fa\u200b\uff1a2\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - n == nums.length - 1 &lt;= n &lt;= 5 * 104 - -109 &lt;= nums[i] &lt;= 109</p> <p>\u200b\u8fdb\u9636\u200b\uff1a\u200b\u5c1d\u8bd5\u200b\u8bbe\u8ba1\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(n)\u3001\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(1) \u200b\u7684\u200b\u7b97\u6cd5\u200b\u89e3\u51b3\u200b\u6b64\u200b\u95ee\u9898\u200b\u3002</p>"},{"location":"LeetCode/169-MajorityElement/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N)</p>"},{"location":"LeetCode/169-MajorityElement/#_3","title":"\u54c8\u5e0c\u200b\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        int result;\n        std::unordered_map&lt;int, int&gt; data;\n        for(auto value : nums){\n            data[value]++;\n            if(data[value] &gt; nums.size() /2) result = value;\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"LeetCode/169-MajorityElement/#_4","title":"\u6392\u5e8f\u200b\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        sort(nums.begin(),nums.end());\n        return nums[nums.size() / 2];\n    }\n};\n</code></pre>"},{"location":"LeetCode/169-MajorityElement/#_5","title":"\u6295\u7968\u200b\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        int count = 0, result = 0;\n        for(auto value: nums){\n            if(value == result) count++;\n            else if(count) count--;\n            else{\n                result = value;\n                count++;\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"LeetCode/217-ContainsDuplicate/","title":"217.\u200b\u5b58\u5728\u200b\u91cd\u590d\u200b\u5143\u7d20","text":""},{"location":"LeetCode/217-ContainsDuplicate/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums \u3002\u200b\u5982\u679c\u200b\u4efb\u4e00\u200b\u503c\u200b\u5728\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u51fa\u73b0\u200b \u200b\u81f3\u5c11\u200b\u4e24\u6b21\u200b \uff0c\u200b\u8fd4\u56de\u200b true \uff1b\u200b\u5982\u679c\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u4e92\u4e0d\u200b\u76f8\u540c\u200b\uff0c\u200b\u8fd4\u56de\u200b false \u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [1,2,3,1]\n\u200b\u8f93\u51fa\u200b\uff1atrue\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [1,2,3,4]\n\u200b\u8f93\u51fa\u200b\uff1afalse\n\n\u200b\u793a\u4f8b\u200b 3\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [1,1,1,3,3,4,3,2,4,2]\n\u200b\u8f93\u51fa\u200b\uff1atrue\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - 1 &lt;= nums.length &lt;= 105 - -109 &lt;= nums[i] &lt;= 109</p>"},{"location":"LeetCode/217-ContainsDuplicate/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N) <pre><code>class Solution {\npublic:\n    bool containsDuplicate(vector&lt;int&gt;&amp; nums) {\n        std::unordered_map&lt;int,int&gt; data;\n        for(auto value : nums){\n            data[value]++;\n            if(data[value] == 2) return true;\n        }\n        return false;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/219-ContainsDuplicateII/","title":"219.\u200b\u5b58\u5728\u200b\u91cd\u590d\u200b\u5143\u7d20\u200bII","text":""},{"location":"LeetCode/219-ContainsDuplicateII/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums \u200b\u548c\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b k \uff0c\u200b\u5224\u65ad\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u4e24\u4e2a\u200b \u200b\u4e0d\u540c\u200b\u7684\u200b\u7d22\u5f15\u200b i \u200b\u548c\u200b j \uff0c\u200b\u6ee1\u8db3\u200b nums[i] == nums[j] \u200b\u4e14\u200b abs(i - j) &lt;= k \u3002\u200b\u5982\u679c\u200b\u5b58\u5728\u200b\uff0c\u200b\u8fd4\u56de\u200b true \uff1b\u200b\u5426\u5219\u200b\uff0c\u200b\u8fd4\u56de\u200b false \u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [1,2,3,1], k = 3\n\u200b\u8f93\u51fa\u200b\uff1atrue\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [1,0,1,1], k = 1\n\u200b\u8f93\u51fa\u200b\uff1atrue\n\n\u200b\u793a\u4f8b\u200b 3\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [1,2,3,1,2,3], k = 2\n\u200b\u8f93\u51fa\u200b\uff1afalse\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - 1 &lt;= nums.length &lt;= 105 - -109 &lt;= nums[i] &lt;= 109 - 0 &lt;= k &lt;= 105</p>"},{"location":"LeetCode/219-ContainsDuplicateII/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N) <pre><code>class Solution {\npublic:\n    bool containsNearbyDuplicate(vector&lt;int&gt;&amp; nums, int k) {\n        std::unordered_map&lt;int,int&gt; data;\n        for(int i =0; i &lt; nums.size(); i++){\n            if(data.count(nums[i])){\n                if(abs(i - data[nums[i]]) &lt;=k) return true;\n            }\n            data[nums[i]] = i;\n\n        }\n        return false;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/228-SummaryRanges/","title":"228.\u200b\u6c47\u603b\u200b\u533a\u95f4","text":""},{"location":"LeetCode/228-SummaryRanges/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b  \u200b\u65e0\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b \u200b\u7684\u200b \u200b\u6709\u5e8f\u200b \u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums \u3002</p> <p>\u200b\u8fd4\u56de\u200b \u200b\u6070\u597d\u200b\u8986\u76d6\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u6240\u6709\u200b\u6570\u5b57\u200b \u200b\u7684\u200b \u200b\u6700\u5c0f\u200b\u6709\u5e8f\u200b \u200b\u533a\u95f4\u200b\u8303\u56f4\u200b\u5217\u8868\u200b \u3002\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0cnums \u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u90fd\u200b\u6070\u597d\u200b\u88ab\u200b\u67d0\u4e2a\u200b\u533a\u95f4\u200b\u8303\u56f4\u200b\u6240\u200b\u8986\u76d6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e0d\u200b\u5b58\u5728\u200b\u5c5e\u4e8e\u200b\u67d0\u4e2a\u200b\u8303\u56f4\u200b\u4f46\u200b\u4e0d\u200b\u5c5e\u4e8e\u200b nums \u200b\u7684\u200b\u6570\u5b57\u200b x \u3002</p> <p>\u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u533a\u95f4\u200b\u8303\u56f4\u200b [a,b] \u200b\u5e94\u8be5\u200b\u6309\u200b\u5982\u4e0b\u200b\u683c\u5f0f\u200b\u8f93\u51fa\u200b\uff1a</p> <p>\"a-&gt;b\" \uff0c\u200b\u5982\u679c\u200b a != b \"a\" \uff0c\u200b\u5982\u679c\u200b a == b</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [0,1,2,4,5,7]\n\u200b\u8f93\u51fa\u200b\uff1a[\"0-&gt;2\",\"4-&gt;5\",\"7\"]\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u533a\u95f4\u200b\u8303\u56f4\u200b\u662f\u200b\uff1a\n[0,2] --&gt; \"0-&gt;2\"\n[4,5] --&gt; \"4-&gt;5\"\n[7,7] --&gt; \"7\"\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [0,2,3,4,6,8,9]\n\u200b\u8f93\u51fa\u200b\uff1a[\"0\",\"2-&gt;4\",\"6\",\"8-&gt;9\"]\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u533a\u95f4\u200b\u8303\u56f4\u200b\u662f\u200b\uff1a\n[0,0] --&gt; \"0\"\n[2,4] --&gt; \"2-&gt;4\"\n[6,6] --&gt; \"6\"\n[8,9] --&gt; \"8-&gt;9\"\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - 0 &lt;= nums.length &lt;= 20 - -231 &lt;= nums[i] &lt;= 231 - 1 - nums \u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u503c\u200b\u90fd\u200b \u200b\u4e92\u4e0d\u200b\u76f8\u540c\u200b - nums \u200b\u6309\u200b\u5347\u5e8f\u200b\u6392\u5217\u200b</p>"},{"location":"LeetCode/228-SummaryRanges/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N) <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; summaryRanges(vector&lt;int&gt;&amp; nums) {\n        int size = nums.size();\n        vector&lt;string&gt; result;\n        int preIndex = 0;\n        for (int j = 1; j &lt; size + 1; j++) {\n            int i = j - 1;\n            if (j == size || (long long)nums[j] - nums[i] &gt; 1) {\n                if (i == preIndex) {\n                    result.push_back(std::to_string(nums[preIndex]));\n                }\n                else {\n                    result.push_back(std::to_string(nums[preIndex]) + \"-&gt;\" + std::to_string(nums[i]));\n                }\n                preIndex = j;\n            }\n        }\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/26.-RemoveDuplicatesfromSortedArray/","title":"26.\u200b\u5220\u9664\u200b\u6709\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b\u91cd\u590d\u200b\u9879","text":""},{"location":"LeetCode/26.-RemoveDuplicatesfromSortedArray/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b \u200b\u975e\u200b\u4e25\u683c\u200b\u9012\u589e\u200b\u6392\u5217\u200b \u200b\u7684\u200b\u6570\u7ec4\u200b nums \uff0c\u200b\u8bf7\u200b\u4f60\u200b \u200b\u539f\u5730\u200b \u200b\u5220\u9664\u200b\u91cd\u590d\u200b\u51fa\u73b0\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u4f7f\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b \u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b \uff0c\u200b\u8fd4\u56de\u200b\u5220\u9664\u200b\u540e\u200b\u6570\u7ec4\u200b\u7684\u200b\u65b0\u200b\u957f\u5ea6\u200b\u3002\u200b\u5143\u7d20\u200b\u7684\u200b \u200b\u76f8\u5bf9\u200b\u987a\u5e8f\u200b \u200b\u5e94\u8be5\u200b\u4fdd\u6301\u200b \u200b\u4e00\u81f4\u200b \u3002\u200b\u7136\u540e\u200b\u8fd4\u56de\u200b nums \u200b\u4e2d\u200b\u552f\u4e00\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\u3002</p> <p>\u200b\u8003\u8651\u200b nums \u200b\u7684\u200b\u552f\u4e00\u200b\u5143\u7d20\u200b\u7684\u200b\u6570\u91cf\u200b\u4e3a\u200b k \uff0c\u200b\u4f60\u200b\u9700\u8981\u200b\u505a\u200b\u4ee5\u4e0b\u200b\u4e8b\u60c5\u200b\u786e\u4fdd\u200b\u4f60\u200b\u7684\u200b\u9898\u89e3\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u901a\u8fc7\u200b\uff1a - \u200b\u66f4\u6539\u200b\u6570\u7ec4\u200b nums \uff0c\u200b\u4f7f\u200b nums \u200b\u7684\u200b\u524d\u200b k \u200b\u4e2a\u200b\u5143\u7d20\u200b\u5305\u542b\u200b\u552f\u4e00\u200b\u5143\u7d20\u200b\uff0c\u200b\u5e76\u200b\u6309\u7167\u200b\u5b83\u4eec\u200b\u6700\u521d\u200b\u5728\u200b nums \u200b\u4e2d\u200b\u51fa\u73b0\u200b\u7684\u200b\u987a\u5e8f\u6392\u5217\u200b\u3002nums \u200b\u7684\u200b\u5176\u4f59\u200b\u5143\u7d20\u200b\u4e0e\u200b nums \u200b\u7684\u200b\u5927\u5c0f\u200b\u4e0d\u200b\u91cd\u8981\u200b\u3002 - \u200b\u8fd4\u56de\u200b k \u3002 \u200b\u5224\u9898\u200b\u6807\u51c6\u200b:</p> <p>\u200b\u7cfb\u7edf\u200b\u4f1a\u200b\u7528\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u6765\u200b\u6d4b\u8bd5\u200b\u4f60\u200b\u7684\u200b\u9898\u89e3\u200b:</p> <pre><code>int[] nums = [...]; // \u200b\u8f93\u5165\u200b\u6570\u7ec4\u200b\nint[] expectedNums = [...]; // \u200b\u957f\u5ea6\u200b\u6b63\u786e\u200b\u7684\u200b\u671f\u671b\u200b\u7b54\u6848\u200b\n\nint k = removeDuplicates(nums); // \u200b\u8c03\u7528\u200b\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</code></pre> <p>\u200b\u5982\u679c\u200b\u6240\u6709\u200b\u65ad\u8a00\u200b\u90fd\u200b\u901a\u8fc7\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u7684\u200b\u9898\u89e3\u200b\u5c06\u200b\u88ab\u200b \u200b\u901a\u8fc7\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n    \u200b\u8f93\u5165\u200b\uff1anums = [1,1,2]\n    \u200b\u8f93\u51fa\u200b\uff1a2, nums = [1,2,_]\n    \u200b\u89e3\u91ca\u200b\uff1a\u200b\u51fd\u6570\u200b\u5e94\u8be5\u200b\u8fd4\u56de\u200b\u65b0\u200b\u7684\u200b\u957f\u5ea6\u200b 2 \uff0c\u200b\u5e76\u4e14\u200b\u539f\u200b\u6570\u7ec4\u200b nums \u200b\u7684\u200b\u524d\u200b\u4e24\u4e2a\u200b\u5143\u7d20\u200b\u88ab\u200b\u4fee\u6539\u200b\u4e3a\u200b 1, 2 \u3002\u200b\u4e0d\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u8d85\u51fa\u200b\u65b0\u200b\u957f\u5ea6\u200b\u540e\u9762\u200b\u7684\u200b\u5143\u7d20\u200b\u3002\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n    \u200b\u8f93\u5165\u200b\uff1anums = [0,0,1,1,1,2,2,3,3,4]\n    \u200b\u8f93\u51fa\u200b\uff1a5, nums = [0,1,2,3,4]\n    \u200b\u89e3\u91ca\u200b\uff1a\u200b\u51fd\u6570\u200b\u5e94\u8be5\u200b\u8fd4\u56de\u200b\u65b0\u200b\u7684\u200b\u957f\u5ea6\u200b 5 \uff0c \u200b\u5e76\u4e14\u200b\u539f\u200b\u6570\u7ec4\u200b nums \u200b\u7684\u200b\u524d\u200b\u4e94\u4e2a\u200b\u5143\u7d20\u200b\u88ab\u200b\u4fee\u6539\u200b\u4e3a\u200b 0, 1, 2, 3, 4 \u3002\u200b\u4e0d\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u8d85\u51fa\u200b\u65b0\u200b\u957f\u5ea6\u200b\u540e\u9762\u200b\u7684\u200b\u5143\u7d20\u200b\u3002\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a</p> <ul> <li>1 &lt;= nums.length &lt;= 3 * 104</li> <li>-104 &lt;= nums[i] &lt;= 104</li> <li>nums \u200b\u5df2\u200b\u6309\u200b \u200b\u975e\u200b\u4e25\u683c\u200b\u9012\u589e\u200b \u200b\u6392\u5217\u200b</li> </ul>"},{"location":"LeetCode/26.-RemoveDuplicatesfromSortedArray/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(N) <pre><code>class Solution {\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) {\n        std::set&lt;int&gt; data;\n        int index =0;\n        for(int j=0; j &lt; nums.size();j++){\n            if(data.count(nums[j]) == 0){\n                data.insert(nums[j]);\n                nums[index++] = nums[j];\n            }\n        }\n        return index;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/268-MissingNumber/","title":"268.\u200b\u4e22\u5931\u200b\u7684\u200b\u6570\u5b57","text":""},{"location":"LeetCode/268-MissingNumber/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b [0, n] \u200b\u4e2d\u200b n \u200b\u4e2a\u6570\u200b\u7684\u200b\u6570\u7ec4\u200b nums \uff0c\u200b\u627e\u51fa\u200b [0, n] \u200b\u8fd9\u4e2a\u200b\u8303\u56f4\u200b\u5185\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200b\u5728\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b\u90a3\u4e2a\u200b\u6570\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [3,0,1]\n\u200b\u8f93\u51fa\u200b\uff1a2\n\u200b\u89e3\u91ca\u200b\uff1an = 3\uff0c\u200b\u56e0\u4e3a\u200b\u6709\u200b 3 \u200b\u4e2a\u200b\u6570\u5b57\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6240\u6709\u200b\u7684\u200b\u6570\u5b57\u200b\u90fd\u200b\u5728\u200b\u8303\u56f4\u200b [0,3] \u200b\u5185\u200b\u30022 \u200b\u662f\u200b\u4e22\u5931\u200b\u7684\u200b\u6570\u5b57\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200b\u5728\u200b nums \u200b\u4e2d\u200b\u3002\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [0,1]\n\u200b\u8f93\u51fa\u200b\uff1a2\n\u200b\u89e3\u91ca\u200b\uff1an = 2\uff0c\u200b\u56e0\u4e3a\u200b\u6709\u200b 2 \u200b\u4e2a\u200b\u6570\u5b57\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6240\u6709\u200b\u7684\u200b\u6570\u5b57\u200b\u90fd\u200b\u5728\u200b\u8303\u56f4\u200b [0,2] \u200b\u5185\u200b\u30022 \u200b\u662f\u200b\u4e22\u5931\u200b\u7684\u200b\u6570\u5b57\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200b\u5728\u200b nums \u200b\u4e2d\u200b\u3002\n\n\u200b\u793a\u4f8b\u200b 3\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [9,6,4,2,3,5,7,0,1]\n\u200b\u8f93\u51fa\u200b\uff1a8\n\u200b\u89e3\u91ca\u200b\uff1an = 9\uff0c\u200b\u56e0\u4e3a\u200b\u6709\u200b 9 \u200b\u4e2a\u200b\u6570\u5b57\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6240\u6709\u200b\u7684\u200b\u6570\u5b57\u200b\u90fd\u200b\u5728\u200b\u8303\u56f4\u200b [0,9] \u200b\u5185\u200b\u30028 \u200b\u662f\u200b\u4e22\u5931\u200b\u7684\u200b\u6570\u5b57\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200b\u5728\u200b nums \u200b\u4e2d\u200b\u3002\n\n\u200b\u793a\u4f8b\u200b 4\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [0]\n\u200b\u8f93\u51fa\u200b\uff1a1\n\u200b\u89e3\u91ca\u200b\uff1an = 1\uff0c\u200b\u56e0\u4e3a\u200b\u6709\u200b 1 \u200b\u4e2a\u200b\u6570\u5b57\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6240\u6709\u200b\u7684\u200b\u6570\u5b57\u200b\u90fd\u200b\u5728\u200b\u8303\u56f4\u200b [0,1] \u200b\u5185\u200b\u30021 \u200b\u662f\u200b\u4e22\u5931\u200b\u7684\u200b\u6570\u5b57\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200b\u5728\u200b nums \u200b\u4e2d\u200b\u3002\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - n == nums.length - 1 &lt;= n &lt;= 104 - 0 &lt;= nums[i] &lt;= n - nums \u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u6570\u5b57\u200b\u90fd\u200b \u200b\u72ec\u4e00\u65e0\u4e8c\u200b</p> <p>\u200b\u8fdb\u9636\u200b\uff1a\u200b\u4f60\u200b\u80fd\u5426\u200b\u5b9e\u73b0\u200b\u7ebf\u6027\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u3001\u200b\u4ec5\u200b\u4f7f\u7528\u200b\u989d\u5916\u200b\u5e38\u6570\u200b\u7a7a\u95f4\u200b\u7684\u200b\u7b97\u6cd5\u200b\u89e3\u51b3\u200b\u6b64\u200b\u95ee\u9898\u200b?</p>"},{"location":"LeetCode/268-MissingNumber/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N) <pre><code>class Solution {\npublic:\n    int missingNumber(vector&lt;int&gt;&amp; nums) {\n        int size = nums.size();\n        int sum = (size + 1) * size / 2;\n        for(auto value : nums){\n            sum -= value;\n        }\n        return sum;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/27-RemoveElement/","title":"27.\u200b\u79fb\u9664\u200b\u5143\u7d20","text":""},{"location":"LeetCode/27-RemoveElement/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b nums \u200b\u548c\u200b\u4e00\u4e2a\u200b\u503c\u200b val\uff0c\u200b\u4f60\u200b\u9700\u8981\u200b \u200b\u539f\u5730\u200b \u200b\u79fb\u9664\u200b\u6240\u6709\u200b\u6570\u503c\u200b\u7b49\u4e8e\u200b val \u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u79fb\u9664\u200b\u540e\u200b\u6570\u7ec4\u200b\u7684\u200b\u65b0\u200b\u957f\u5ea6\u200b\u3002\u200b\u4e0d\u8981\u200b\u4f7f\u7528\u200b\u989d\u5916\u200b\u7684\u200b\u6570\u7ec4\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u4f60\u200b\u5fc5\u987b\u200b\u4ec5\u200b\u4f7f\u7528\u200b O(1) \u200b\u989d\u5916\u200b\u7a7a\u95f4\u200b\u5e76\u200b \u200b\u539f\u5730\u200b \u200b\u4fee\u6539\u200b\u8f93\u5165\u200b\u6570\u7ec4\u200b\u3002\u200b\u5143\u7d20\u200b\u7684\u200b\u987a\u5e8f\u200b\u53ef\u4ee5\u200b\u6539\u53d8\u200b\u3002\u200b\u4f60\u200b\u4e0d\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u8d85\u51fa\u200b\u65b0\u200b\u957f\u5ea6\u200b\u540e\u9762\u200b\u7684\u200b\u5143\u7d20\u200b\u3002</p> <p>\u200b\u8bf4\u660e\u200b:</p> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u8fd4\u56de\u200b\u6570\u503c\u200b\u662f\u200b\u6574\u6570\u200b\uff0c\u200b\u4f46\u200b\u8f93\u51fa\u200b\u7684\u200b\u7b54\u6848\u200b\u662f\u200b\u6570\u7ec4\u200b\u5462\u200b?</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8f93\u5165\u200b\u6570\u7ec4\u200b\u662f\u200b\u4ee5\u200b\u300c\u200b\u5f15\u7528\u200b\u300d\u200b\u65b9\u5f0f\u200b\u4f20\u9012\u200b\u7684\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u5728\u200b\u51fd\u6570\u200b\u91cc\u200b\u4fee\u6539\u200b\u8f93\u5165\u200b\u6570\u7ec4\u200b\u5bf9\u4e8e\u200b\u8c03\u7528\u8005\u200b\u662f\u200b\u53ef\u89c1\u200b\u7684\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u60f3\u8c61\u200b\u5185\u90e8\u200b\u64cd\u4f5c\u200b\u5982\u4e0b\u200b:</p> <pre><code>// nums \u200b\u662f\u200b\u4ee5\u200b\u201c\u200b\u5f15\u7528\u200b\u201d\u200b\u65b9\u5f0f\u200b\u4f20\u9012\u200b\u7684\u200b\u3002\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0c\u200b\u4e0d\u200b\u5bf9\u200b\u5b9e\u53c2\u200b\u4f5c\u200b\u4efb\u4f55\u200b\u62f7\u8d1d\u200b\nint len = removeElement(nums, val);\n\n// \u200b\u5728\u200b\u51fd\u6570\u200b\u91cc\u200b\u4fee\u6539\u200b\u8f93\u5165\u200b\u6570\u7ec4\u200b\u5bf9\u4e8e\u200b\u8c03\u7528\u8005\u200b\u662f\u200b\u53ef\u89c1\u200b\u7684\u200b\u3002\n// \u200b\u6839\u636e\u200b\u4f60\u200b\u7684\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u7684\u200b\u957f\u5ea6\u200b, \u200b\u5b83\u4f1a\u200b\u6253\u5370\u200b\u51fa\u200b\u6570\u7ec4\u200b\u4e2d\u200b \u200b\u8be5\u200b\u957f\u5ea6\u200b\u8303\u56f4\u200b\u5185\u200b \u200b\u7684\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\u3002\nfor (int i = 0; i &lt; len; i++) {\n    print(nums[i]);\n}\n\n\n\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [3,2,2,3], val = 3\n\u200b\u8f93\u51fa\u200b\uff1a2, nums = [2,2]\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u51fd\u6570\u200b\u5e94\u8be5\u200b\u8fd4\u56de\u200b\u65b0\u200b\u7684\u200b\u957f\u5ea6\u200b 2, \u200b\u5e76\u4e14\u200b nums \u200b\u4e2d\u200b\u7684\u200b\u524d\u200b\u4e24\u4e2a\u200b\u5143\u7d20\u200b\u5747\u200b\u4e3a\u200b 2\u3002\u200b\u4f60\u200b\u4e0d\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u8d85\u51fa\u200b\u65b0\u200b\u957f\u5ea6\u200b\u540e\u9762\u200b\u7684\u200b\u5143\u7d20\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u7684\u200b\u65b0\u200b\u957f\u5ea6\u200b\u4e3a\u200b 2 \uff0c\u200b\u800c\u200b nums = [2,2,3,3] \u200b\u6216\u200b nums = [2,2,0,0]\uff0c\u200b\u4e5f\u200b\u4f1a\u200b\u88ab\u200b\u89c6\u4f5c\u200b\u6b63\u786e\u200b\u7b54\u6848\u200b\u3002\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [0,1,2,2,3,0,4,2], val = 2\n\u200b\u8f93\u51fa\u200b\uff1a5, nums = [0,1,3,0,4]\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u51fd\u6570\u200b\u5e94\u8be5\u200b\u8fd4\u56de\u200b\u65b0\u200b\u7684\u200b\u957f\u5ea6\u200b 5, \u200b\u5e76\u4e14\u200b nums \u200b\u4e2d\u200b\u7684\u200b\u524d\u200b\u4e94\u4e2a\u200b\u5143\u7d20\u200b\u4e3a\u200b 0, 1, 3, 0, 4\u3002\u200b\u6ce8\u610f\u200b\u8fd9\u200b\u4e94\u4e2a\u200b\u5143\u7d20\u200b\u53ef\u200b\u4e3a\u200b\u4efb\u610f\u200b\u987a\u5e8f\u200b\u3002\u200b\u4f60\u200b\u4e0d\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u8d85\u51fa\u200b\u65b0\u200b\u957f\u5ea6\u200b\u540e\u9762\u200b\u7684\u200b\u5143\u7d20\u200b\u3002\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - 0 &lt;= nums.length &lt;= 100 - 0 &lt;= nums[i] &lt;= 50 - 0 &lt;= val &lt;= 100</p>"},{"location":"LeetCode/27-RemoveElement/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N) <pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        int length = 0;\n        for(int j=0; j &lt; nums.size();j++){\n            if(nums[j] == val) continue;\n            nums[length++] = nums[j];\n        }\n        return length;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/283-MoveZeroes/","title":"283.\u200b\u79fb\u52a8\u200b\u96f6","text":""},{"location":"LeetCode/283-MoveZeroes/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b nums\uff0c\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u5c06\u200b\u6240\u6709\u200b 0 \u200b\u79fb\u52a8\u200b\u5230\u200b\u6570\u7ec4\u200b\u7684\u200b\u672b\u5c3e\u200b\uff0c\u200b\u540c\u65f6\u200b\u4fdd\u6301\u200b\u975e\u96f6\u200b\u5143\u7d20\u200b\u7684\u200b\u76f8\u5bf9\u200b\u987a\u5e8f\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b \uff0c\u200b\u5fc5\u987b\u200b\u5728\u200b\u4e0d\u200b\u590d\u5236\u200b\u6570\u7ec4\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u539f\u5730\u200b\u5bf9\u200b\u6570\u7ec4\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1:\n\u200b\u8f93\u5165\u200b: nums = [0,1,0,3,12]\n\u200b\u8f93\u51fa\u200b: [1,3,12,0,0]\n\n\u200b\u793a\u4f8b\u200b 2:\n\u200b\u8f93\u5165\u200b: nums = [0]\n\u200b\u8f93\u51fa\u200b: [0]\n</code></pre> <p>\u200b\u63d0\u793a\u200b:</p> <ul> <li>1 &lt;= nums.length &lt;= 104</li> <li>-231 &lt;= nums[i] &lt;= 231 - 1</li> </ul> <p>\u200b\u8fdb\u9636\u200b\uff1a\u200b\u4f60\u200b\u80fd\u200b\u5c3d\u91cf\u51cf\u5c11\u200b\u5b8c\u6210\u200b\u7684\u200b\u64cd\u4f5c\u200b\u6b21\u6570\u200b\u5417\u200b\uff1f</p>"},{"location":"LeetCode/283-MoveZeroes/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N) <pre><code>class Solution {\npublic:\n    void moveZeroes(vector&lt;int&gt;&amp; nums) {\n        int n =nums.size(), left =0,right =0;\n        while(right &lt; n){\n            if(nums[right]){\n                swap(nums[left],nums[right]);\n                left++;\n            }\n            right++;\n        }\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/303-RangeSumQuery-Immutable/","title":"303.\u200b\u533a\u57df\u200b\u548c\u200b\u68c0\u7d22\u200b-\u200b\u6570\u7ec4\u200b\u4e0d\u53ef\u200b\u53d8","text":""},{"location":"LeetCode/303-RangeSumQuery-Immutable/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b  nums\uff0c\u200b\u5904\u7406\u200b\u4ee5\u4e0b\u200b\u7c7b\u578b\u200b\u7684\u200b\u591a\u4e2a\u200b\u67e5\u8be2\u200b:</p> <p>\u200b\u8ba1\u7b97\u200b\u7d22\u5f15\u200b left \u200b\u548c\u200b right \uff08\u200b\u5305\u542b\u200b left \u200b\u548c\u200b right\uff09\u200b\u4e4b\u95f4\u200b\u7684\u200b nums \u200b\u5143\u7d20\u200b\u7684\u200b \u200b\u548c\u200b \uff0c\u200b\u5176\u4e2d\u200b left &lt;= right \u200b\u5b9e\u73b0\u200b NumArray \u200b\u7c7b\u200b\uff1a</p> <p>NumArray(int[] nums) \u200b\u4f7f\u7528\u200b\u6570\u7ec4\u200b nums \u200b\u521d\u59cb\u5316\u200b\u5bf9\u8c61\u200b int sumRange(int i, int j) \u200b\u8fd4\u56de\u200b\u6570\u7ec4\u200b nums \u200b\u4e2d\u200b\u7d22\u5f15\u200b left \u200b\u548c\u200b right \u200b\u4e4b\u95f4\u200b\u7684\u200b\u5143\u7d20\u200b\u7684\u200b \u200b\u603b\u548c\u200b \uff0c\u200b\u5305\u542b\u200b left \u200b\u548c\u200b right \u200b\u4e24\u70b9\u200b\uff08\u200b\u4e5f\u200b\u5c31\u662f\u200b nums[left] + nums[left + 1] + ... + nums[right] )</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1a\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n\u200b\u8f93\u51fa\u200b\uff1a\n[null, 1, -1, -3]\n\n\u200b\u89e3\u91ca\u200b\uff1a\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)\nnumArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) \nnumArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a</p> <p>1 &lt;= nums.length &lt;= 104</p> <p>-105 &lt;= nums[i] &lt;= 105</p> <p>0 &lt;= i &lt;= j &lt; nums.length</p> <p>\u200b\u6700\u200b\u591a\u200b\u8c03\u7528\u200b 104 \u200b\u6b21\u200b sumRange \u200b\u65b9\u6cd5\u200b</p>"},{"location":"LeetCode/303-RangeSumQuery-Immutable/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(N) </p> <p>\u200b\u68c0\u7d22\u200b\u7684\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(1) <pre><code>class NumArray {\n    vector&lt;int&gt; data;\npublic:\n    NumArray(vector&lt;int&gt;&amp; nums) {\n        int result =0;\n        data.push_back(result);\n        for(int i = 0; i &lt; nums.size(); i++){\n            result += nums[i];\n            data.push_back(result);\n        }\n    }\n\n    int sumRange(int left, int right) {       \n        return data[right+1] - data[left];\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/349-IntersectionofTwoArrays/","title":"349.\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\u7684\u200b\u4ea4\u96c6","text":""},{"location":"LeetCode/349-IntersectionofTwoArrays/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b nums1 \u200b\u548c\u200b nums2 \uff0c\u200b\u8fd4\u56de\u200b \u200b\u5b83\u4eec\u200b\u7684\u200b\u4ea4\u96c6\u200b \u3002\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u4e00\u5b9a\u200b\u662f\u200b \u200b\u552f\u4e00\u200b \u200b\u7684\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b \u200b\u4e0d\u200b\u8003\u8651\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u7684\u200b\u987a\u5e8f\u200b \u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums1 = [1,2,2,1], nums2 = [2,2]\n\u200b\u8f93\u51fa\u200b\uff1a[2]\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums1 = [4,9,5], nums2 = [9,4,9,8,4]\n\u200b\u8f93\u51fa\u200b\uff1a[9,4]\n\u200b\u89e3\u91ca\u200b\uff1a[4,9] \u200b\u4e5f\u200b\u662f\u200b\u53ef\u200b\u901a\u8fc7\u200b\u7684\u200b\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a</p> <p>1 &lt;= nums1.length, nums2.length &lt;= 1000</p> <p>0 &lt;= nums1[i], nums2[i] &lt;= 1000</p>"},{"location":"LeetCode/349-IntersectionofTwoArrays/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(m * n) <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        vector&lt;int&gt; result;\n        for(auto left : nums1){\n            for(auto right : nums2){\n                if(left == right &amp;&amp; find(result.begin(),result.end(),left) == result.end()){\n                    result.push_back(left);\n                }\n            }\n        }\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/35-SearchInsertPosition/","title":"35.\u200b\u641c\u7d22\u200b\u63d2\u5165\u200b\u4f4d\u7f6e","text":""},{"location":"LeetCode/35-SearchInsertPosition/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u548c\u200b\u4e00\u4e2a\u200b\u76ee\u6807\u503c\u200b\uff0c\u200b\u5728\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u627e\u5230\u200b\u76ee\u6807\u503c\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u5176\u200b\u7d22\u5f15\u200b\u3002\u200b\u5982\u679c\u200b\u76ee\u6807\u503c\u200b\u4e0d\u200b\u5b58\u5728\u200b\u4e8e\u200b\u6570\u7ec4\u200b\u4e2d\u200b\uff0c\u200b\u8fd4\u56de\u200b\u5b83\u200b\u5c06\u200b\u4f1a\u200b\u88ab\u200b\u6309\u200b\u987a\u5e8f\u200b\u63d2\u5165\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(log n) \u200b\u7684\u200b\u7b97\u6cd5\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1:\n    \u200b\u8f93\u5165\u200b: nums = [1,3,5,6], target = 5\n    \u200b\u8f93\u51fa\u200b: 2\n\n\u200b\u793a\u4f8b\u200b 2:\n    \u200b\u8f93\u5165\u200b: nums = [1,3,5,6], target = 2\n    \u200b\u8f93\u51fa\u200b: 1\n\n\u200b\u793a\u4f8b\u200b 3:\n    \u200b\u8f93\u5165\u200b: nums = [1,3,5,6], target = 7\n\u200b\u8f93\u51fa\u200b: 4\n</code></pre> <p>\u200b\u63d0\u793a\u200b: - 1 &lt;= nums.length &lt;= 104 - -104 &lt;= nums[i] &lt;= 104 - nums \u200b\u4e3a\u200b \u200b\u65e0\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b \u200b\u7684\u200b \u200b\u5347\u5e8f\u200b \u200b\u6392\u5217\u200b\u6570\u7ec4\u200b - -104 &lt;= target &lt;= 104</p>"},{"location":"LeetCode/35-SearchInsertPosition/#_2","title":"\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) {\n        int pre = 0, end = nums.size();\n        while(pre &lt; end){\n            int mid = pre + (end - pre) / 2;\n            if(nums[mid] &lt; target){\n                pre = mid + 1;\n            }else if(nums[mid] == target) return mid;\n            else{\n                end = mid;\n            }\n        }\n        return pre;\n    }\n};\n</code></pre>"},{"location":"LeetCode/350-IntersectionofTwoArraysII/","title":"350.\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\u7684\u200b\u4ea4\u96c6\u200b II","text":""},{"location":"LeetCode/350-IntersectionofTwoArraysII/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e24\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums1 \u200b\u548c\u200b nums2 \uff0c\u200b\u8bf7\u200b\u4f60\u200b\u4ee5\u200b\u6570\u7ec4\u200b\u5f62\u5f0f\u200b\u8fd4\u56de\u200b\u4e24\u200b\u6570\u7ec4\u200b\u7684\u200b\u4ea4\u96c6\u200b\u3002\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u4e2d\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u51fa\u73b0\u200b\u7684\u200b\u6b21\u6570\u200b\uff0c\u200b\u5e94\u200b\u4e0e\u200b\u5143\u7d20\u200b\u5728\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u90fd\u200b\u51fa\u73b0\u200b\u7684\u200b\u6b21\u6570\u200b\u4e00\u81f4\u200b\uff08\u200b\u5982\u679c\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b\u4e0d\u200b\u4e00\u81f4\u200b\uff0c\u200b\u5219\u200b\u8003\u8651\u200b\u53d6\u8f83\u200b\u5c0f\u503c\u200b\uff09\u3002\u200b\u53ef\u4ee5\u200b\u4e0d\u200b\u8003\u8651\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u7684\u200b\u987a\u5e8f\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums1 = [1,2,2,1], nums2 = [2,2]\n\u200b\u8f93\u51fa\u200b\uff1a[2,2]\n\n\u200b\u793a\u4f8b\u200b 2:\n\u200b\u8f93\u5165\u200b\uff1anums1 = [4,9,5], nums2 = [9,4,9,8,4]\n\u200b\u8f93\u51fa\u200b\uff1a[4,9]\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a</p> <p>1 &lt;= nums1.length, nums2.length &lt;= 1000 0 &lt;= nums1[i], nums2[i] &lt;= 1000</p> <p>\u200b\u8fdb\u9636\u200b\uff1a</p> <p>\u200b\u5982\u679c\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u6570\u7ec4\u200b\u5df2\u7ecf\u200b\u6392\u597d\u5e8f\u200b\u5462\u200b\uff1f\u200b\u4f60\u200b\u5c06\u200b\u5982\u4f55\u200b\u4f18\u5316\u200b\u4f60\u200b\u7684\u200b\u7b97\u6cd5\u200b\uff1f</p> <p>\u200b\u5982\u679c\u200b nums1 \u200b\u7684\u200b\u5927\u5c0f\u200b\u6bd4\u200b nums2 \u200b\u5c0f\u200b\uff0c\u200b\u54ea\u200b\u79cd\u200b\u65b9\u6cd5\u200b\u66f4\u4f18\u200b\uff1f</p> <p>\u200b\u5982\u679c\u200b nums2 \u200b\u7684\u200b\u5143\u7d20\u200b\u5b58\u50a8\u200b\u5728\u200b\u78c1\u76d8\u200b\u4e0a\u200b\uff0c\u200b\u5185\u5b58\u200b\u662f\u200b\u6709\u9650\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4f60\u200b\u4e0d\u80fd\u200b\u4e00\u6b21\u200b\u52a0\u8f7d\u200b\u6240\u6709\u200b\u7684\u200b\u5143\u7d20\u200b\u5230\u200b\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u8be5\u200b\u600e\u4e48\u529e\u200b\uff1f</p>"},{"location":"LeetCode/350-IntersectionofTwoArraysII/#_2","title":"\u7b54\u6848","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        sort(nums1.begin(),nums1.end());\n        sort(nums2.begin(),nums2.end());\n        vector&lt;int&gt; result;\n        set_intersection(nums1.begin(),nums1.end(),nums2.begin(),nums2.end(), insert_iterator&lt;vector&lt;int&gt;&gt;(result,result.begin()));\n        return result;\n    }\n};\n</code></pre>"},{"location":"LeetCode/414-ThirdMaximumNumber/","title":"414.\u200b\u7b2c\u4e09\u200b\u5927\u200b\u7684\u200b\u6570","text":""},{"location":"LeetCode/414-ThirdMaximumNumber/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u975e\u7a7a\u200b\u6570\u7ec4\u200b\uff0c\u200b\u8fd4\u56de\u200b\u6b64\u200b\u6570\u7ec4\u200b\u4e2d\u200b \u200b\u7b2c\u4e09\u200b\u5927\u200b\u7684\u200b\u6570\u200b \u3002\u200b\u5982\u679c\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u6700\u5927\u200b\u7684\u200b\u6570\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1a[3, 2, 1]\n\u200b\u8f93\u51fa\u200b\uff1a1\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u7b2c\u4e09\u200b\u5927\u200b\u7684\u200b\u6570\u662f\u200b 1 \u3002\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1a[1, 2]\n\u200b\u8f93\u51fa\u200b\uff1a2\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u7b2c\u4e09\u200b\u5927\u200b\u7684\u200b\u6570\u200b\u4e0d\u200b\u5b58\u5728\u200b, \u200b\u6240\u4ee5\u200b\u8fd4\u56de\u200b\u6700\u5927\u200b\u7684\u200b\u6570\u200b 2 \u3002\n\n\u200b\u793a\u4f8b\u200b 3\uff1a\n\u200b\u8f93\u5165\u200b\uff1a[2, 2, 3, 1]\n\u200b\u8f93\u51fa\u200b\uff1a1\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8981\u6c42\u200b\u8fd4\u56de\u200b\u7b2c\u4e09\u200b\u5927\u200b\u7684\u200b\u6570\u200b\uff0c\u200b\u662f\u200b\u6307\u200b\u5728\u200b\u6240\u6709\u200b\u4e0d\u540c\u200b\u6570\u5b57\u200b\u4e2d\u6392\u200b\u7b2c\u4e09\u200b\u5927\u200b\u7684\u200b\u6570\u200b\u3002\n\u200b\u6b64\u200b \u200b\u4f8b\u4e2d\u200b\u5b58\u5728\u200b\u4e24\u4e2a\u200b\u503c\u4e3a\u200b 2 \u200b\u7684\u200b\u6570\u200b\uff0c\u200b\u5b83\u4eec\u200b\u90fd\u200b\u6392\u200b\u7b2c\u4e8c\u200b\u3002\u200b\u5728\u200b\u6240\u6709\u200b\u4e0d\u540c\u200b\u6570\u5b57\u200b\u4e2d\u6392\u200b\u7b2c\u4e09\u200b\u5927\u200b\u7684\u200b\u6570\u4e3a\u200b 1 \u3002\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a</p> <p>1 &lt;= nums.length &lt;= 104</p> <p>-231 &lt;= nums[i] &lt;= 231 - 1</p> <p>\u200b\u8fdb\u9636\u200b\uff1a\u200b\u4f60\u200b\u80fd\u200b\u8bbe\u8ba1\u200b\u4e00\u4e2a\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b O(n) \u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u5417\u200b\uff1f</p>"},{"location":"LeetCode/414-ThirdMaximumNumber/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(N) <pre><code>class Solution {\npublic:\n    int thirdMax(vector&lt;int&gt;&amp; nums) {\n        set&lt;int&gt; data(nums.begin(),nums.end());\n        int first =  numeric_limits&lt;int&gt;::min();\n        int second = numeric_limits&lt;int&gt;::min();\n        int third =numeric_limits&lt;int&gt;::min();\n        for(auto value : data){\n            if( value &gt; first){\n                third = second;\n                second = first;\n                first = value;\n            }else if(value &gt; second){\n                third = second;\n                second = value;\n            }else if( value &gt; third){\n                third = value;\n            }\n\n        } \n        if(data.size() &lt; 3) return first;\n        return third;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/448-FindAllNumbersDisappearedInAnArray/","title":"448.\u200b\u627e\u5230\u200b\u6240\u6709\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u6d88\u5931\u200b\u7684\u200b\u6570\u5b57","text":""},{"location":"LeetCode/448-FindAllNumbersDisappearedInAnArray/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u542b\u200b n \u200b\u4e2a\u200b\u6574\u6570\u200b\u7684\u200b\u6570\u7ec4\u200b nums \uff0c\u200b\u5176\u4e2d\u200b nums[i] \u200b\u5728\u200b\u533a\u95f4\u200b [1, n] \u200b\u5185\u200b\u3002\u200b\u8bf7\u200b\u4f60\u200b\u627e\u51fa\u200b\u6240\u6709\u200b\u5728\u200b [1, n] \u200b\u8303\u56f4\u200b\u5185\u200b\u4f46\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200b\u5728\u200b nums \u200b\u4e2d\u200b\u7684\u200b\u6570\u5b57\u200b\uff0c\u200b\u5e76\u200b\u4ee5\u200b\u6570\u7ec4\u200b\u7684\u200b\u5f62\u5f0f\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [4,3,2,7,8,2,3,1]\n\u200b\u8f93\u51fa\u200b\uff1a[5,6]\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums = [1,1]\n\u200b\u8f93\u51fa\u200b\uff1a[2]\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a</p> <p>n == nums.length</p> <p>1 &lt;= n &lt;= 105</p> <p>1 &lt;= nums[i] &lt;= n</p> <p>\u200b\u8fdb\u9636\u200b\uff1a\u200b\u4f60\u200b\u80fd\u200b\u5728\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u989d\u5916\u200b\u7a7a\u95f4\u200b\u4e14\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(n) \u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u89e3\u51b3\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u5417\u200b? \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5047\u5b9a\u200b\u8fd4\u56de\u200b\u7684\u200b\u6570\u7ec4\u200b\u4e0d\u7b97\u200b\u5728\u200b\u989d\u5916\u200b\u7a7a\u95f4\u200b\u5185\u200b\u3002</p>"},{"location":"LeetCode/448-FindAllNumbersDisappearedInAnArray/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(N) <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findDisappearedNumbers(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; result;\n        int size = nums.size();\n        for(auto value : nums){\n            int index = (value - 1) % size;\n            nums[index] += size;\n        }\n\n        for(int i = 0; i &lt; size; i++){\n            if(nums[i] &lt;= size){\n                result.push_back(i + 1);\n            }\n        }\n\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/455-AssignCookies/","title":"455.\u200b\u5206\u53d1\u200b\u997c\u5e72","text":""},{"location":"LeetCode/455-AssignCookies/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u5047\u8bbe\u200b\u4f60\u200b\u662f\u200b\u4e00\u4f4d\u200b\u5f88\u68d2\u200b\u7684\u200b\u5bb6\u957f\u200b\uff0c\u200b\u60f3\u8981\u200b\u7ed9\u200b\u4f60\u200b\u7684\u200b\u5b69\u5b50\u200b\u4eec\u200b\u4e00\u4e9b\u200b\u5c0f\u200b\u997c\u5e72\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5b69\u5b50\u200b\u6700\u200b\u591a\u200b\u53ea\u80fd\u200b\u7ed9\u200b\u4e00\u5757\u200b\u997c\u5e72\u200b\u3002</p> <p>\u200b\u5bf9\u200b\u6bcf\u4e2a\u200b\u5b69\u5b50\u200b i\uff0c\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u80c3\u53e3\u200b\u503c\u200b g[i]\uff0c\u200b\u8fd9\u200b\u662f\u200b\u80fd\u200b\u8ba9\u200b\u5b69\u5b50\u200b\u4eec\u200b\u6ee1\u8db3\u200b\u80c3\u53e3\u200b\u7684\u200b\u997c\u5e72\u200b\u7684\u200b\u6700\u5c0f\u200b\u5c3a\u5bf8\u200b\uff1b\u200b\u5e76\u4e14\u200b\u6bcf\u5757\u200b\u997c\u5e72\u200b j\uff0c\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5c3a\u5bf8\u200b s[j] \u3002\u200b\u5982\u679c\u200b s[j] &gt;= g[i]\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u8fd9\u4e2a\u200b\u997c\u5e72\u200b j \u200b\u5206\u914d\u200b\u7ed9\u200b\u5b69\u5b50\u200b i \uff0c\u200b\u8fd9\u4e2a\u200b\u5b69\u5b50\u200b\u4f1a\u200b\u5f97\u5230\u200b\u6ee1\u8db3\u200b\u3002\u200b\u4f60\u200b\u7684\u200b\u76ee\u6807\u200b\u662f\u200b\u5c3d\u53ef\u80fd\u200b\u6ee1\u8db3\u200b\u8d8a\u200b\u591a\u200b\u6570\u91cf\u200b\u7684\u200b\u5b69\u5b50\u200b\uff0c\u200b\u5e76\u200b\u8f93\u51fa\u200b\u8fd9\u4e2a\u200b\u6700\u5927\u200b\u6570\u503c\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1:\n\u200b\u8f93\u5165\u200b: g = [1,2,3], s = [1,1]\n\u200b\u8f93\u51fa\u200b: 1\n\u200b\u89e3\u91ca\u200b: \n\u200b\u4f60\u200b\u6709\u200b\u4e09\u4e2a\u200b\u5b69\u5b50\u200b\u548c\u200b\u4e24\u5757\u200b\u5c0f\u200b\u997c\u5e72\u200b\uff0c3\u200b\u4e2a\u200b\u5b69\u5b50\u200b\u7684\u200b\u80c3\u53e3\u200b\u503c\u200b\u5206\u522b\u200b\u662f\u200b\uff1a1,2,3\u3002\n\u200b\u867d\u7136\u200b\u4f60\u200b\u6709\u200b\u4e24\u5757\u200b\u5c0f\u200b\u997c\u5e72\u200b\uff0c\u200b\u7531\u4e8e\u200b\u4ed6\u4eec\u200b\u7684\u200b\u5c3a\u5bf8\u200b\u90fd\u200b\u662f\u200b1\uff0c\u200b\u4f60\u200b\u53ea\u80fd\u200b\u8ba9\u200b\u80c3\u53e3\u200b\u503c\u200b\u662f\u200b1\u200b\u7684\u200b\u5b69\u5b50\u200b\u6ee1\u8db3\u200b\u3002\n\u200b\u6240\u4ee5\u200b\u4f60\u200b\u5e94\u8be5\u200b\u8f93\u51fa\u200b1\u3002\n\n\u200b\u793a\u4f8b\u200b 2:\n\u200b\u8f93\u5165\u200b: g = [1,2], s = [1,2,3]\n\u200b\u8f93\u51fa\u200b: 2\n\u200b\u89e3\u91ca\u200b: \n\u200b\u4f60\u200b\u6709\u200b\u4e24\u4e2a\u200b\u5b69\u5b50\u200b\u548c\u200b\u4e09\u5757\u200b\u5c0f\u200b\u997c\u5e72\u200b\uff0c2\u200b\u4e2a\u200b\u5b69\u5b50\u200b\u7684\u200b\u80c3\u53e3\u200b\u503c\u200b\u5206\u522b\u200b\u662f\u200b1,2\u3002\n\u200b\u4f60\u200b\u62e5\u6709\u200b\u7684\u200b\u997c\u5e72\u200b\u6570\u91cf\u200b\u548c\u200b\u5c3a\u5bf8\u200b\u90fd\u200b\u8db3\u4ee5\u200b\u8ba9\u200b\u6240\u6709\u200b\u5b69\u5b50\u200b\u6ee1\u8db3\u200b\u3002\n\u200b\u6240\u4ee5\u200b\u4f60\u200b\u5e94\u8be5\u200b\u8f93\u51fa\u200b2.\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a</p> <p>1 &lt;= g.length &lt;= 3 * 104</p> <p>0 &lt;= s.length &lt;= 3 * 104</p> <p>1 &lt;= g[i], s[j] &lt;= 231 - 1</p>"},{"location":"LeetCode/455-AssignCookies/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O\uff08mlogm + nlogn\uff09 \u200b\u6392\u5e8f\u200b\u7684\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b <pre><code>class Solution {\npublic:\n    int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) {\n        int result = 0;\n        int sIndex = s.size() - 1;\n        sort(g.begin(),g.end());\n        sort(s.begin(),s.end());\n        for(int i= g.size() - 1; i &gt;=0; i--){\n            if(sIndex &gt;= 0 &amp;&amp; g[i] &lt;= s[sIndex]){\n                result++;\n                sIndex--;\n            }\n        }\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/66-PlusOne/","title":"66.\u200b\u52a0\u4e00","text":""},{"location":"LeetCode/66-PlusOne/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u7531\u200b \u200b\u6574\u6570\u200b \u200b\u7ec4\u6210\u200b\u7684\u200b \u200b\u975e\u7a7a\u200b \u200b\u6570\u7ec4\u200b\u6240\u200b\u8868\u793a\u200b\u7684\u200b\u975e\u8d1f\u200b\u6574\u6570\u200b\uff0c\u200b\u5728\u200b\u8be5\u6570\u200b\u7684\u200b\u57fa\u7840\u200b\u4e0a\u52a0\u200b\u4e00\u200b\u3002</p> <p>\u200b\u6700\u9ad8\u200b\u4f4d\u200b\u6570\u5b57\u200b\u5b58\u653e\u200b\u5728\u200b\u6570\u7ec4\u200b\u7684\u200b\u9996\u4f4d\u200b\uff0c \u200b\u6570\u7ec4\u200b\u4e2d\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u53ea\u200b\u5b58\u50a8\u200b\u5355\u4e2a\u200b\u6570\u5b57\u200b\u3002</p> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5047\u8bbe\u200b\u9664\u4e86\u200b\u6574\u6570\u200b 0 \u200b\u4e4b\u5916\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u6574\u6570\u200b\u4e0d\u4f1a\u200b\u4ee5\u200b\u96f6\u200b\u5f00\u5934\u200b\u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1adigits = [1,2,3]\n\u200b\u8f93\u51fa\u200b\uff1a[1,2,4]\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u8f93\u5165\u200b\u6570\u7ec4\u200b\u8868\u793a\u200b\u6570\u5b57\u200b 123\u3002\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1adigits = [4,3,2,1]\n\u200b\u8f93\u51fa\u200b\uff1a[4,3,2,2]\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u8f93\u5165\u200b\u6570\u7ec4\u200b\u8868\u793a\u200b\u6570\u5b57\u200b 4321\u3002\n\n\u200b\u793a\u4f8b\u200b 3\uff1a\n\u200b\u8f93\u5165\u200b\uff1adigits = [0]\n\u200b\u8f93\u51fa\u200b\uff1a[1]\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - 1 &lt;= digits.length &lt;= 100 - 0 &lt;= digits[i] &lt;= 9</p>"},{"location":"LeetCode/66-PlusOne/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(N) <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) {\n        vector&lt;int&gt; result;\n        int flag = 0;\n\n        for(int index = digits.size() - 1; index &gt;=0; index--){\n            if(index == digits.size() - 1){\n                digits[index]  += 1; \n            }\n            digits[index] += flag;\n            flag = 0;\n            if(digits[index] &gt;= 10){\n                flag = 1;\n                digits[index] %= 10;\n            }\n        }\n        if(flag !=0) result.push_back(flag);\n        int length = digits.size() + flag;\n        for(int i=0;i&lt; digits.size(); i++){\n            result.push_back(digits[i]);\n        }\n        return result;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/88-MergeSortedArray/","title":"88.\u200b\u5408\u5e76\u200b\u4e24\u4e2a\u200b\u6709\u5e8f\u200b\u6570\u7ec4","text":""},{"location":"LeetCode/88-MergeSortedArray/#_1","title":"\u9898\u76ee\u200b\u63cf\u8ff0","text":"<p>\u200b\u7ed9\u200b\u4f60\u200b\u4e24\u4e2a\u200b\u6309\u200b \u200b\u975e\u200b\u9012\u51cf\u200b\u987a\u5e8f\u200b \u200b\u6392\u5217\u200b\u7684\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums1 \u200b\u548c\u200b nums2\uff0c\u200b\u53e6\u6709\u200b\u4e24\u4e2a\u200b\u6574\u6570\u200b m \u200b\u548c\u200b n \uff0c\u200b\u5206\u522b\u200b\u8868\u793a\u200b nums1 \u200b\u548c\u200b nums2 \u200b\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b\u6570\u76ee\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u4f60\u200b \u200b\u5408\u5e76\u200b nums2 \u200b\u5230\u200b nums1 \u200b\u4e2d\u200b\uff0c\u200b\u4f7f\u200b\u5408\u5e76\u200b\u540e\u200b\u7684\u200b\u6570\u7ec4\u200b\u540c\u6837\u200b\u6309\u200b \u200b\u975e\u200b\u9012\u51cf\u200b\u987a\u5e8f\u200b \u200b\u6392\u5217\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u6700\u7ec8\u200b\uff0c\u200b\u5408\u5e76\u200b\u540e\u200b\u6570\u7ec4\u200b\u4e0d\u5e94\u200b\u7531\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\uff0c\u200b\u800c\u662f\u200b\u5b58\u50a8\u200b\u5728\u200b\u6570\u7ec4\u200b nums1 \u200b\u4e2d\u200b\u3002\u200b\u4e3a\u4e86\u200b\u5e94\u5bf9\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\uff0cnums1 \u200b\u7684\u200b\u521d\u59cb\u200b\u957f\u5ea6\u200b\u4e3a\u200b m + n\uff0c\u200b\u5176\u4e2d\u200b\u524d\u200b m \u200b\u4e2a\u200b\u5143\u7d20\u200b\u8868\u793a\u200b\u5e94\u200b\u5408\u5e76\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u540e\u200b n \u200b\u4e2a\u200b\u5143\u7d20\u200b\u4e3a\u200b 0 \uff0c\u200b\u5e94\u200b\u5ffd\u7565\u200b\u3002nums2 \u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b n \u3002</p> <pre><code>\u200b\u793a\u4f8b\u200b 1\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n\u200b\u8f93\u51fa\u200b\uff1a[1,2,2,3,5,6]\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u9700\u8981\u200b\u5408\u5e76\u200b [1,2,3] \u200b\u548c\u200b [2,5,6] \u3002\n\u200b\u5408\u5e76\u200b\u7ed3\u679c\u200b\u662f\u200b [1,2,2,3,5,6] \uff0c\u200b\u5176\u4e2d\u200b\u659c\u4f53\u200b\u52a0\u7c97\u200b\u6807\u6ce8\u200b\u7684\u200b\u4e3a\u200b nums1 \u200b\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b\u3002\n\n\u200b\u793a\u4f8b\u200b 2\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums1 = [1], m = 1, nums2 = [], n = 0\n\u200b\u8f93\u51fa\u200b\uff1a[1]\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u9700\u8981\u200b\u5408\u5e76\u200b [1] \u200b\u548c\u200b [] \u3002\n\u200b\u5408\u5e76\u200b\u7ed3\u679c\u200b\u662f\u200b [1] \u3002\n\n\u200b\u793a\u4f8b\u200b 3\uff1a\n\u200b\u8f93\u5165\u200b\uff1anums1 = [0], m = 0, nums2 = [1], n = 1\n\u200b\u8f93\u51fa\u200b\uff1a[1]\n\u200b\u89e3\u91ca\u200b\uff1a\u200b\u9700\u8981\u200b\u5408\u5e76\u200b\u7684\u200b\u6570\u7ec4\u200b\u662f\u200b [] \u200b\u548c\u200b [1] \u3002\n\u200b\u5408\u5e76\u200b\u7ed3\u679c\u200b\u662f\u200b [1] \u3002\n\u200b\u6ce8\u610f\u200b\uff0c\u200b\u56e0\u4e3a\u200b m = 0 \uff0c\u200b\u6240\u4ee5\u200b nums1 \u200b\u4e2d\u200b\u6ca1\u6709\u200b\u5143\u7d20\u200b\u3002nums1 \u200b\u4e2d\u200b\u4ec5\u5b58\u200b\u7684\u200b 0 \u200b\u4ec5\u4ec5\u200b\u662f\u200b\u4e3a\u4e86\u200b\u786e\u4fdd\u200b\u5408\u5e76\u200b\u7ed3\u679c\u200b\u53ef\u4ee5\u200b\u987a\u5229\u200b\u5b58\u653e\u200b\u5230\u200b nums1 \u200b\u4e2d\u200b\u3002\n</code></pre> <p>\u200b\u63d0\u793a\u200b\uff1a - nums1.length == m + n - nums2.length == n - 0 &lt;= m, n &lt;= 200 - 1 &lt;= m + n &lt;= 200 - -109 &lt;= nums1[i], nums2[j] &lt;= 109</p> <p>\u200b\u8fdb\u9636\u200b\uff1a\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u8bbe\u8ba1\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(m + n) \u200b\u7684\u200b\u7b97\u6cd5\u200b\u89e3\u51b3\u200b\u6b64\u200b\u95ee\u9898\u200b\u5417\u200b\uff1f</p>"},{"location":"LeetCode/88-MergeSortedArray/#_2","title":"\u7b54\u6848","text":"<p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b0(m + n) <pre><code>class Solution {\npublic:\n    void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\n        int indexOne = m - 1, indexTwo = n - 1;\n        for(int i = m + n - 1; i &gt;= 0; i--){\n            if(indexOne &lt; 0){\n                nums1[i] = nums2[indexTwo--];\n            }else if(indexTwo &lt; 0){\n                nums1[i] = nums1[indexOne--];\n            }\n            else if(nums1[indexOne] &gt;= nums2[indexTwo]){\n                nums1[i] = nums1[indexOne--];\n            }else{\n                nums1[i] = nums2[indexTwo--];\n            }\n        }\n    }\n};\n</code></pre></p>"},{"location":"Vulkan/","title":"\u76ee\u5f55","text":"<ul> <li>VulkanDemo</li> <li>\u200b\u4ecb\u7ecd\u200b</li> </ul>"},{"location":"Vulkan/0-VulkanDemo/","title":"Vulkan Demo","text":""},{"location":"Vulkan/0-VulkanDemo/#github-repository","title":"Github Repository","text":"<p>https://github.com/908760230/RenderToy</p>"},{"location":"Vulkan/0-VulkanDemo/#demos","title":"Demos","text":"<ul> <li> <p>triangle </p> </li> <li> <p>imgui </p> </li> <li> <p>viking </p> </li> <li> <p>texture </p> </li> <li> <p>dynamic uniform buffer </p> </li> </ul>"},{"location":"Vulkan/1-introduction/","title":"Vulkan","text":"<pre><code> The Khronos\u00ae Vulkan Working Group Version 1.3.272,2023-12-01 10:53:28Z\n</code></pre>"},{"location":"Vulkan/1-introduction/#1","title":"1.\u200b\u4e3b\u673a\u200b\u73af\u5883","text":""},{"location":"blog/","title":"\u535a\u5ba2\u200b\u76ee\u5f55","text":"<p>test</p>"},{"location":"c%2B%2B/0%E7%9B%AE%E5%BD%95/","title":"\u76ee\u5f55","text":""}]}